'## Monoidal Merge Sort
Warning: Very slow for now!!
Because merging sorted lists is associative, we can expose the
parallelism of merge sort to the Dex compiler by making a monoid
and using reduce or yield_accum.
However, this approach puts a lot of pressure on the compiler.
As noted on [StackOverflow](https://stackoverflow.com/questions/21877572/can-you-formulate-the-bubble-sort-as-a-monoid-or-semigroup),
if the compiler does the reduction one element at a time,
it's doing bubble / insertion sort with quadratic time cost.
However, if breaks the list in half recursively, it'll be doing parallel mergesort.
Currently it'll do the quadratic time version.

def concat_table {a b v} (leftin: a=>v) (rightin: b=>v) : ((a|b)=>v) =
  for idx. case idx of
    Left i  -> leftin.i
    Right i -> rightin.i

def merge_sorted_tables {a m n} [Ord a] (xs:m=>a) (ys:n=>a) : ((m|n)=>a) =
  -- Possible improvements:
  --  1) Using a SortedTable type.
  --  2) Avoid needlessly initializing the return array.
  init = concat_table xs ys  -- Initialize array of correct size.
  yield_state init \buf.
    with_state (0, 0) \countrefs.
      for i:(m|n).
        (cur_x, cur_y) = get countrefs
        if cur_y >= size n  -- no ys left
          then
            countrefs := (cur_x + 1, cur_y)
            buf!i := xs.(unsafe_from_ordinal _ cur_x)
          else
            if cur_x < size m -- still xs left
              then 
                if xs.(unsafe_from_ordinal _ cur_x) <= ys.(unsafe_from_ordinal _ cur_y)
                  then
                    countrefs := (cur_x + 1, cur_y)
                    buf!i := xs.(unsafe_from_ordinal _ cur_x)
                  else
                    countrefs := (cur_x, cur_y + 1)
                    buf!i := ys.(unsafe_from_ordinal _ cur_y)

def merge_sorted_lists {a} [Ord a] (AsList nx xs: List a) (AsList ny ys: List a) : List a =
  -- Need this wrapper because Dex can't automatically weaken
  -- (a | b)=>c to ((Fin d)=>c)
  sorted = merge_sorted_tables xs ys
  newsize = nx + ny
  AsList _ $ unsafe_cast_table (Fin newsize) sorted

def sort {a n} [Ord a] (xs: n=>a) : n=>a =
  -- Warning: Has quadratic runtime cost for now.

  xlists = for i:n. (AsList 1 [xs.i])

  -- Merge sort monoid:
  mempty = AsList 0 []
  mcombine = merge_sorted_lists

  -- reduce might someday recursively subdivide the problem.
  (AsList _ r) = reduce mempty mcombine xlists
  unsafe_cast_table n r

def (+|) {n} [Ix n] (i:n) (delta:Int) : n =
  i' = ordinal i + delta
  from_ordinal _ $ select (i' >= size n) (size n - 1) i'

def is_sorted {a n} [Ord a] (xs:n=>a) : Bool =
  all for i. xs.i <= xs.(i +| 1)

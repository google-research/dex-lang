'# Sets and Set-Indexed Arrays

import sort

'## Monoidal enforcement of uniqueness in sorted lists

def last(xs:n=>a) -> Maybe a given (n|Ix, a) =
  s = size n
  case s == 0 of
    True -> Nothing
    False -> Just xs[unsafe_from_ordinal (unsafe_nat_diff s 1)]

def first(xs:n=>a) -> Maybe a given (n|Ix, a) =
  s = size n
  case s == 0 of
    True -> Nothing
    False -> Just xs[unsafe_from_ordinal 0]

def all_except_last(xs:n=>a) -> List a given (n|Ix, a) =
  shortSize = Fin (size n -| 1)
  allButLast = for i:shortSize. xs[unsafe_from_ordinal (ordinal i)]
  AsList _ allButLast

def merge_unique_sorted_lists(xlist:List a, ylist:List a) -> List a given (a|Eq) =
  -- This function is associative, for use in a monoidal reduction.
  -- Assumes all xs are <= all ys.
  -- The element at the end of xs might equal the
  -- element at the beginning of ys.  If so, this
  -- function removes the duplicate when concatenating the lists.
  AsList(nx, xs) = xlist
  AsList(_ , ys) = ylist
  case last xs of
    Nothing -> ylist
    Just last_x -> case first ys of
      Nothing -> xlist
      Just first_y -> case last_x == first_y of
        False -> concat [xlist,            ylist]
        True ->  concat [all_except_last xs, ylist]

def remove_duplicates_from_sorted(xs:n=>a) -> List a given (n|Ix, a|Eq) =
  xlists = for i:n. (AsList 1 [xs[i]])
  reduce (AsList 0 []) merge_unique_sorted_lists xlists


'## Sets

data Set(a|Ord) =
  -- Guaranteed to be in sorted order with unique elements,
  -- as long as no one else uses this constructor.
  -- Instead use the "toSet" function below.
  UnsafeAsSet(n:Nat, elements:(Fin n => a))

def to_set(xs:n=>a) -> Set a given (n|Ix, a|Ord) =
  sorted_xs = sort xs
  AsList(n', sorted_unique_xs) = remove_duplicates_from_sorted sorted_xs
  UnsafeAsSet n' sorted_unique_xs

def set_size(p:Set a) -> Nat given (a|Ord) =
  UnsafeAsSet(n, _) = p
  n

instance Eq(Set a) given (a|Ord)
  def (==)(sx, sy) =
    UnsafeAsSet(_, xs) = sx
    UnsafeAsSet(_, ys) = sy
    (AsList _ xs) == (AsList _ ys)

def set_union(
    sx:Set a,
    sy:Set a
    ) -> Set a given (a|Ord) =
  UnsafeAsSet(nx, xs) = sx
  UnsafeAsSet(ny, ys) = sy
  combined = merge_sorted_tables xs ys
  AsList(n', sorted_unique_xs) = remove_duplicates_from_sorted combined
  UnsafeAsSet _ sorted_unique_xs

def set_intersect(
    sx:Set a,
    sy:Set a
    ) -> Set a given (a|Ord) =
  UnsafeAsSet(nx, xs) = sx
  UnsafeAsSet(ny, ys) = sy
  -- This could be done in O(nx + ny) instead of O(nx log ny).
  isInYs = \x. case search_sorted ys x of
    Just x -> True
    Nothing -> False
  AsList(n', intersection) = filter xs isInYs
  UnsafeAsSet _ intersection


'## Sets as a type, whose inhabitants can index arrays

-- TODO Implicit arguments to data definitions
-- (Probably `a` should be implicit)
struct Element(set:(Set a)) given (a|Ord) =
  val: Nat

-- TODO The set argument could be implicit (inferred from the Element
-- type), but maybe it's easier to read if it's explicit.
def member(x:a, set:(Set a)) -> Maybe (Element set) given (a|Ord) =
  UnsafeAsSet(_, elts) = set
  case search_sorted elts x of
    Just n -> Just $ Element(ordinal n)
    Nothing -> Nothing

def value(x:Element set) -> a given (a|Ord, set:Set a) =
  UnsafeAsSet(_, elts) = set
  elts[unsafe_from_ordinal x.val]

instance Ix(Element set) given (a|Ord, set:Set a)
  def size'() = set_size set
  def ordinal(n) = n.val
  def unsafe_from_ordinal(n) = Element(n)

instance Eq(Element set) given (a|Ord, set:Set a)
  def (==)(ix1, ix2) = ordinal ix1 == ordinal ix2

instance Ord(Element set) given (a|Ord, set:Set a)
  def (<)(ix1, ix2) = ordinal ix1 < ordinal ix2
  def (>)(ix1, ix2) = ordinal ix1 > ordinal ix2

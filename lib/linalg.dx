'# Linear Algebra
- Cholesky Decomposition
- LU Decomposition
- Matrix Inversion


'## Triangular matrices

def LowerTriMat (n:Type) [Ix n] (v:Type) : Type = (i:n)=>(..i)=>v
def UpperTriMat (n:Type) [Ix n] (v:Type) : Type = (i:n)=>(i..)=>v

def refl_less {n} [Ix n] (i:n) : (..i) = unsafe_project _ i
def refl_more {n} [Ix n] (i:n) : (i..) = unsafe_project _ i

def upper_tri_diag {n v} (u:UpperTriMat n v) : n=>v = view i. u.i.(refl_more i)
def lower_tri_diag {n v} (l:LowerTriMat n v) : n=>v = view i. l.i.(refl_less i)

def is_last {n} [Ix n] (x:n) : Bool = (ordinal x + 1) == size n

def lower_tri_identity {a n} [Ix n, Add a, Mul a] : LowerTriMat n a =
  for i j. select (is_last j) one zero

'## Representing inequalities between indices

-- These would be unnecessary if there were syntax for dependent pairs.
data LowerTriIx n    = MkLowerTriIx    i:n j:(..i)
data UpperTriIx n    = MkUpperTriIx    i:n j:(i..)
data LowerTriIxExc n = MkLowerTriIxExc i:n j:(..<i)
data UpperTriIxExc n = MkUpperTriIxExc i:n j:(i<..)

'## Flipping inequalities between indices

-- TODO: Put these in instances of an Isomorphism interface?
def transpose_upper_ix {n} [Ix n] (i:n) (j:(i..)) : LowerTriIx n =
  j' = inject n j
  i' = unsafe_project _ i
  MkLowerTriIx j' i'

def transpose_lower_ix {n} [Ix n] (i:n) (j:(..i)) : UpperTriIx n =
  j' = inject n j
  i' = unsafe_project _ i
  MkUpperTriIx j' i'

def transpose_upper_ix_exc {n} [Ix n] (i:n) (j:(i<..)) : LowerTriIxExc n =
  j' = inject n j
  i' = unsafe_project _ i
  MkLowerTriIxExc j' i'

def transpose_lower_ix_exc {n} [Ix n] (i:n) (j:(..<i)) : UpperTriIxExc n =
  j' = inject n j
  i' = unsafe_project _ i
  MkUpperTriIxExc j' i'

def transpose_lower_to_upper {n v} (lower:LowerTriMat n v) : UpperTriMat n v =
  for i j.
    (MkLowerTriIx j' i') = transpose_upper_ix i j
    lower.j'.i'

def transpose_upper_to_lower {n v} (upper:UpperTriMat n v) : LowerTriMat n v =
  for i j.
    (MkUpperTriIx j' i') = transpose_lower_ix i j
    upper.j'.i'

def transpose_lower_to_upper_no_diag {n v}
    (lower:(i:n)=>(..<i)=>v) :
           (i:n)=>(i<..)=>v =
  for i j.
    (MkLowerTriIxExc j' i') = transpose_upper_ix_exc i j
    lower.j'.i'

'## Type-shifting inequalities between indices

instance Subset (LowerTriIx m) (LowerTriIx n) given {m n} [Ix n, Ix m, Subset m n]
  inject' = \(MkLowerTriIx i j).
    i' = inject n i
    j' = unsafe_project _ $ inject n $ inject m j
    MkLowerTriIx i' j'
  project' = \(MkLowerTriIx i j).
    case project m i of
      Nothing -> Nothing
      (Just i') ->
        j' = inject n j
        j'' = unsafe_project m j'
        Just $ MkLowerTriIx i' $ unsafe_project _ j''
  unsafe_project' = \(MkLowerTriIx i j).
    i' = unsafe_project m i
    j' = inject n j
    j'' = unsafe_project m j'
    MkLowerTriIx i' $ unsafe_project _ j''

instance Subset (UpperTriIx m) (UpperTriIx n) given {m n} [Ix n, Ix m, Subset m n]
  inject' = \(MkUpperTriIx i j).
    i' = inject n i
    j' = unsafe_project _ $ inject n $ inject m j
    MkUpperTriIx i' j'
  project' = \(MkUpperTriIx i j).
    case project m i of
      Nothing -> Nothing
      (Just i') ->
        j' = inject n j
        j'' = unsafe_project m j'
        Just $ MkUpperTriIx i' $ unsafe_project _ j''
  unsafe_project' = \(MkUpperTriIx i j).
    i' = unsafe_project m i
    j' = inject n j
    j'' = unsafe_project m j'
    MkUpperTriIx i' $ unsafe_project _ j''

instance Subset (LowerTriIxExc m) (LowerTriIxExc n) given {m n} [Ix n, Ix m, Subset m n]
  inject' = \(MkLowerTriIxExc i j).
    i' = inject n i
    j' = unsafe_project _ $ inject n $ inject m j
    MkLowerTriIxExc i' j'
  project' = \(MkLowerTriIxExc i j).
    case project m i of
      Nothing -> Nothing
      (Just i') ->
        j' = inject n j
        j'' = unsafe_project m j'
        Just $ MkLowerTriIxExc i' $ unsafe_project _ j''
  unsafe_project' = \(MkLowerTriIxExc i j).
    i' = unsafe_project m i
    j' = inject n j
    j'' = unsafe_project m j'
    MkLowerTriIxExc i' $ unsafe_project _ j''

instance Subset (UpperTriIxExc m) (UpperTriIxExc n) given {m n} [Ix n, Ix m, Subset m n]
  inject' = \(MkUpperTriIxExc i j).
    i' = inject n i
    j' = unsafe_project _ $ inject n $ inject m j
    MkUpperTriIxExc i' j'
  project' = \(MkUpperTriIxExc i j).
    case project m i of
      Nothing -> Nothing
      (Just i') ->
        j' = inject n j
        j'' = unsafe_project m j'
        Just $ MkUpperTriIxExc i' $ unsafe_project _ j''
  unsafe_project' = \(MkUpperTriIxExc i j).
    i' = unsafe_project m i
    j' = inject n j
    j'' = unsafe_project m j'
    MkUpperTriIxExc i' $ unsafe_project _ j''

'## Chaining inequalities between indices

def relax_ii {n} {p:n} [Ix n] (i:(p ..)) (j:(.. p)) : LowerTriIx n =
  i' = inject n i
  j' = inject n j
  MkLowerTriIx i' $ unsafe_project _ j'

def relax_ei {n} {p:n} [Ix n] (i:(p<..)) (j:(.. p)) : LowerTriIxExc n =
  i' = inject n i
  j' = inject n j
  MkLowerTriIxExc i' $ unsafe_project _ j'

def relax_ie {n} {p:n} [Ix n] (i:(p ..)) (j:(..<p)) : LowerTriIxExc n =
  i' = inject n i
  j' = inject n j
  MkLowerTriIxExc i' $ unsafe_project _ j'

def relax_ee {n} {p:n} [Ix n] (i:(p<..)) (j:(..<p)) : LowerTriIxExc n =
  i' = inject n i
  j' = inject n j
  MkLowerTriIxExc i' $ unsafe_project _ j'

'## Linalg helpers

def skew_symmetric_prod {v n} [VSpace v]
    (lower: (i:n)=>(..<i)=>Float) (y: n=>v) : n=>v =
  upper = transpose_lower_to_upper_no_diag lower
  -- We could probably fuse these two for loops.
  lower_prod = for i. sum for j. lower.i.j .* (y.(inject n j))
  upper_prod = for i. sum for j. upper.i.j .* (y.(inject n j))
  lower_prod - upper_prod

def forward_substitute {n v} [VSpace v] (a:LowerTriMat n Float) (b:n=>v) : n=>v =
  -- Solves lower triangular linear system (inverse a) **. b
  yield_state zero \sRef.
    for i:n.
      s = sum for k:(..i).  -- dot product
        a.i.k .* get sRef!(inject n k)
      sRef!i := (b.i - s) / (lower_tri_diag a).i

def backward_substitute {n v} [VSpace v] (a:UpperTriMat n Float) (b:n=>v) : n=>v =
  -- Solves upper triangular linear system (inverse a) **. b
  yield_state zero \sRef.
    rof i:n.
      s = sum for k:(i..).  -- dot product
        a.i.k .* get sRef!(inject n k)
      sRef!i := (b.i - s) / (upper_tri_diag a).i

-- Todo: get rid of these by writing a dependent indexing (!) operator.
def lower_tri_mat {a b h} (ref:Ref h (LowerTriMat a b)) (i:a) (j:(..i)) : Ref h b =
  d = %indexRef ref i
  d!j
def upper_tri_mat {a b h} (ref:Ref h (UpperTriMat a b)) (i:a) (j:(i..)) : Ref h b =
  d = %indexRef ref i
  d!j

'## Cholesky decomposition

def chol {n} (x:n=>n=>Float) : LowerTriMat n Float =
  yield_state zero \buf.
    mat = lower_tri_mat buf
    for i:n. for j:(..i).
      row_i = for k:(..<j). get $ mat i (inject (..i) k)
      row_j = for k:(..<j).
        (MkLowerTriIxExc j2 k2) = inject _ $ MkLowerTriIxExc j k
        get $ mat j2 (inject _ k2)
      j' = inject n j
      a = x.i.j' - vdot row_i row_j
      if (ordinal j) == (ordinal i)
        then
          mat i j := sqrt a
        else
          b = get $ mat j' (refl_less j')
          mat i j := a / b

'## Permutations

-- The sign of the determinant of a permutation is either 1.0 or -1.0
PermutationSign = Float

def Permutation (n:Type) [Ix n] : Type = (n=>n & PermutationSign)

def apply_permutation {n t} ((perm, _):Permutation n) (xs: n=>t) : n=>t =
  for i. xs.(perm.i)

def identity_permutation {n} [Ix n] : Permutation n =
  (for i. i, 1.0)

def swap_in_place {n h} (pRef: Ref h (Permutation n)) (i:n) (j:n) : {State h} Unit =
  (permRef, signRef) = (fst_ref pRef, snd_ref pRef)
  tempj = get permRef!j
  permRef!j := get permRef!i
  permRef!i := tempj
  signRef := -(get signRef)

def perm_to_table {n} ((perm, _):Permutation n) : n=>n = perm
def perm_sign     {n} ((_, sign):Permutation n) : PermutationSign = sign


'## LU decomposition functions

def pivotize {n} (a:n=>n=>Float) : Permutation n =
  -- Gives a row permutation that makes Gaussian elimination more stable.
  yield_state identity_permutation \permRef.
    for j:n.
      row_with_largest = argmax for i:(j..). abs a.(inject n i).j
      if (ordinal j) /= (ordinal row_with_largest) then
        swap_in_place permRef j (inject n row_with_largest)

def lu {n} (a: n=>n=>Float) :
       (LowerTriMat n Float & UpperTriMat n Float & Permutation n) =
  -- Computes lower, upper, and permuntation matrices from a square matrix,
  -- such that apply_permutation permutation a == lower ** upper.
  permutation = pivotize a
  a = apply_permutation permutation a

  init_lower : (LowerTriMat n Float) = lower_tri_identity
  init_upper = zero

  (lower, upper) = yield_state (init_lower, init_upper) \stateRef.
    lRef = fst_ref stateRef
    uRef = snd_ref stateRef

  -- For reference, here's code to compute the LU decomposition
  -- with standard flat matrices:
  --  for j:n.
  --    for i:(..j).
  --      i = inject _ i
  --      s = sum for k':(..i).
  --        k = inject _ k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      uRef!i!j := a.i.j - s

  --    for i':(j<..).
  --      i = inject _ i'
  --      s = sum for k':(..j).
  --        k = inject _ k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      lRef!i!j := (a.i.j - s) / (get uRef!j!j)
  --    for i:n. ()

    for j:n.
      for i:(..j).
        s = sum for k:(..i).
          (MkUpperTriIx k2 _)  = transpose_lower_ix i k
          (MkUpperTriIx k3 j3) = transpose_lower_ix j k2
          ukj = get $ upper_tri_mat uRef k3 j3
          (MkLowerTriIx i4 k4) = inject _ $ MkLowerTriIx i k
          lik = get $ lower_tri_mat lRef i4 k4
          ukj * lik

        (MkUpperTriIx i' j') = transpose_lower_ix j i
        upper_tri_mat uRef i' j' := a.(inject _ i).j - s

      for i:(j<..).
        s = sum for k:(..j).
          (MkUpperTriIx k2 j2) = transpose_lower_ix j k
          ukj = get $ upper_tri_mat uRef k2 j2
          (MkLowerTriIxExc i3 k3) = relax_ei i k
          lik = get $ lower_tri_mat lRef i3 $ inject _ k3
          ukj * lik

        ujj = get $ upper_tri_mat uRef j (refl_more j)
        (MkLowerTriIxExc i' j') = transpose_upper_ix_exc j i
        lower_tri_mat lRef i' (inject _ j') := (a.i'.j - s) / ujj
  (lower, upper, permutation)

'## General linear algebra functions

def solve {n v} [VSpace v] (a:n=>n=>Float) (b:n=>v) : n=>v =
  -- There's a small speedup possible by exploiting the fact
  -- that l always has ones on the diagonal.  It would just require a
  -- custom forward_substitute routine that doesn't divide
  -- by the diagonal entries.
  (l, u, perm) = lu a
  b' = apply_permutation perm b
  y = forward_substitute l b'
  backward_substitute u y

def invert {n} (a:n=>n=>Float) : n=>n=>Float =
  solve a eye

def determinant {n} (a:n=>n=>Float) : Float =
  (l, u, perm) = lu a
  prod (for i. (upper_tri_diag u).i * (lower_tri_diag l).i) * perm_sign perm

def sign_and_log_determinant {n} (a:n=>n=>Float) : (Float & Float) =
  (l, u, perm) = lu a
  diags = for i. (upper_tri_diag u).i * (lower_tri_diag l).i
  sign = (perm_sign perm) * prod for i. sign diags.i
  sum_of_log_abs = sum for i. log (abs diags.i)
  (sign, sum_of_log_abs)

def matrix_power {n} (base:n=>n=>Float) (power:Nat) : n=>n=>Float =
  general_integer_power (**) eye base power

def trace {n a} [Add a] (x:n=>n=>a) : a =
  sum for i. x.i.i

'## Linear Algebra
- Cholesky Decomposition
- LU Decomposition
- Matrix Inversion


def cast {a m} [Ix a, Ix m] (d:a) : m = (ordinal d)@m

'### Triangular matrices

def LowerTriMat (n:Type) [Ix n] (v:Type) : Type = i:n=>(..i)=>v
def UpperTriMat (n:Type) [Ix n] (v:Type) : Type = i:n=>(i..)=>v

def upperTriDiag {n v} (u:UpperTriMat n v) : n=>v = for i. u.i.(0@_)
def lowerTriDiag {n v} (l:LowerTriMat n v) : n=>v = for i. l.i.(cast i)

def transposeLowerToUpper {n v} (lower:LowerTriMat n v) : UpperTriMat n v =
  for i:n. for j':(i..).
    j = %inject j'
    lower.j.(cast i)

def forward_substitute {n v} [VSpace v] (a:LowerTriMat n Float) (b:n=>v) : n=>v =
  -- Solves lower triangular linear system (inverse a) **. b
  yieldState zero \sRef.
    for i:n.
      s = sum for k:(..<i).  -- dot product
        a.i.(cast k) .* get sRef!(%inject k)
      sRef!i := (b.i - s) / a.i.(cast i)

def backward_substitute {n v} [VSpace v] (a:UpperTriMat n Float) (b:n=>v) : n=>v =
  -- Solves upper triangular linear system (inverse a) **. b
  yieldState zero \sRef.
    rof i:n.
      s = sum for k:(i..).  -- dot product
        a.i.(cast k) .* get sRef!(%inject k)
      sRef!i := (b.i - s) / a.i.(0@_) -- 0 is the diagonal index

-- Todo: get rid of these by writing a dependent indexing (!) operator.
def lowerTriMat {a b h} (ref:Ref h (LowerTriMat a b)) (i:a) (j:(..i)) : Ref h b =
  d = %indexRef ref i
  d!j
def upperTriMat {a b h} (ref:Ref h (UpperTriMat a b)) (i:a) (j:(i..)) : Ref h b =
  d = %indexRef ref i
  d!j

'### Cholesky decomposition

def chol {n} (x:n=>n=>Float) : LowerTriMat n Float =
  yieldState zero \buf.
    mat = lowerTriMat buf
    for i:n. for j':(..i).
      j = %inject j'
      row  = for k:(..<j). get $ mat i (cast k)
      row' = for k:(..<j). get $ mat j (cast k)
      a = x.i.j - vdot row row'
      if (ordinal i) == (ordinal j)
        then
          mat i j' := sqrt a
        else
          b = get $ mat j (cast j')
          mat i j' := a / b

'### Permutations

-- The sign of the determinant of a permutation is either 1.0 or -1.0
PermutationSign = Float

def Permutation (n:Type) [Ix n] : Type = (perm:n=>n & PermutationSign)

def apply_permutation {n t} ((perm, _):Permutation n) (xs: n=>t) : n=>t =
  for i. xs.(perm.i)

def identity_permutation {n} [Ix n] : Permutation n =
  (for i. i, 1.0)

def swapInPlace {n h} (pRef: Ref h (Permutation n)) (i:n) (j:n) : {State h} Unit =
  (permRef, signRef) = (fstRef pRef, sndRef pRef)
  tempj = get permRef!j
  permRef!j := get permRef!i
  permRef!i := tempj
  signRef := -(get signRef)

def permToTable {n} ((perm, _):Permutation n) : n=>n = perm
def permSign    {n} ((_, sign):Permutation n) : PermutationSign = sign



'### LU decomposition functions

def pivotize {n} (a:n=>n=>Float) : Permutation n =
  -- Gives a row permutation that makes Gaussian elimination more stable.
  yieldState identity_permutation \permRef.
    for j:n.
      row_with_largest = argmin for i:(j..). (-(abs a.(%inject i).j))
      case ordinal j == ordinal row_with_largest of
        True -> ()
        False -> swapInPlace permRef j (%inject row_with_largest)

def lu {n} (a: n=>n=>Float) :
       (LowerTriMat n Float & UpperTriMat n Float & Permutation n) =
  -- Computes lower, upper, and permuntation matrices from a square matrix,
  -- such that apply_permutation permutation a == lower ** upper.
  permutation = pivotize a
  a = apply_permutation permutation a

  init_lower = for i:n. for j':(..i).
    select (ordinal i == (ordinal (%inject j'))) 1.0 0.0
  init_upper = zero

  (lower, upper) = yieldState (init_lower, init_upper) \stateRef.
    lRef = fstRef stateRef
    uRef = sndRef stateRef

  -- For reference, here's code to computed the LU decomposition
  -- without dependent tables (i.e. with standard flat matrices):
  --  for j:n.
  --    for i:(..j).
  --      i = %inject i
  --      s = sum for k':(..i).
  --        k = %inject k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      uRef!i!j := a.i.j - s

  --    for i':(j<..).
  --      i = %inject i'
  --      s = sum for k':(..j).
  --        k = %inject k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      lRef!i!j := (a.i.j - s) / (get uRef!j!j)
  --    for i:n. ()

    lmat = lowerTriMat lRef
    umat = upperTriMat uRef
    for j:n.
      for i:(..j).
        i' = %inject i
        s = sum for k:(..i).
          k'' = %inject k
          k' = %inject k''
          ukj = get $ umat k' (((ordinal j) - (ordinal k))@_)
          lik = get $ lmat i' (cast k)
          ukj * lik

        uijRef = umat i' (((ordinal j) - (ordinal i))@_)
        uijRef := a.(%inject i).j - s

      for i:(j<..).
        i' = %inject i
        s = sum for k:(..j).
          k' = %inject k
          i'' = (((ordinal j) - (ordinal k))@_)
          ukj = get $ umat k' i''
          lik = get $ lmat i' (cast k)
          ukj * lik

        i'' = ((ordinal i) + (ordinal j) + 1)@_
        ujj = get $ umat j (0@_)
        lijRef = lmat i'' (cast j)
        lijRef := (a.i'.j - s) / ujj
  (lower, upper, permutation)


'### General linear algebra functions.

def solve {n v} [VSpace v] (a:n=>n=>Float) (b:n=>v) : n=>v =
  -- There's a small speedup possible by exploiting the fact
  -- that l always has ones on the diagonal.  It would just require a
  -- custom forward_substitute routine that doesn't divide
  -- by the diagonal entries.
  (l, u, perm) = lu a
  b' = apply_permutation perm b
  y = forward_substitute l b'
  backward_substitute u y

def invert {n} (a:n=>n=>Float) : n=>n=>Float =
  solve a eye

def determinant {n} (a:n=>n=>Float) : Float =
  (l, u, perm) = lu a
  prod (for i. (upperTriDiag u).i * (lowerTriDiag l).i) * permSign perm

def sign_and_log_determinant {n} (a:n=>n=>Float) : (Float & Float) =
  (l, u, perm) = lu a
  diags = for i. (upperTriDiag u).i * (lowerTriDiag l).i
  sign = (permSign perm) * prod for i. sign diags.i
  sum_of_log_abs = sum for i. log (abs diags.i)
  (sign, sum_of_log_abs)

def matrix_power {n} (base:n=>n=>Float) (power:Int) : n=>n=>Float =
  generalIntegerPower (**) eye base power

def trace {n a} [Add a] (x:n=>n=>a) : a =
  sum for i. x.i.i

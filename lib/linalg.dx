'# Linear Algebra
- Cholesky Decomposition
- LU Decomposition
- Matrix Inversion


'## Triangular matrices

def LowerTriMat(n|Ix, v:Type) -> Type = (i:n)=>(..i)=>v
def UpperTriMat(n|Ix, v:Type) -> Type = (i:n)=>(i..)=>v

def refl_less(i:n) -> (..i) given (n|Ix) = unsafe_project i
def refl_more(i:n) -> (i..) given (n|Ix) = unsafe_project i

def upper_tri_diag(u:UpperTriMat n v) -> n=>v given (n|Ix, v) = for i. u[i,refl_more i]
def lower_tri_diag(l:LowerTriMat n v) -> n=>v given (n|Ix, v) = for i. l[i,refl_less i]

def is_last(x:n) -> Bool given (n|Ix) = (ordinal x + 1) == size n

def lower_tri_identity() -> LowerTriMat n a given(n|Ix, a|Add|Mul)  =
  for i j. select (is_last j) one zero

'## Representing inequalities between indices

-- These would be unnecessary if there were syntax for dependent pairs.
data LowerTriIx(n)    = MkLowerTriIx(   i:n, j:(..i))
data UpperTriIx(n)    = MkUpperTriIx(   i:n, j:(i..))
data LowerTriIxExc(n) = MkLowerTriIxExc(i:n, j:(..<i))
data UpperTriIxExc(n) = MkUpperTriIxExc(i:n, j:(i<..))

'## Flipping inequalities between indices

-- TODO: Put these in instances of an Isomorphism interface?
def transpose_upper_ix(i:n, j:(i..)) -> LowerTriIx n given (n|Ix) =
  j' = inject j
  i' = unsafe_project i
  MkLowerTriIx j' i'

def transpose_lower_ix(i:n, j:(..i)) -> UpperTriIx n given (n|Ix) =
  j' = inject j
  i' = unsafe_project i
  MkUpperTriIx j' i'

def transpose_upper_ix_exc(i:n, j:(i<..)) -> LowerTriIxExc n given (n|Ix) =
  j' = inject j
  i' = unsafe_project i
  MkLowerTriIxExc j' i'

def transpose_lower_ix_exc(i:n, j:(..<i)) -> UpperTriIxExc n given (n|Ix) =
  j' = inject j
  i' = unsafe_project i
  MkUpperTriIxExc j' i'

def transpose_lower_to_upper(lower:LowerTriMat n v) -> UpperTriMat n v given (n|Ix, v) =
  for i j.
    MkLowerTriIx(j', i') = transpose_upper_ix i j
    lower[j',i']

def transpose_upper_to_lower(upper:UpperTriMat n v) -> LowerTriMat n v given (n|Ix, v) =
  for i j.
    MkUpperTriIx(j', i') = transpose_lower_ix i j
    upper[j',i']

def transpose_lower_to_upper_no_diag(
    lower:(i:n)=>(..<i)=>v
    ) -> (i:n)=>(i<..)=>v given (n|Ix, v) =
  for i j.
    MkLowerTriIxExc(j', i') = transpose_upper_ix_exc i j
    lower[j',i']

'## Type-shifting inequalities between indices

instance Subset(LowerTriIx m, LowerTriIx n) given (m|Ix, n|Ix) (Subset m n)
  def inject'(ix) =
    MkLowerTriIx(i, j) = ix
    i' = inject(to=n, i)
    j' = unsafe_project $ inject(to=n, inject(to=m, j))
    MkLowerTriIx i' j'
  def project'(ix) =
    MkLowerTriIx(i, j) = ix
    case project(to=m, i) of
      Nothing -> Nothing
      Just i' ->
        j' = inject(to=n, j)
        j'' = unsafe_project(to=m, j')
        Just $ MkLowerTriIx i' $ unsafe_project j''
  def unsafe_project'(ix) =
    MkLowerTriIx(i, j) = ix
    i' = unsafe_project(to=m, i)
    j' = inject(to=n, j)
    j'' = unsafe_project(to=m, j')
    MkLowerTriIx i' $ unsafe_project j''

instance Subset(UpperTriIx m, UpperTriIx n) given (m|Ix, n|Ix) (Subset m n)
  def inject'(ix) =
    MkUpperTriIx(i, j) = ix
    i' = inject(to=n, i)
    j' = unsafe_project $ inject(to=n, inject(to=m, j))
    MkUpperTriIx i' j'
  def project'(ix) =
    MkUpperTriIx(i, j) = ix
    case project(to=m, i) of
      Nothing -> Nothing
      Just i' ->
        j' = inject(to=n, j)
        j'' = unsafe_project(to=m, j')
        Just $ MkUpperTriIx i' $ unsafe_project j''
  def unsafe_project'(ix) =
    MkUpperTriIx(i, j) = ix
    i' = unsafe_project(to=m, i)
    j' = inject(to=n, j)
    j'' = unsafe_project(to=m, j')
    MkUpperTriIx i' $ unsafe_project j''

instance Subset(LowerTriIxExc m, LowerTriIxExc n) given (m|Ix, n|Ix) (Subset m n)
  def inject'(ix) =
    MkLowerTriIxExc(i, j) = ix
    i' = inject(to=n, i)
    j' = unsafe_project $ inject(to=n, inject(to=m, j))
    MkLowerTriIxExc i' j'
  def project'(ix) =
    MkLowerTriIxExc(i, j) = ix
    case project(to=m, i) of
      Nothing -> Nothing
      Just i' ->
        j' = inject(to=n, j)
        j'' = unsafe_project(to=m, j')
        Just $ MkLowerTriIxExc i' $ unsafe_project j''
  def unsafe_project'(ix) =
    MkLowerTriIxExc(i, j) = ix
    i' = unsafe_project(to=m, i)
    j' = inject(to=n, j)
    j'' = unsafe_project(to=m, j')
    MkLowerTriIxExc i' $ unsafe_project j''

instance Subset(UpperTriIxExc m, UpperTriIxExc n) given (m|Ix, n|Ix) (Subset m n)
  def inject'(ix) =
    MkUpperTriIxExc(i, j) = ix
    i' = inject(to=n, i)
    j' = unsafe_project $ inject(to=n, inject(to=m, j))
    MkUpperTriIxExc i' j'
  def project'(ix) =
    MkUpperTriIxExc(i, j) = ix
    case project(to=m, i) of
      Nothing -> Nothing
      Just i' ->
        j' = inject(to=n, j)
        j'' = unsafe_project(to=m, j')
        Just $ MkUpperTriIxExc i' $ unsafe_project j''
  def unsafe_project'(ix) =
    MkUpperTriIxExc(i, j) = ix
    i' = unsafe_project(to=m, i)
    j' = inject(to=n, j)
    j'' = unsafe_project(to=m, j')
    MkUpperTriIxExc i' $ unsafe_project j''

'## Chaining inequalities between indices

def relax_ii(i:(p ..), j:(.. p)) -> LowerTriIx n given (n|Ix, p:n) =
  i' = inject(to=n, i)
  j' = inject(to=n, j)
  MkLowerTriIx i' $ unsafe_project j'

def relax_ei(i:(p<..), j:(.. p)) -> LowerTriIxExc n given(n|Ix, p:n) =
  i' = inject(to=n, i)
  j' = inject(to=n, j)
  MkLowerTriIxExc i' $ unsafe_project j'

def relax_ie(i:(p ..), j:(..<p)) -> LowerTriIxExc n given(n|Ix, p:n) =
  i' = inject(to=n, i)
  j' = inject(to=n, j)
  MkLowerTriIxExc i' $ unsafe_project j'

def relax_ee(i:(p<..), j:(..<p)) -> LowerTriIxExc n given(n|Ix, p:n) =
  i' = inject(to=n, i)
  j' = inject(to=n, j)
  MkLowerTriIxExc i' $ unsafe_project j'

'## Linalg helpers

def skew_symmetric_prod(lower: (i:n)=>(..<i)=>Float, y: n=>v) -> n=>v given (n|Ix, v|VSpace) =
  upper = transpose_lower_to_upper_no_diag lower
  -- We could probably fuse these two for loops.
  lower_prod = for i. sum for j. lower[i,j] .* y[inject j]
  upper_prod = for i. sum for j. upper[i,j] .* y[inject j]
  lower_prod - upper_prod

def forward_substitute(a:LowerTriMat n Float, b:n=>v) -> n=>v given (n|Ix, v|VSpace) =
  -- Solves lower triangular linear system (inverse a) **. b
  yield_state zero \sRef.
    for i:n.
      s = sum for k:(..i).  -- dot product
        a[i,k] .* get sRef!(inject k)
      sRef!i := (b[i] - s) / (lower_tri_diag a)[i]

def backward_substitute(a:UpperTriMat n Float, b:n=>v) -> n=>v given (n|Ix, v|VSpace) =
  -- Solves upper triangular linear system (inverse a) **. b
  yield_state zero \sRef.
    rof i:n.
      s = sum for k:(i..).  -- dot product
        a[i,k] .* get sRef!(inject k)
      sRef!i := (b[i] - s) / (upper_tri_diag a)[i]

-- Todo: get rid of these by writing a dependent indexing (!) operator.
def lower_tri_mat(ref:Ref h (LowerTriMat a b), i:a, j:(..i)) -> Ref h b given (a|Data|Ix, b|Data, h) =
  d = %indexRef(ref, i)
  d!j

def upper_tri_mat(ref:Ref h (UpperTriMat a b), i:a, j:(i..)) -> Ref h b given (a|Data|Ix, b|Data, h) =
  d = %indexRef(ref, i)
  d!j

'## Cholesky decomposition

def chol(x:n=>n=>Float) -> LowerTriMat n Float given (n|Ix) =
  yield_state zero \buf.
    for i:n. for j:(..i).
      row_i = for k:(..<j). get $ lower_tri_mat buf i inject(to=(..i), k)
      row_j = for k:(..<j).
        MkLowerTriIxExc(j2, k2) = inject $ MkLowerTriIxExc j k
        get $ lower_tri_mat buf j2 (inject k2)
      j' = inject(to=n, j)
      a = x[i,j'] - vdot row_i row_j
      if ordinal j == ordinal i
        then
          lower_tri_mat buf i j := sqrt a
        else
          b = get $ lower_tri_mat buf j' (refl_less j')
          lower_tri_mat buf i j := a / b

'## Permutations

-- The sign of the determinant of a permutation is either 1.0 or -1.0
PermutationSign = Float

-- TODO: use a struct once we can handle reference projections of struct fields
struct Permutation(n|Ix) =
  p    : n=>n
  sign : PermutationSign

def apply_permutation(perm:Permutation n, xs: n=>t) -> n=>t given (n|Ix, t) =
  for i. xs[perm.p[i]]

def identity_permutation() ->> Permutation n given (n|Ix) =
  Permutation(for i. i, 1.0)

def swap_in_place(perm: Ref h (Permutation n), i:n, j:n) -> {State h} () given (n|Ix, h) =
  tempj = get perm.p!j
  perm.p!j := get perm.p!i
  perm.p!i := tempj
  perm.sign := -(get perm.sign)

'## LU decomposition functions

def pivotize(a:n=>n=>Float) -> Permutation n given (n|Ix) =
  -- Gives a row permutation that makes Gaussian elimination more stable.
  yield_state identity_permutation \permRef.
    for j:n.
      row_with_largest = argmax for i:(j..). abs a[inject(to=n, i),j]
      if (ordinal j) /= (ordinal row_with_largest) then
        swap_in_place permRef j (inject(to=n, row_with_largest))

def lu(a: n=>n=>Float) -> (LowerTriMat n Float, UpperTriMat n Float, Permutation n) given (n|Ix) =
  -- Computes lower, upper, and permuntation matrices from a square matrix,
  -- such that apply_permutation permutation a == lower ** upper.
  permutation = pivotize a
  a = apply_permutation permutation a

  init_lower : LowerTriMat n Float = lower_tri_identity()
  init_upper = zero

  (lower, upper) = yield_state (init_lower, init_upper) \stateRef.
    lRef = fst_ref stateRef
    uRef = snd_ref stateRef

  -- For reference, here's code to compute the LU decomposition
  -- with standard flat matrices:
  --  for j:n.
  --    for i:(..j).
  --      i = inject _ i
  --      s = sum for k':(..i).
  --        k = inject _ k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      uRef!i!j := a.i.j - s

  --    for i':(j<..).
  --      i = inject _ i'
  --      s = sum for k':(..j).
  --        k = inject _ k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      lRef!i!j := (a.i.j - s) / (get uRef!j!j)
  --    for i:n. ()

    for j:n.
      for i:(..j).
        s = sum for k:(..i).
          MkUpperTriIx(k2, _)  = transpose_lower_ix i k
          MkUpperTriIx(k3, j3) = transpose_lower_ix j k2
          ukj = get $ upper_tri_mat uRef k3 j3
          MkLowerTriIx(i4, k4) = inject $ MkLowerTriIx i k
          lik = get $ lower_tri_mat lRef i4 k4
          ukj * lik

        MkUpperTriIx(i', j') = transpose_lower_ix j i
        upper_tri_mat uRef i' j' := a[inject i,j] - s

      for i:(j<..).
        s = sum for k:(..j).
          MkUpperTriIx(k2, j2) = transpose_lower_ix j k
          ukj = get $ upper_tri_mat uRef k2 j2
          MkLowerTriIxExc(i3, k3) = relax_ei i k
          lik = get $ lower_tri_mat lRef i3 $ inject k3
          ukj * lik

        ujj = get $ upper_tri_mat uRef j (refl_more j)
        MkLowerTriIxExc(i', j') = transpose_upper_ix_exc j i
        lower_tri_mat lRef i' (inject j') := (a[i',j] - s) / ujj
  (lower, upper, permutation)

'## General linear algebra functions

def solve(a:n=>n=>Float, b:n=>v) -> n=>v  given (n|Ix, v|VSpace) =
  -- There's a small speedup possible by exploiting the fact
  -- that l always has ones on the diagonal.  It would just require a
  -- custom forward_substitute routine that doesn't divide
  -- by the diagonal entries.
  (l, u, perm) = lu a
  b' = apply_permutation perm b
  y = forward_substitute l b'
  backward_substitute u y

def invert(a:n=>n=>Float) -> n=>n=>Float given (n|Ix) =
  solve a eye

def determinant(a:n=>n=>Float) -> Float given (n|Ix) =
  (l, u, perm) = lu a
  prod (for i. (upper_tri_diag u)[i] * (lower_tri_diag l)[i]) * perm.sign

def sign_and_log_determinant(a:n=>n=>Float) -> (Float, Float) given (n|Ix) =
  (l, u, perm) = lu a
  diags = for i. (upper_tri_diag u)[i] * (lower_tri_diag l)[i]
  sign = perm.sign * prod for i. sign diags[i]
  sum_of_log_abs = sum for i. log (abs diags[i])
  (sign, sum_of_log_abs)

def matrix_power(base:n=>n=>Float, power:Nat) -> n=>n=>Float given (n|Ix) =
  general_integer_power (**) eye base power

def trace(x:n=>n=>a) -> a given (n|Ix, a|Add) =
  sum for i. x[i,i]

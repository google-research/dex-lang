'# Vector Graphics

import png

Point : Type = (Float & Float)

data Geom =
  PointGeom
  Circle Float
  Rectangle Float Float  -- width, height
  Line Point
  Text String

HtmlColor : Type = Fin 3 => Word8

foreign "showHex" showHexFFI : Word8 -> {IO} (Word32 & RawPtr)

def showHex (x:Word8) : String = unsafe_io \().
  (n, ptr) = showHexFFI x
  string_from_char_ptr n (MkPtr ptr)

black : HtmlColor = [i_to_w8   0, i_to_w8   0, i_to_w8   0]
white : HtmlColor = [i_to_w8 255, i_to_w8 255, i_to_w8 255]
red   : HtmlColor = [i_to_w8 255, i_to_w8   0, i_to_w8   0]
green : HtmlColor = [i_to_w8   0, i_to_w8 255, i_to_w8   0]
blue  : HtmlColor = [i_to_w8   0, i_to_w8   0, i_to_w8 255]

GeomStyle : Type = {
    fillColor   : Maybe HtmlColor
  & strokeColor : Maybe HtmlColor
  & strokeWidth : Int }

default_geom_style : GeomStyle = {
    fillColor   = Nothing
  , strokeColor = Just black
  , strokeWidth = 1 }

-- TODO: consider sharing attributes among a set of objects for efficiency
data Diagram = MkDiagram (List (GeomStyle & Point & Geom))

instance Monoid Diagram
  mempty = MkDiagram mempty
  mcombine = \(MkDiagram d1) (MkDiagram d2). MkDiagram $ d1 <> d2

def concat_diagrams {n} (diagrams:n=>Diagram) : Diagram =
  MkDiagram $ concat for i.
    (MkDiagram d) = diagrams.i
    d

-- TODO: arbitrary affine transformations. Our current representation of
-- rectangles and circles means we can only do scale/flip/rotate90.
-- Should we use lenses/isomorphisms for these instead?
def apply_transformation
      (transformPoint: Point -> Point)
      (transformGeom:  Geom -> Geom)
      (d:Diagram) : Diagram =
  (MkDiagram (AsList _ objs)) = d
  MkDiagram $ to_list for i.
    (attr, p, geom) = objs.i
    (attr, transformPoint p, transformGeom geom)

flip_y : Diagram -> Diagram =
  apply_transformation (\(x,y). (x, -y)) \geom. case geom of
    PointGeom     -> PointGeom
    Circle r      -> Circle r
    Rectangle w h -> Rectangle w h
    Line (x, y)   -> Line (x, -y)
    Text x        -> Text x

def scale (s:Float) : (Diagram -> Diagram) =
  apply_transformation ( \(x,y). (s * x, s * y) ) \geom. case geom of
    PointGeom     -> PointGeom
    Circle r      -> Circle (s * r)
    Rectangle w h -> Rectangle (s * w) (s * h)
    Line (x, y)   -> Line (s * x, s * y)
    Text x        -> Text x

def move_xy ((offX, offY) : Point) : (Diagram -> Diagram) =
  apply_transformation (\(x,y). (x + offX, y + offY) ) id

def singleton_default (geom:Geom) : Diagram =
  MkDiagram $ to_list [(default_geom_style, (0.0, 0.0), geom)]

def point_diagram               : Diagram = singleton_default PointGeom
def circle (r:Float)           : Diagram = singleton_default $ Circle r
def rect   (w:Float) (h:Float) : Diagram = singleton_default $ Rectangle w h
def line   (p:Point)           : Diagram = singleton_default $ Line p
def text   (x:String)          : Diagram = singleton_default $ Text x

def update_geom (update: GeomStyle -> GeomStyle) (d:Diagram) : Diagram =
  (MkDiagram (AsList _ objs)) = d
  MkDiagram $ to_list for i.
    (attr       , geoms) = objs.i
    (update attr, geoms)

def set_fill_color   (c:HtmlColor) : Diagram -> Diagram = update_geom $ set_at #fillColor   (Just c)
def set_stroke_color (c:HtmlColor) : Diagram -> Diagram = update_geom $ set_at #strokeColor (Just c)
def set_stroke_width (w:Int)       : Diagram -> Diagram = update_geom $ set_at #strokeWidth w
def remove_stroke                 : Diagram -> Diagram = update_geom $ set_at #strokeColor Nothing
def remove_fill                   : Diagram -> Diagram = update_geom $ set_at #fillColor   Nothing

'## Serialization to SVG string

'Non-inlinable versions to improve compile times. (Non-inlined functions have to be monomorphic right now).

@noinline
def str_cat (xs:String) (ys:String) : String = xs <> ys

def (<.>) (xs:String) (ys:String) : String = str_cat xs ys

def quote (s:String) : String = "\"" <.> s <.> "\""

@noinline
def str_space_cat_uncurried ((s1,s2):(String & String)) : String =
  s1 <.> " " <.> s2

def (<+>) {a b} [Show a, Show b] (s1:a) (s2:b) : String =
  str_space_cat_uncurried ((show s1), (show s2))

def self_closing_brackets (s:String) : String = "<" <.> s <.> "/>"

def tag_brackets (tag:String) (s:String) : String =
  "<" <.> tag <.> ">" <.> s <.> "</" <.> tag <.> ">"

@noinline
def tag_brackets_attr_uncurried ((tag, attr, s):(String & String & String)) : String =
  "<" <.> tag <+> attr <.> ">" <.> s <.> "</" <.> tag <.> ">"

def tag_brackets_attr (tag:String) (attr:String) (s:String) : String =
  tag_brackets_attr_uncurried (tag, attr, s)

def (<=>) {b} [Show b] (attr:String) (val:b) : String =
  attr <.> "=" <.> quote (show val)

def html_color(cs:HtmlColor) : String =
  "#" <> (concat $ for i. showHex cs.i)

def optional_html_color(c: Maybe HtmlColor) : String =
  case c of
    Nothing -> "none"
    Just c' -> html_color c'

@noinline
def attr_string (attr:GeomStyle) : String =
  (   ("stroke"       <=> (optional_html_color $ get_at #strokeColor attr))
  <+> ("fill"         <=> (optional_html_color $ get_at #fillColor   attr))
  <+> ("stroke-width" <=> (get_at #strokeWidth attr)))

@noinline
def render_geom (attr:GeomStyle) ((x,y):Point) (geom:Geom) : String =
  -- For things that are solid. SVG says they have fill=stroke.
  solidAttr = set_at #fillColor (get_at #strokeColor attr) attr

  groupEle = \attr. tag_brackets_attr "g" (attr_string attr)
  case geom of
    PointGeom ->
      pointAttr = set_at #fillColor (get_at #strokeColor attr) attr
      groupEle solidAttr $ self_closing_brackets $
        ("circle" <+>
         "cx" <=> x <.>
         "cy" <=> y <.>
         "r=\"1\"")
    Circle r ->
      groupEle attr $ self_closing_brackets $
        ("circle" <+>
         "cx" <=> x <.>
         "cy" <=> y <.>
         "r"  <=> r)
    Rectangle w h ->
      groupEle attr $ self_closing_brackets $
        ("rect" <+>
         "width"  <=> w <.>
         "height" <=> h <.>
         "x"      <=> (x - (w/2.0)) <.>
         "y"      <=> (y - (h/2.0)))
    Text content ->
      textEle = tag_brackets_attr "text" $
        ("x" <=> x <.>
         "y" <=> y <.>
         "text-anchor" <=> "middle" <.>    -- horizontal center
         "dominant-baseline" <=> "middle"  -- vertical center
        )
      groupEle solidAttr $ textEle content

BoundingBox : Type = (Point & Point)

@noinline
def compute_bounds (d:Diagram) : BoundingBox =
  computeSubBound = \sel op (_, p, geom).
    sel p + case geom of
      PointGeom     -> 0.0
      Circle r      -> op r
      Rectangle w h -> op $ (sel (w,h))/2.0
      Line q        -> op $ max 0.0 $ op $ sel q  -- equivalent to either `-min(0, sel q)` or `max(0.0, sel q)` depending on op
      Text _        -> 0.0  -- no size info possible as it is scale invariant

  (MkDiagram (AsList _ objs)) = d
  (
    (
      minimum $ map (computeSubBound fst neg) objs,
      minimum $ map (computeSubBound snd neg) objs
    ),
    (
      maximum $ map (computeSubBound fst id)  objs,
      maximum $ map (computeSubBound snd id)  objs
    )
  )

@noinline
def render_svg (d:Diagram) (bounds:BoundingBox) : String =
  ((xmin, ymin), (xmax, ymax)) = bounds
  imgWidth = 400.0
  scaleFactor = imgWidth / (xmax - xmin)
  imgHeight = (ymax - ymin) * scaleFactor
  imgXMin   =  xmin * scaleFactor
  imgYMin   = -ymax * scaleFactor
  (MkDiagram (AsList _ objs)) = d |> flip_y |> scale scaleFactor
  svgAttrStr = (    "width"   <=> imgWidth
                <+> "height"  <=> imgHeight
                <+> "viewBox" <=> (imgXMin <+> imgYMin <+> imgWidth <+> imgHeight))
  tag_brackets_attr "svg" svgAttrStr $
    concat for i.
      (attr, pos, geom) = objs.i
      render_geom attr pos geom

render_scaled_svg = \d. render_svg d (compute_bounds d)

'## Derived convenience methods and combinators

move_x : Float -> Diagram -> Diagram = \x. move_xy (x, 0.0)
move_y : Float -> Diagram -> Diagram = \y. move_xy (0.0, y)

'## Demos

'A generic diagram

:html
  mydiagram : Diagram = (
     (circle 7.0 |> move_xy (20.0, 20.0)
       |> set_fill_color blue |> set_stroke_color red)
  <> (circle 5.0 |> move_xy (40.0, 41.0))
  <> (rect  10.0 20.0 |> move_xy (5.0, 10.0) |> set_stroke_color red)
  <> (text "DexLang"  |> move_xy (30.0, 10.0) |> set_stroke_color green)
  <> (point_diagram |> move_xy (15.0, 5.0) |> set_stroke_color red)
  )
  render_scaled_svg mydiagram
> <html output>

'Another diagram, showing things are all center aligned

:html
  concentric_diagram : Diagram = (
       (rect 2.0 2.0 |> set_fill_color red)
    <> (circle 1.0 |> set_fill_color blue)
    <> (text "DexLang" |> set_stroke_color white)
  ) |> move_xy (5.0, 5.0)
  render_scaled_svg concentric_diagram
> <html output>

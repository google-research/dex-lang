'# Complex number support

struct Complex =
  re: Float
  im: Float

instance HasAllClose(Complex)
  def allclose(atol, rtol, x, y) = allclose(atol.re, rtol.re, x.re, y.re) &&
                                   allclose(atol.im, rtol.im, x.im, y.im)

instance HasDefaultTolerance(Complex)
  default_atol = Complex(default_atol, default_atol)
  default_rtol = Complex(default_rtol, default_rtol)

instance Eq(Complex)
  def (==)(x, y) = x.re == y.re && x.im == y.im

instance Add(Complex)
  def (+)(x, y) = Complex(x.re + y.re, x.im + y.im)
  zero = Complex(0.0, 0.0)
instance Sub(Complex)
  def (-)(x, y) = Complex(x.re - y.re, x.im - y.im)

instance Mul(Complex)
  def (*)(x, y) = Complex( x.re * y.re - x.im * y.im
                             , x.re * y.im + x.im * y.re)
  one = Complex(1.0, 0.0)

instance VSpace(Complex)
  def (.*)(s, v) = Complex(s * v.re, s * v.im)

instance Arbitrary(Complex)
  def arb(key) = Complex(randn key, randn key)

-- Todo: Hook up to (/) operator.  Might require two-parameter VSpace.
def complex_division(x:Complex, y:Complex) -> Complex =
  (a, b, c, d) = (x.re, x.im, y.re, y.im)
  Complex((a * c + b * d) / (c * c + d * d), (b * c - a * d) / (c * c + d * d))

def complex_exp(x:Complex) -> Complex =
  expx = exp x.re
  Complex(expx * cos x.im, expx * sin x.im)

def complex_exp2(x:Complex) -> Complex =
  exp2x = exp2 x.re
  b = x.im * log 2.0
  Complex(exp2x * cos b, exp2x * sin b)

def complex_conj(x:Complex) -> Complex = Complex(x.re, -x.im)
def complex_abs(x:Complex) -> Float = x.re * x.re + x.im * x.im
def complex_mag(x:Complex) -> Float = sqrt (x.re * x.re + x.im * x.im)
def complex_arg(x:Complex) -> Float = atan2 x.im x.re

def complex_log(x:Complex) -> Complex = Complex(log (complex_mag x), complex_arg x)
def complex_log2(x:Complex) -> Complex = complex_log x / log 2.0
def complex_log10(x:Complex) -> Complex = complex_log x / log 10.0
def complex_pow(base:Complex, power:Complex) -> Complex = complex_exp(power * complex_log base)

def complex_sqrt(x:Complex) -> Complex =
  m = complex_mag x
  Complex (sqrt ((x.re + m) / 2.0)) (sign x.im * sqrt ((m - x.re) / 2.0))

def complex_sin( x:Complex) -> Complex = Complex(sin  x.re * cosh x.im, cos  x.re * sinh x.im)
def complex_sinh(x:Complex) -> Complex = Complex(sinh x.re *  cos x.im, cosh x.re * sin  x.im)
def complex_cos( x:Complex) -> Complex = Complex(cos  x.re * cosh x.im, -sin x.re * sinh x.im)
def complex_cosh(x:Complex) -> Complex = Complex(cosh x.re *  cos x.im, -sinh x.re * sin  x.im)
def complex_tan( x:Complex) -> Complex = complex_division(complex_sin  x, complex_cos x)
def complex_tanh(x:Complex) -> Complex =
  num = Complex(sinh x.re * cos x.im, cosh x.re * sin  x.im)
  den = Complex(cosh x.re * cos x.im, sinh x.re * sin  x.im)
  complex_division num den

instance Fractional(Complex)
  def divide(x, y) = complex_division(x, y)

def complex_floor(c:Complex) -> Complex =
  -- from "Complex Floor" by Eugene McDonnell
  -- https://www.jsoftware.com/papers/eem/complexfloor.htm
  fr = floor c.re
  fi = floor c.im
  x = c.re - fr
  y = c.im - fi
  case (x + y) < 1.0 of
    True -> Complex(fr, fi)
    False -> case x >= y of
      True  -> Complex(fr + 1.0, fi)
      False -> Complex(fr, fi + 1.0)

def complex_ceil(x:Complex)  -> Complex = -(complex_floor (-x))
def complex_round(x:Complex) -> Complex = complex_floor Complex(0.5, 0.0)

def complex_lgamma(x:Complex) -> Complex =
  todo  -- This one is pretty hairy.
        -- See https://cs.uwaterloo.ca/research/tr/1994/23/CS-94-23.pdf

def complex_erf(x:Complex) -> Complex =
  todo

def complex_erfc(x:Complex) -> Complex =
  todo

def complex_log1p(x:Complex) -> Complex =
  case x.re == 0.0 of
    True -> x
    False ->
      u = x + Complex(1.0, 0.0)
      case x.re <= -1.0 of
        True -> complex_log u
        False -> divide ((complex_log u) * x) x

instance Floating(Complex)
  def exp(x)    = complex_exp(x)
  def exp2(x)   = complex_exp2(x)
  def log(x)    = complex_log(x)
  def log2(x)   = complex_log2(x)
  def log10(x)  = complex_log10(x)
  def log1p(x)  = complex_log1p(x)
  def sin(x)    = complex_sin(x)
  def cos(x)    = complex_cos(x)
  def tan(x)    = complex_tan(x)
  def sinh(x)   = complex_sinh(x)
  def cosh(x)   = complex_cosh(x)
  def tanh(x)   = complex_tanh(x)
  def floor(x)  = complex_floor(x)
  def ceil(x)   = complex_ceil(x)
  def round(x)  = complex_round(x)
  def sqrt(x)   = complex_sqrt(x)
  def pow(x, y) = complex_pow(x, y)
  def lgamma(x) = complex_lgamma(x)
  def erf(x)    = complex_erf(x)
  def erfc(x)   = complex_erfc(x)

-- We definitely want to improve this in the future, but it's fine if we only care
-- about matrices that tile perfectly.
def tile2d
      (n : Type) ?-> (m : Type) ?-> (b : Type) ?-> (nl : Type) ?-> (ml : Type) ?->
      (fTile : Tile n nl -> Tile m ml -> nl=>ml=>b)
      (fScalar : n -> m -> b)
      : n=>m=>b =
  (tile
    (\nt:(Tile n nl).
      (tile1 (\mt:(Tile m ml). fTile nt mt)
             (\mi:m. for ni:nl. fScalar (nt +> ni) mi)))
    (\ni:n. for mi:m. fScalar ni mi))

def matmul
      (k : Type) ?-> (n : Type) ?-> (m : Type) ?->
      (a : n=>k=>Float) (b : k=>m=>Float)
      : n=>m=>Float =
  rowTile = Fin 5
  colVectors = Fin 2
  vectorTile = Fin VectorWidth
  colTile = (colVectors & vectorTile)
  (tile2d (\nt:(Tile n rowTile). \mt:(Tile m colTile).
             ct = snd $ with_accum \acc.
               for l:k.
                 for i:rowTile.
                   ail = broadcastVector a.(nt +> i).l
                   for j:colVectors.
                     acc!i!j += ail * loadTile (mt ++> j) b.l
             for i:rowTile. for (j, j'):colTile.
               indexVector ct.i.j j')
          (\i:n. \j:m. fsum \l. a.i.l * b.l.j))

--n = 50
--k = 200
--m = 80
--loops = 1

prng = new_key 0
a = for i:(Fin n). for j:(Fin k). rand $ ixkey prng (i, j)
b = for i:(Fin k). for j:(Fin m). rand $ ixkey prng (i, j)

-- ix being unknown prevents optimizations
ix = for _:Unit. 0
%time
for _:(Fin loops). (matmul a b).(ix.()@_).(ix.()@_)


-- TODO: Make a generic function for vectorization. Maybe put it in the prelude?
def add (n : Type) ?-> (a : n=>Float) (b : n=>Float) : n=>Float =
  (tile (\t:(Tile n (Fin 8 & Fin VectorWidth)).
          ct = for ti:(Fin 8). loadTile (t ++> ti) a + loadTile (t ++> ti) b
          for (i,j). indexVector ct.i j)
        (\i:n. a.i + b.i))


def poly (n : Type) ?-> (a : n=>Float) : n=>Float =
  def p (t : Type) ?-> (_ : VSpace t) ?=> (_ : Mul t) ?=> (x : t) : t =
    4.0 .* (x * x * x * x) + 3.0 .* (x * x * x) + 2.0 .* (x * x) + x
  (tile (\t:(Tile n (Fin 8 & Fin VectorWidth)).
          ct = for ti:(Fin 8). p $ loadTile (t ++> ti) a
          for (i,j). indexVector ct.i j)
        (\i:n. p a.i))

--n = 10000
--loops = 10000

a = for _:(Fin n). 1.0
b = for _:(Fin n). 1.0
d = for i:(Fin 1). 0

%time
e = for _:(Fin loops).
  (add a b).(UNSAFEFromOrdinal _ d.(UNSAFEFromOrdinal _ 0))

%time
f = for _:(Fin loops).
  (poly a).(UNSAFEFromOrdinal _ d.(UNSAFEFromOrdinal _ 0))

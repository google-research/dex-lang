def dist (x : d=>Float) (y : d=>Float) : Float =
  d = x - y
  sum $ for i. d.i * d.i

def centroidsOf (points : n=>d=>Float) (membership : n=>k) : k=>d=>Float =
  clusterSums = yieldAccum (AddMonoid Float) \clusterSums.
    for i. clusterSums!(membership.i) += points.i
  clusterSizes = yieldAccum (AddMonoid Float) \clusterSizes.
    for i. clusterSizes!(membership.i) += 1.0
  for i. clusterSums.i / (max clusterSizes.i 1.0)

def argminBy (_:Ord o) ?=> (f:a->o) (xs:n=>a) : n =
  minimum_by (\i. f xs.i) (for i. i)

def kmeans
      (points : n=>d=>Float)
      (k : Int)
      (threshold : Int)
      (maxIterations : Int)
      : (Fin k)=>d=>Float =
  initCentroids = for i:(Fin k). points.(ordinal i@_)
  initMembership = for c:n. ((ordinal c `mod` k)@_)
  final = yield_state (initMembership, initCentroids, 0) \ref.
    while do
      (membership, centroids, i) = get ref
      membership' = for i. argminBy (dist points.i) centroids
      centroids' = centroidsOf points membership'
      delta = sum $ for i. b_to_i $ membership.i /= membership'.i
      ref := (membership', centroids', i + 1)
      delta > threshold && i < maxIterations
  (_, centroids, _) = final
  centroids

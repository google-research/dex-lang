-- We definitely want to improve this in the future, but it's fine if we only care
-- about matrices that tile perfectly.
def tile2d (n : Type) ?-> (m : Type) ?-> (b : Type) ?-> (nl : Type) ?-> (ml : Type) ?->
           (fTile : Tile n nl -> Tile m ml -> nl=>ml=>b)
           (fScalar : n -> m -> b) : n=>m=>b =
  (tile
    (\nt:(Tile n nl).
      (tile1 (\mt:(Tile m ml). fTile nt mt)
             (\mi:m. for ni:nl. fScalar (nt +> ni) mi)))
    (\ni:n. for mi:m. fScalar ni mi))

def matmul (k : Type) ?-> (n : Type) ?-> (m : Type) ?->
           (a : n=>k=>Float) (b : k=>m=>Float) : n=>m=>Float =
  rowTile = Fin 3
  colVectors = Fin 3
  vectorTile = Fin VectorWidth
  colTile = (colVectors & vectorTile)
  (tile2d (\nt:(Tile n rowTile). \mt:(Tile m colTile).
             ct = snd $ withAccum \acc.
               for l:k.
                 for i:rowTile.
                   ail = broadcastVector a.(nt +> i).l
                   for j:colVectors.
                     acc!i!j += ail * loadTile (mt ++> j) b.l
             for i:rowTile. for (j, j'):colTile.
               indexVector ct.i.j j')
          (\i:n. \j:m. fsum \l. a.i.l * b.l.j))

a = for i:(Fin 5). for j:(Fin 8). IToF $ (iota _).(i,j)
b = for i:(Fin 8). for j:(Fin 15). IToF $ (iota _).(i,j)
c = matmul a b
c.(0@_)
> [ 2100.0
> , 2128.0
> , 2156.0
> , 2184.0
> , 2212.0
> , 2240.0
> , 2268.0
> , 2296.0
> , 2324.0
> , 2352.0
> , 2380.0
> , 2408.0
> , 2436.0
> , 2464.0
> , 2492.0 ]
c.(4@_)
> [ 15540.0
> , 15824.0
> , 16108.0
> , 16392.0
> , 16676.0
> , 16960.0
> , 17244.0
> , 17528.0
> , 17812.0
> , 18096.0
> , 18380.0
> , 18664.0
> , 18948.0
> , 19232.0
> , 19516.0 ]

:t \x. x
> Type error:Ambiguous type variables: [?_3]
>
> ([*ans*:? = (\x:?_5 . x)], (*ans* @> L ?))

:t \x. sum for i. x.i
> Type error:Ambiguous type variables: [?_10]
>
> ([*ans*:? = (\x:?_5 . ((sum @?_10) (for i:?_15 .  (x.i))))], (*ans* @> L ?))

:t \f x y. f y x
> Type error:Ambiguous type variables: [?_13, ?_17, ?_21]
>
> ([*ans*:? = (\f:?_5 . (\x:?_10 . (\y:?_15 . ((f y) x))))], (*ans* @> L ?))

:t \x. for i j. x.j.i
> Type error:Ambiguous type variables: [?_11, ?_14, ?_16]
>
> ( [*ans*:? = (\x:?_5 . (for i:?_9 .  (for j:?_13 .  ((x.j).i))))]
> , (*ans* @> L ?) )

:t \f x. f x
> Type error:Ambiguous type variables: [?_8, ?_12]
>
> ([*ans*:? = (\f:?_5 . (\x:?_10 . (f x)))], (*ans* @> L ?))

:t
   myid : a -> a
   myid x = x
   myid (myid) (myid 1)
> Int

:t
   x = (iota):(10=>Int)
   isum x
> Int

:t
   x = iota @ 10
   y = (iota):(3=>Int)
   real (isum for i. x.i) + real (isum for j. y.j)
> Real

:t
   x = iota @ 10
   y = (iota) : (3=>Int)
   sum for i. iadd x.i y.i
> Type error:
> Expected: 3
>   Actual: 10
> In: i
>
>    sum for i. iadd x.i y.i
>                          ^

type Narr = 10

arr = iota @ Narr

xr = map real arr

:t arr
> (10=>Int)

:t (\(x, y). x + y) (1.0, 2.0)
> Real

:t
   f (x, y) = x + 2.0 * y
   z.i = (xr.i, xr.i * xr.i)
   sum (for i. f z.i)
> Real

-- yields 'compiler bug'. Should be a different sort of error
-- :t unpack x = iota 3
--    in let y = for i j. x.i * x.i
--       in sum (for i. sum (y.i))
:t (1) : Int
> Int

:t (1.0) : Int
> Type error:
> Expected: Int
>   Actual: Real
> In: 1.0
>
> :t (1.0) : Int
>     ^^^

:t [1, 2, 3]
> (3=>Int)

:t []
> Type error:Ambiguous type variables: [?_2]
>
> ([*ans*:? = ([])], (*ans* @> L ?))

:t [1, [2]]
> Type error:
> Expected: Int
>   Actual: (1=>Int)
> In: ([2])
>
> :t [1, [2]]
>        ^^^

:t [[1, 2], [3, 4]]
> (2=>(2=>Int))

:t [[1, 2], [3]]
> Type error:
> Expected: (2=>Int)
>   Actual: (1=>Int)
> In: ([3])
>
> :t [[1, 2], [3]]
>             ^^^

type Pair = (Int, Int)

p1 : Pair
p1 = (1, 2)

p2 : Pair
p2 = 1
> Type error:
> Expected: (Int, Int)
>   Actual: Int
> In: 1
>
> p2 = 1
>      ^

:t \x. for (i,j). x.i.j
> Type error:Ambiguous type variables: [?_7, ?_11, ?_13]
>
> ([*ans*:? = (\x:?_5 . (for (i:?_9, j:?_10) .  ((x.i).j)))], (*ans* @> L ?))

idfun : a -> a
idfun x = x

:t idfun @ Real
> (Real -> Real)

:t \x.
     f : a -> a
     f y = x
     ()
> Type error:Leaked type variable: a
>
> :t \x.
>    ^^^^

-- :t (todo):(Int -> Real) 1
-- > Real

f : Int -> Real
f x =
  z = x + 1.0
  x
> Type error:
> Expected: Real
>   Actual: Int
> In: x
>
>   z = x + 1.0
>       ^^
:t
   x = 3
   for i:Foo. 0
> Error: variable not in scope: Foo

:p \x:Real. x
> (\x:Real .
>    x)

vspaceid : A a | VS a . a -> a
vspaceid x = x

:t vspaceid (1.0, [2.0, 3.0])
> (Real, (2=>Real))

:t vspaceid 0
> Type error: Not a vector space: Int
>
> :t vspaceid 0
>    ^^^^^^^^^

:t
   g : A a | VS a . a -> a
   g x = vspaceid x
   g @Real
> (Real -> Real)

:t
   g : a -> a
   g x = vspaceid x
   g @Real
> Type error: Type variable "a" not in class: VS
>
>    g x = vspaceid x
>          ^^^^^^^^^

:t for i:Int. 1
> Type error: Not a valid index set: Int
>
> :t for i:Int. 1
>    ^^^^^^^^^^^^

:t grad (\x:Int. real x) 1
> Type error: Not a vector space: Int
>
> :t grad (\x:Int. real x) 1
>    ^^^^^

:t
   vadd' : a -> a -> a
   vadd' x y = %vadd(x, y)

   vadd' @Real
> Type error: Type variable "a" not in class: VS
>
>    vadd' x y = %vadd(x, y)
>                ^^^^^^^^^^^

f1 : Real -> Real
f1 x = x

f2 : Real -> Real
f2 x = x + x

:t [f1, f2]
> Type error: Not serializable data: (Real -> Real)
>
> :t [f1, f2]
>    ^^^^^^^^

:t select True f1 f2
> Type error: Not serializable data: (Real -> Real)
>
> :t select True f1 f2
>    ^^^^^^^

:t fold f1 \i:3 g. (\x. g (g x))
> Type error: Not serializable data: (Real -> Real)
>
> :t fold f1 \i:3 g. (\x. g (g x))
>    ^^^^^

:t [1,2,3].(3@4)
> Type error:
> Expected: 3
>   Actual: 4
> In: 3@4
>
> :t [1,2,3].(3@4)
>             ^^^

type MyInt = Int
type MyInt2 = MyInt

x : MyInt2
x = 1

type MyPair a = (a, a)

:p
  pairs : (MyPair Int, MyPair Real)
  pairs = ((1, 2), (1.0, 2.0))
  --
  pairs
> ((1, 2), (1.0, 2.0))

fEff : () -> {| a} a
fEff = todo
> Kind error:
> Expected: Type
>   Actual: Effect

fAmb : A a. ()
fAmb = ()
> Kind error:Ambiguous kind for type variable: a:NoKindAnn

:p
  fEff2 : () -> {|eff} ()
  fEff2 = todo
  fEff2 @Int ()
> Kind error:
> Expected: Effect
>   Actual: Type
>
>   fEff2 @Int ()
>   ^^^^^^^^^^^

:p
    for i:7. sum for j:(Range 0 unboundName). 1.0
> Error: variable not in scope: unboundName

:p
    x = "123"
    for i:7. sum for j:(Range 0 x). 1.0
> Kind error:
> Expected: Int
>   Actual: Str
>
>     for i:7. sum for j:(Range 0 x). 1.0
>              ^^^^

:t lam x. x
> Type error:Ambiguous type variables: [?_2]
>
> ((?_2 -> ?_2), (lam x::?_2 . x))

:t lam x. sum for i. x.i
> Type error:Ambiguous type variables: [?_11]
>
> ( ((?_11=>Real) -> Real)
> , (lam x::(?_11=>Real) .
>    (sum @?_11 (for  i::?_11 .
>        x.i))) )

:t lam f x y. f y x
> Type error:Ambiguous type variables: [?_6, ?_9, ?_11]
>
> ( ((?_9 -> (?_11 -> ?_6)) -> (?_11 -> (?_9 -> ?_6)))
> , (lam f::(?_9 -> (?_11 -> ?_6)) . (lam x::?_11 . (lam y::?_9 . ((f y) x)))) )

:t lam x. for i j. x.j.i
> Type error:Ambiguous type variables: [?_7, ?_11, ?_13]
>
> ( ((?_11=>(?_13=>?_7)) -> (?_13=>(?_11=>?_7)))
> , (lam x::(?_11=>(?_13=>?_7)) .
>    (for  i::?_13 .
>        (for  j::?_11 .
>            x.j.i))) )

:t lam f x. f x
> Type error:Ambiguous type variables: [?_4, ?_6]
>
> (((?_6 -> ?_4) -> (?_6 -> ?_4)), (lam f::(?_6 -> ?_4) . (lam x::?_6 . (f x))))

:t myid :: a -> a
   myid x = x
   myid (myid) (myid 1)
> Int

:t _, N = unpack range 10
   x = (iota)::(N=>Int)
   isum x
> Int

:t _, Nx = unpack range 10
   _, Ny = unpack range 3
   x = iota @ Nx
   y = (iota)::(Ny=>Int)
   real (isum for i. x.i) + real (isum for j. y.j)
> Real

:t _, Nx = unpack range 10
   _, Ny = unpack range 3
   x = iota @ Nx
   y = (iota) :: (Ny=>Int)
   sum for i. iadd x.i y.i
> Type error:
> Expected: Ny
>   Actual: Nx
> In: i
>
>    sum for i. iadd x.i y.i
>                          ^

:t _, Nx = unpack range 10
   (iota)::(Nx=>Int)
> Type error:
> Leaked type variable: Nx

_, Narr = unpack range 10

arr = iota @ Narr

xr = map real arr

:t arr
> (Narr=>Int)

:t (lam (x, y). x + y) (1.0, 2.0)
> Real

:t f (x, y) = x + 2.0 * y
   z.i = (xr.i, xr.i * xr.i)
   sum (for i. f z.i)
> Real

-- yields 'compiler bug'. Should be a different sort of error
-- :t unpack x = iota 3
--    in let y = for i j. x.i * x.i
--       in sum (for i. sum (y.i))
:t (1) :: Int
> Int

:t (1.0) :: Int
> Type error:
> Expected: Int
>   Actual: Real
> In: 1.0
>
> :t (1.0) :: Int
>     ^^^

:t [1, 2, 3]
> (3=>Int)

:t []
> Type error:Ambiguous type variables: [?_2]
>
> ((0=>?_2), [])

:t [1, [2]]
> Type error:
> Expected: Int
>   Actual: (?_3=>?_4)
> In: [2]
>
> :t [1, [2]]
>        ^^^

:t [[1, 2], [3, 4]]
> (2=>(2=>Int))

:t [[1, 2], [3]]
> Type error:
> Expected: (2=>Int)
>   Actual: (1=>Int)
> In: [3]
>
> :t [[1, 2], [3]]
>             ^^^

type Pair = (Int, Int)

p1 :: Pair
p1 = (1, 2)

p2 :: Pair
p2 = 1
> Type error:
> Expected: (Int, Int)
>   Actual: Int
> In: 1
>
> p2 = 1
>      ^

:t lam x. for (i,j). x.i.j
> Type error:Ambiguous type variables: [?_4, ?_9, ?_11]
>
> ( ((?_9=>(?_11=>?_4)) -> ((?_9, ?_11)=>?_4))
> , (lam x::(?_9=>(?_11=>?_4)) .
>    (for  (i::?_9, j::?_11) .
>        x.i.j)) )

_, M = unpack range 5


:t for i::M. _, N = unpack range (asint i)
             x = for j::N. asint j
             pack x, N, E n. n=>Int
> (M=>(Ea.(a=>Int)))

idfun :: a -> a
idfun x = x

:t idfun @ Real
> (Real -> Real)

:t lam x. f :: a -> a; f y = x; ()
> Type error:
> Leaked type variable: a

:t (todo)::(Int -> Real) 1
> Real

f :: Int -> Real
f x =
  z = x + 1.0
  x
> Type error:
> Expected: Real
>   Actual: Int
> In: x
>
>   z = x + 1.0
>       ^^
:t x = 3
   for i::x. 0
> Error: variable not in scope: type variable "x" (a term variable of the same name is in scope)

:p lam x::Real. x
> Type error: Can't print values of type: (Real -> Real)

vspaceid :: A a::VS. a -> a
vspaceid x = x

:t vspaceid (1.0, [2.0, 3.0])
> (Real, (2=>Real))

:t vspaceid 0
> Type error: Not a vector space: Int
>
> :t vspaceid 0
>    ^^^^^^^^^

:t ..
  g :: A a::VS. a -> a
  g x = vspaceid x
  g @Real
> (Real -> Real)

:t ..
  g :: a -> a
  g x = vspaceid x
  g @Real
> Type error: Type variable "a" not in class: VS
>
>   g x = vspaceid x
>         ^^^^^^^^^

:t for i::Int. 1
> Type error: Not a valid index set: Int
>
> :t for i::Int. 1
>    ^^^^^^^^^^^^^

:t grad (lam x::Int. real x) 1
> Type error: Not a vector space: Int
>
> :t grad (lam x::Int. real x) 1
>    ^^^^^

:t vadd' :: a -> a -> a
         vadd' x y = %vadd(x, y)
         vadd' @Real
> Type error: Type variable "a" not in class: VS
>
>          vadd' x y = %vadd(x, y)
>                      ^^^^^^^^^^^

f1 :: Real -> Real
f1 x = x

f2 :: Real -> Real
f2 x = x + x

:t [f1, f2]
> Type error: Not serializable data: (Real -> Real)
>
> :t [f1, f2]
>    ^^^^^^^^

:t select True f1 f2
> Type error: Not serializable data: (Real -> Real)
>
> :t select True f1 f2
>    ^^^^^^^

:t fold f1 for i::3. lam g. (lam x. g (g x))
> Type error: Not serializable data: (Real -> Real)
>
> :t fold f1 for i::3. lam g. (lam x. g (g x))
>    ^^^^^

:t [1,2,3].(3@3)
> Type error:Index out of bounds: 3 of 3

:t [1,2,3].(3@4)
> Type error:
> Expected: 3
>   Actual: 4
> In: 3@4
>
> :t [1,2,3].(3@4)
>             ^^^


'TODO: improve these "ambiguous type" error messages. The problem is that they
expose the core IR to show where the ambiguous types appear. We might be able to
improve things by recording source information when we create fresh inference
variables. Solving fully (insisting on no ambiguity) at each decl might also
help make the errors more local.

-- :t \x. x
-- > Type error:Ambiguous type variables: [?]
-- >
-- > ((_ans_ @> _ans_), [_ans_:(?->?) = \x:?. x])

-- :t \x. sum for i. x.i
-- > Type error:Ambiguous type variables: [?3]
-- >
-- > ( (_ans_ @> _ans_)
-- > , [ _ans_:((?3=>Real)->Real) = \x:(?3=>Real).
-- >   tmp:((?3=>Real)->Real) = (sum) (?3)
-- >   tmp1:(?3=>Real) = for \i:?3. (x) (i)
-- >   (tmp) (tmp1) ] )

-- :t \f x y. f y x
-- > Type error:Ambiguous type variables: [?3, ?6, ?7]
-- >
-- > ( (_ans_ @> _ans_)
-- > , [ _ans_:((?3->(?6->?7))->(?6->(?3->?7))) = \f:(?3->(?6->?7)). \x:?6. \y:?3.
-- >   tmp:(?6->?7) = (f) (y)
-- >   (tmp) (x) ] )

-- :t \x. for i j. x.j.i
-- > Type error:Ambiguous type variables: [?3, ?6, ?7]
-- >
-- > ( (_ans_ @> _ans_)
-- > , [ _ans_:((?3=>(?6=>?7))->(?6=>(?3=>?7))) = \x:(?3=>(?6=>?7)). for \i:?6. for \j:?3.
-- >   tmp1:(?6=>?7) = (x) (j)
-- >   (tmp1) (i) ] )

-- :t \f x. f x
-- > Type error:Ambiguous type variables: [?2, ?3]
-- >
-- > ((_ans_ @> _ans_), [_ans_:((?2->?3)->(?2->?3)) = \f:(?2->?3). \x:?2. (f) (x)])

-- :t \x. for (i,j). x.i.j
-- > Type error:Ambiguous type variables: [?4, ?7, ?8]
-- >
-- > ( (_ans_ @> _ans_)
-- > , [ _ans_:((?4=>(?7=>?8))->((?4 & ?7)=>?8)) = \x:(?4=>(?7=>?8)). for \pat:(?4 & ?7).
-- >   tmp1:?4 = %fst pat
-- >   tmp2:?7 = %snd pat
-- >   tmp3:(?7=>?8) = (x) (tmp1)
-- >   (tmp3) (tmp2) ] )

:t
   myid : a:Type ?-> a -> a = \x. x
   myid (myid) (myid 1)
> Int

:t
   x = iota (Fin 10)
   isum x
> Int

:t
   x = iota (Fin 10)
   y = iota (Fin 3)
   i2r (isum for i. x.i) + i2r (isum for j. y.j)
> Real

:t
   x = iota (Fin 10)
   y = iota (Fin 3)
   sum for i. x.i + y.i
> Type error:
> Expected: (Fin 3)
>   Actual: (Fin 10)
>
>    sum for i. x.i + y.i
>                       ^

Narr = Fin 10

arr  = iota Narr

xr = map i2r arr

:t arr
> ((Fin 10)=>Int)

:t (\(x, y). x + y) (1.0, 2.0)
> Real

:t
   f = \(x, y). x + 2.0 * y
   z = for i. (xr.i, xr.i * xr.i)
   sum (for i. f z.i)
> Real

:t [1, 2, 3]
> ((Fin 3)=>Int)

:t []
> Type error:Empty table constructor must have type annotation
>
> :t []
>    ^^

:t [1, [2]]
> Type error:
> Expected: Int
>   Actual: ((Fin 1)=>Int)
>
> :t [1, [2]]
>        ^^^

:t [[1, 2], [3, 4]]
> ((Fin 2)=>((Fin 2)=>Int))

:t [[1, 2], [3]]
> Type error:
> Expected: ((Fin 2)=>Int)
>   Actual: ((Fin 1)=>Int)
>
> :t [[1, 2], [3]]
>             ^^^

f : Int -> Real =
 \x.
   z = x + 1.0
   x
> Type error:
> Expected: Int
>   Actual: Real
>
>    z = x + 1.0
>            ^^^

:t
   x = 3
   for i:Foo. 0
> Error: variable not in scope: Foo
>
>    for i:Foo. 0
>          ^^^


MyInt = Int
MyInt2 = MyInt

x : MyInt2 = 1

MyPair : Type -> Type =
  \a. (a & a)

:p
  pairs : (MyPair Int & MyPair Real) =
    ((1, 2), (1.0, 2.0))

  pairs
> ((1, 2), (1.0, 2.0))


-- TODO: put source annotation on effect for a better message here
fEff : Unit -> {| a} a = todo
> Type error:
> Expected: EffKind
>   Actual: Type
>
> fEff : Unit -> {| a} a = todo
>             ^^^^^^^^^

:p
    for i:(Fin 7). sum for j:(Fin unboundName). 1.0
> Error: variable not in scope: unboundName
>
>     for i:(Fin 7). sum for j:(Fin unboundName). 1.0
>                                   ^^^^^^^^^^^

-- differentCaseResultTypes : Either Int Real -> Real
-- differentCaseResultTypes x = case x
--   Left f -> f
--   Right i -> i
-- > Type error:
-- > Expected: Int
-- >   Actual: Real
-- > In: i
-- >
-- >   Right i -> i
-- >              ^

-- inferEither x = case x
--     Left i -> i + 1
--     Right f -> floor f

-- caseEffects : wRef:(Ref Real) -> (Either Int Real) -> {Writer wRef} ()
-- caseEffects ref x = case x
--     Left  i -> ()
--     Right r -> ref := r
-- > Type error:
-- > Expected: { }
-- >   Actual: {State ref | ?_28}
-- > In: (ref := r)
-- >
-- >     Right r -> ref := r
-- >                    ^^^

-- :p (\(u,v). for i:0...u. 1.0) (2, 3)
-- > Type error:Function's result type cannot depend on a variable bound in an argument pattern
-- >
-- > :p (\(u,v). for i:0...u. 1.0) (2, 3)
-- >     ^^^^^^^^^^^^^^^^^^^^^^^^

g : a -> a = \x. x

:t g
> (a:Type?->(a->a))

:t
  f = \x:Int. x
  f 1
> Int

:t
   f = \x:Real. x
   f 1
> Type error:
> Expected: Real
>   Actual: Int
>
>    f 1
>      ^

g1 : (a -> Int) -> (a -> Int) = \x. x

:t g1
> (a:Type?->((a->Int)->(a->Int)))

g2 : a -> a = \x. idiv x x
> Type error:
> Expected: Int
>   Actual: a
>
> g2 : a -> a = \x. idiv x x
>                        ^^

h : (a -> b) -> (a -> b) = \x. x

:t h
> (a:Type?->(a1:Type?->((a->a1)->(a->a1))))

fun : a -> a = \x. sin x
> Type error:
> Expected: Real
>   Actual: a
>
> fun : a -> a = \x. sin x
>                        ^

@newtype
NewPair : Type -> Type -> Type = \a b. (a & b)

mkNewPair   : (a & b) -> NewPair a b = unsafeNewtypeCon
fromNewPair : NewPair a b -> (a & b) = unsafeFromNewtypeCon

newPair : NewPair Int Real = mkNewPair (1, 2.0)

:p fst newPair
> Type error:
> Expected: (a & b)
>   Actual: NewPair Int Real
> (Solving for: [a:Type, b:Type])
>
> :p fst newPair
>        ^^^^^^^

:p fst $ fromNewPair newPair
> 1

:p NewPair
> NewPair

:p NewPair Int
> NewPair Int

:p NewPair Int Real
> NewPair Int Real

NewPairIntReal = NewPair Int Real

:p NewPairIntReal
> NewPair Int Real

newPair2 : NewPairIntReal = mkNewPair (1, 2.0)

:p fst $ fromNewPair newPair
> 1


good_range : Type = (1@Fin 3)..(2@_)

bad_range : Int = (1@Fin 3)..(2@_)
> Type error:
> Expected: Int
>   Actual: Type
>
> bad_range : Int = (1@Fin 3)..(2@_)
>                            ^^

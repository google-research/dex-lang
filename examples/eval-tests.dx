:p 1.0 + 2.0
> 3.0

:p
   double = \x. x * 2.0
   double 10.0
> 20.0

:p sum (iota (Fin 10))
> 45

:p
   x = iota (Fin 10)
   sum (for i. x.i)
> 45

:p
   x = iota (Fin 3)
   prod (for i. x.i + 1)
> 6

:p
   vdot' : n:Type ?-> n=>Float -> n=>Float -> Float =
     \x y. sum (for i. x.i * y.i * 2.0)
   x = iota (Fin 3)
   y = map IToF x
   vdot' y y
> 10.0

:p
   x = iota $ Fin 3
   y = iota $ Fin 4
   z = for i j. IToF x.i * IToF y.j
   sum (for i. sum z.i)
> 18.0

-- :p randint (hash 0 0) 10
-- :p let x = unpack range 10000
--        key = hash 0
--    in sum (for i: randint (key x.i) 10)
NArr = Fin 7

arr = iota NArr

:p for i:NArr. (iota _).i + (iota _).i
> [0, 2, 4, 6, 8, 10, 12]

:p sum for i:NArr. 1
> 7

fun = \y. sum (map IToF arr) + y

:p fun 3.0
> 24.0

:p arr
> [0, 1, 2, 3, 4, 5, 6]

:p fold 0 \i. (+) arr.i
> 21

:p 6.0 - 10.0
> -4.0

:p (\(x, y). x + y) (1.0, 2.0)
> 3.0

:p
   f : a:Type ?-> b:Type ?-> (a -> b & a) -> b =
     \(x, y). x y
   f (\x. x, 1)
> 1

:p
   (x,y) = ((1.0,2.0),3.0)
   (x1, x2) = x
   x1 + x2 + y
> 6.0

:p
   x = (1.0,2.0)
   (y,z) = x
   y + z
> 3.0

-- :p let f (x, y) = x + 2 * y;
--        z.i = (x.i, x.i * x.i)
--    in sum (for i. f z.i)
:p exp 1.0
> 2.7182817

:p exp2 3.0
> 8.0

:p log 1.0
> 0.0

:p log2 8.0
> 3.0

:p log10 100.0
> 2.0

:p sqrt 2.0
> 1.4142135

:p sin 3.14159
> 2.5351817e-6

:p cos 0.0
> 1.0

:p tan 1.57079
> 159378.27

:p FToI $ floor 3.6
> 3

:p FToI $ ceil 3.6
> 4

:p FToI $ round 3.6
> 4

s = 1.0

:p s
> 1.0

:p [2, 4, 8]
> [2, 4, 8]

:p
   xs = [2,1,0]
   for i. xs.i + 10
> [12, 11, 10]

cumsumplus : n=>Float -> n=>Float =
 \xs. snd $ scan 0.0 \i c.
   ans = c + xs.i
   (ans, 1.0 + ans)

:p cumsumplus [1.0, 2.0, 3.0]
> [2.0, 4.0, 7.0]

:p [False, False, True]
> [False, False, True]

:p [False, True, True, False]  -- testing again because it's been flaky
> [False, True, True, False]

:p (True, False)
> (True, False)

:p 1.0 > 2.0
> False

:p 1.0 > neg 2.0
> True

:p 1.0 < 2.0
> True

:p BToI (1.0 < 2.0)
> 1

:p [ 1 < 2, 1.0 < 2.0,  2 < 2, 2.0 < 2.0, 2 < 1, 2.0 < 1.0]
> [True, True, False, False, False, False]

:p [ 1 > 2, 1.0 > 2.0,  2 > 2, 2.0 > 2.0, 2 > 1, 2.0 > 1.0]
> [False, False, False, False, True, True]

:p [ 1 <= 2, 1.0 <= 2.0,  2 <= 2, 2.0 <= 2.0, 2 < 1, 2.0 < 1.0]
> [True, True, True, True, False, False]

:p [ 1 >= 2, 1.0 >= 2.0,  2 >= 2, 2.0 >= 2.0, 2 >= 1, 2.0 >= 1.0]
> [False, False, True, True, True, True]

infty = 1./0.
:p infty
> Infinity

nan = 0./0.
:p nan
> NaN

:p [ 0. < infty, 0. < nan, infty < 0., nan < 0., nan < nan, infty < infty ]
> [True, False, False, False, False, False]

N3 = Fin 3
N4 = Fin 4

mat = for i:N3 j:N4. (iota _).i + (10 * (iota _).j)

-- :p sum for (i,j). mat.i.j
-- > 192

litArr = [10, 5, 3]

:p mod 5 3
> 2

:p size (Fin 3)
> 3

:p for i:(Fin 3). 1
> [1, 1, 1]

:p
   (k, _) = (1 + 2, 3)
   for i:(Fin 6). k + ordinal i
> [3, 4, 5, 6, 7, 8]

:p
   k = newKey 0
   mean for i:(Fin 100). randn (ixkey k i)
> -0.1157995

:p
   k = newKey 0
   mean for i:(Fin 100). sq $ randn (ixkey k i)
> 1.2581898

:p for i:(Fin 3) j:(Fin 2). rand $ ixkey2 (newKey 11) i j
> [[0.47415292, 0.9145164], [0.7944602, 0.27679908], [0.58958626, 0.7116251]]

:p
  x = for i:(Fin 3). 0
  x
> [0, 0, 0]

:p
   x = for i:(Fin 3). for j:(Fin 4). 0
   x
> [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

:p fold (for i:(Fin 3). 0.0) $ \i:(Fin 2) c. (for j. c.j + IToF (ordinal j))
> [0.0, 2.0, 4.0]

:p
   mat2 = for i:(Fin 4) j:(Fin 4) . ordinal i
   tmp = for i. mat2.i.i
   tmp
> [0, 1, 2, 3]

:p
  x = [[0, 1], [2, 3]]
  xt = for i j. x.j.i
  xt
> [[0, 2], [1, 3]]

:p
  (x, y) = (1, (2,3))
  (x, y)
> (1, (2, 3))

:p for i:(Fin 3). i
> [0@(Fin 3), 1@(Fin 3), 2@(Fin 3)]

:p for i:(Fin 3). i
> [0@(Fin 3), 1@(Fin 3), 2@(Fin 3)]

:p fromOrdinal (Fin 1) 0
> 0@(Fin 1)

:p 0@(Fin 1)
> 0@(Fin 1)

:p [1, 2, 3].(0@_)
> 1

:p [0].([asidx 0].(asidx 0))
> 0

:p select True 1 2
> 1

:p select False 1.0 2.0
> 2.0

:p select True [1,2,3] [10,20,30]
> [1, 2, 3]

:p select False [1,2,3] [10,20,30]
> [10, 20, 30]

:p [(1, (for i:(Fin 2) . 3))].(fromOrdinal _ 0)
> (1, [3, 3])

:p (False && False, False && True, True && False, True && True)
> (False, (False, (False, True)))

:p (not False, not True)
> (True, False)

:p (False || False, False || True, True || False, True || True)
> (False, (True, (True, True)))

:p [(for i:(Fin 1). (False, for j:(Fin 2). 1.0)), [(True, for k:(Fin 2) . 2.0)]]
> [[(False, [1.0, 1.0])], [(True, [2.0, 2.0])]]

-- TODO: parse negative integer literals
-- :p (mod 5 3, mod 7 3, mod (-1) 3, mod -5 3)
-- > (2, 1, 2, 1)

:p [[1,2], for i. 3]
> [[1, 2], [3, 3]]

:p select False [1, 2] (for i. 3)
> [3, 3]

:p fold [1, 2] \i:(Fin 3) c. for j. 4
> [4, 4]

:p select True (1,2) (2,3)
> (1, 2)

:p select False (1,[2,3]) (4, for _ . 3)
> (4, [3, 3])

:p select False () ()
> ()

:p [1,2,3].(fromOrdinal (Fin 3) 1 )
> 2

:p fold (1.0, 2.0) \i:(Fin 2) (x, y). (y, x)
> (1.0, 2.0)

:p fold (1.0, 2.0) \i:(Fin 3) (x, y). (y, x)
> (2.0, 1.0)

:p id 2
> 2
:p min 2.0 3.0
> 2.0

:p minBy sq 0.5 (-2.0)
> 0.5

:p minimum [2.0, 3.0, 4.0, 1.5, 7.0]
> 1.5

:p minimumBy fst [(2.0, 20), (1.5, 15), (10.0, 100)]
> (1.5, 15)

:p max 2.0 3.0
> 3.0

:p maxBy sq 0.5 (-2.0)
> -2.0

:p maximum [2.0, 4.0, 1.5, 7.0]
> 7.0

:p maximumBy fst [(2.0, 20), (1.5, 15), (10.0, 100)]
> (10.0, 100)

:p (1 == 2, (-1) == (-1), 1 < 2, -1 < 2, 2 < (-1))
> (False, (True, (True, (True, False))))

:p (1. == 2., (-1.) == (-1.), 1. < 2., (-1.) < 2., 2. < (-1.))
> (False, (True, (True, (True, False))))

:p for i:(Fin 7). select (i < (fromOrdinal _ 3)) 1 2
> [1, 1, 1, 2, 2, 2, 2]

σ = 1.0 + 2.0

:p σ
> 3.0

δ : Int -> Int = \x. x

:p δ 3
> 3

:p select True 1 2
> 1

:p select True [1,2] [2,3]
> [1, 2]

:p select True (1,2) (2,3)
> (1, 2)

:p
  x = 1; x == x
> True

:p 1 + 2
> 3

:p slice [1,2,3,4,5] 2 (Fin 3)
> [3, 4, 5]

-- TODO: test file specifically for parse errors (including testing error messages)
:p
   f : Float->Float = \x.
     -- line comment should be ok here
     2.0 * x
   f 1.0
> 2.0

-- Not sure why the ordinary `sum/for` version doesn't work anymore
:p
    n = 3 + 7
    fsum \i:(Fin n). 1.0
> 10.0

:p
    n = 4
    fsum \i:(Fin n). 1.0
> 4.0

:p
  one = fromOrdinal (Fin 4) 1
  for i:(Fin 4). sum for j:(one..i). 1.0
> [0.0, 1.0, 2.0, 3.0]

:p
  one = fromOrdinal (Fin 4) 1
  for i:(Fin 4). sum for j:(one<..i). 1.0
> [0.0, 0.0, 1.0, 2.0]

:p
  one = fromOrdinal (Fin 4) 1
  for i:(Fin 4). sum for j:(one<..i). 1.0
> [0.0, 0.0, 1.0, 2.0]

:p
  one = fromOrdinal (Fin 4) 1
  for i:(Fin 4). sum for j:(one..<i). 1.0
> [0.0, 0.0, 1.0, 2.0]

:p
  one = fromOrdinal (Fin 4) 1
  for i:(Fin 4). sum for j:(one<..<i). 1.0
> [0.0, 0.0, 0.0, 1.0]

:p
  for i:(Fin 4). sum for j:(..i). 1.0
> [1.0, 2.0, 3.0, 4.0]

:p
  for i:(Fin 4). sum for j:(..<i). 1.0
> [0.0, 1.0, 2.0, 3.0]

:p
  for i:(Fin 4). sum for j:(i..). 1.0
> [4.0, 3.0, 2.0, 1.0]

:p
  for i:(Fin 4). sum for j:(i<..). 1.0
> [3.0, 2.0, 1.0, 0.0]

:p idiv 10 3
> 3

:p rem 10 3
> 1

:p
  xs = [10.,20.]
  ys = [1.,2.,3.]
  xys = for (i,j). xs.i + ys.j
  sum xys
> 102.0

:p
  xs = [10.,20.]
  ys = [1.,2.,3.]
  zs = [1.]
  xys = for (i,(j,k)). xs.i + ys.j + zs.k
  sum xys
> 108.0

:p
  xs = [[1,2],[3,4]]
  ys = for (i,j). xs.i.j
  zs = for (i,j). ys.(i,j)
  for i j. zs.(j,i)
> [[1, 3], [2, 4]]

:p argmin [1.0, 2.0, 0.4, 5.0]
> 2@(Fin 4)

:p select True (fromOrdinal (Fin 2) 0) (fromOrdinal (Fin 2) 1)
> 0@(Fin 2)

-- TODO: printing (also parsing) tables with alternative index sets
-- :p
--   xs = [[1],[2]]
--   for (i,j). xs.i.j
-- > [1, 2]@(2, 1)


-- TODO: injections
-- :p
--   xs = for i:5. 1.0
--   two = fromOrdinal (Fin 5) 2
--   for i:3. sum for j:(two<..). xs.(%inject(j))
-- > [2.0, 2.0, 2.0]

:p
  withState 0.0 \ref. for i:(Fin 4).
      c = get ref
      ref := c + 1.0
      c
> ([0.0, 1.0, 2.0, 3.0], 4.0)

:p
  withState 0.0 \ref. rof i:(Fin 4).
      c = get ref
      ref := c + 1.0
      c
> ([3.0, 2.0, 1.0, 0.0], 4.0)

def eitherFloor (x:(Int|Float)) : Int = case x of
  Left i  -> i
  Right f -> FToI $ floor f

:p eitherFloor (Right 1.2)
> 1

:p
  x : (Int|Float) = Right 1.2
  x
> Right 1.2

-- Sum types as flattened index sets!
def Weights (n:Type) (m:Type) : Type = n=>m=>Float
def Biases  (n:Type)          : Type = n=>Float
def Params  (n:Type) (m:Type) : Type = {weights:(n&m) | biases:n}=>Float

w = for i:(Fin 2). for j:(Fin 3). (IToF (ordinal i)) * 3.0 + (IToF (ordinal j))
b = for j:(Fin 2). neg (IToF (ordinal j) + 1.0)

def flatten ((w,b):(Weights n m & Biases n)): Params n m =
  for idx. case idx of
    {| weights = (i,j) |} -> w.i.j
    {| biases  = i     |} -> b.i

def unflatten (params:Params n m) : (Weights n m & Biases n) =
  ( for i. for j. params.({| weights = (i,j)|})
  , for i.        params.({| biases  = i    |}))

:p unflatten (flatten (w, b)) == (w, b)
> True

:p [1,2,3] == [1,2,3]
> True

:p [1,2,4] == [1,2,3]
> False

:p (1, 2) == (1, 2)
> True

:p (for i:(Fin 4). (1.0, ordinal i)) == (for i:(Fin 4). (1.0, ordinal i))
> True

:p (1, 1) == (1, 2)
> False

:p (for i:(Fin 4). 1.0) == (for i:(Fin 4). 2.0)
> False

-- Userspace-Bool breaks these

-- -- Needed to avoid ambiguous type variables if both sides use the same constructor
-- def cmpEither (x:Int|Int) (y:Int|Int) : Bool = x == y

-- :p cmpEither (Left 1) (Left 1)
-- > True

-- :p cmpEither (Left 1) (Left 2)
-- > False

-- :p cmpEither (Left 1) (Right 1)
-- > False

-- TODO: within-module version of this (currently fails in Imp checking)
upperBound = sum $ for i:(Fin 4). 1
:p for j:(Fin upperBound). 1.0
> [1.0, 1.0, 1.0, 1.0]

:p (for i:(Fin upperBound). 1, for j:(Fin 2). 2)
> ([1, 1, 1, 1], [2, 2])

for i:(Fin 4).
  x = 1 + 1
  (x, x)
> [(2, 2), (2, 2), (2, 2), (2, 2)]

:p
  x = 2
  z = for i:(Fin 4).
        y = 2 + 3
        (x, y)
  (x, z)
> (2, [(2, 5), (2, 5), (2, 5), (2, 5)])

for i:(Range 4 1). 1.0
> []@(%IntRange 4 1)

x = 2 - 4
for i:(Range 0 x). 1.0
> []

-- Make sure that we can construct and print an array using a pair index set
for i:(Fin 2 & Fin 2). 1.0
> [1.0, 1.0, 1.0, 1.0]@(Fin 2 & Fin 2)

1@(Fin 2 & Fin 2)
> (0@(Fin 2), 1@(Fin 2))

for i:(Fin 5). for j:(..i).
  ir = IToF $ ordinal i
  jr = IToF $ ordinal j
  ir * (ir + 1.0) / 2.0 + jr
> [ [0.0]@(..(0@Fin 5))
> , [1.0, 2.0]@(..(1@Fin 5))
> , [3.0, 4.0, 5.0]@(..(2@Fin 5))
> , [6.0, 7.0, 8.0, 9.0]@(..(3@Fin 5))
> , [10.0, 11.0, 12.0, 13.0, 14.0]@(..(4@Fin 5)) ]

-- TODO: fix!
-- -- Exercise the use of free variables in the sum solver
-- :p
--   n = 2 + 2
--   x = for i:(Fin n). for j:(..i). 1.0
--   sum $ for i. sum x.i
-- > 10.0


:p 1 + 2
> 3

:p [1,2] - [2,10]
> [-1, -8]

:p 2.0 .* [[1.0, 2.0], [3.0, 4.0]]
> [[2.0, 4.0], [6.0, 8.0]]

def newtonIter (f: Float -> Float) (x:Float) : Float =
  x - (f x / deriv f x)

def newtonSolve (tol:Float) (f : Float -> Float) (x0:Float) : Float =
  snd $ withState x0 \x.
    while (\(). abs (f $ get x) > tol) \().
      x := newtonIter f $ get x

:p newtonSolve 0.001 (\x. sq x - 2.0) 1.0
> 1.4142157

-- :p
--   x = for i:(Fin 3). for j:(Fin 200). 1.0
--   -- Last dimension split to allow for vector loads
--   y = for i:(Fin 200). for j:(Fin 4). for h:(Fin VectorWidth). IToF $ (iota _).(i,j,h)
--   z = snd $ withAccum \acc.
--         for l.
--           for i.
--             xil = (broadcastVector x.i.l)
--             for j.
--               acc!i!j += xil * (loadVector y.l.j)
--   for i:(Fin 3). for j:(Fin 4). storeVector z.i.j
-- > [ [ [318400.0, 318600.0, 318800.0, 319000.0]
-- > , [319200.0, 319400.0, 319600.0, 319800.0]
-- > , [320000.0, 320200.0, 320400.0, 320600.0]
-- > , [320800.0, 321000.0, 321200.0, 321400.0] ]
-- > , [ [318400.0, 318600.0, 318800.0, 319000.0]
-- > , [319200.0, 319400.0, 319600.0, 319800.0]
-- > , [320000.0, 320200.0, 320400.0, 320600.0]
-- > , [320800.0, 321000.0, 321200.0, 321400.0] ]
-- > , [ [318400.0, 318600.0, 318800.0, 319000.0]
-- > , [319200.0, 319400.0, 319600.0, 319800.0]
-- > , [320000.0, 320200.0, 320400.0, 320600.0]
-- > , [320800.0, 321000.0, 321200.0, 321400.0] ] ]

:p
  fs = for i:(Fin 4).
    x = ordinal i
    \y. x + y
  for i. fs.i (ordinal i)
> [0, 2, 4, 6]

:p
  f = fst $ withState 1 \ref.
    x = get ref
    ref := 3 + x
    y = get ref
    \z. z + 10 * x + 100 * y
  f 5
> 415

:p
  (f, w) = withAccum \ref.
    ref += 2.0
    w = 2
    \z. z + w
  (f 5, w)
> (7, 2.0)

-- def add (n : Type) ?-> (a : n=>Float) (b : n=>Float) : n=>Float =
--   (tile (\t:(Tile n (Fin VectorWidth)). storeVector $ loadTile t a + loadTile t b)
--         (\i:n. a.i + b.i))
-- toAdd = for _:(Fin 10). 1.0
-- add toAdd toAdd
-- > [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]

arr2d = for i:(Fin 2). for j:(Fin 2). (iota _).(i,j)
arr2d.(1@_)
> [2, 3]

:p
  withState (1,2) \ref.
    r1 = fstRef ref
    r2 = sndRef ref
    x = get r1
    y = get r2
    r2 := x
    r1 := y
> ((), (2, 1))


:p any [True, False]
> True
:p any [False, False]
> False
:p any []:(Fin 0)=>Bool
> False

:p all [True, True]
> True
:p all [False, True]
> False
:p all []:(Fin 0)=>Bool
> True


'Tests for numerical utilies

easy = [(-2.0), 3.0, 3.0, 0.1, 0.0]
hard = [(-1000.0), 1000.0, 1000.0, 0.1, 0.0]

:p logsumexp easy - (log $ sum for j. exp easy.j)
> 0.0

:p sum $ softmax hard
> 1.0

:p all for i. ((softmax hard).i >= 0.0)
> True

:p sum for i. exp $ (logsoftmax hard).i
> 0.9999709

:p all for i. abs ((softmax hard).i - exp (logsoftmax hard).i) < 0.0001
> True

:p evalpoly [2.0, 3.0, 4.0] 10.0
> 234.0

str = ['x', 'y']

:p str
> ['x', 'y']

s1 = "hello world"

:p s1
> ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']

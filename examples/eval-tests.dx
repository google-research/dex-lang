:p 1.0 + 2.0
> 3.0

:p (double = lam x. x * 2.0
    double 10.0)
> 20.0

:p _, Nx = unpack range 10
   isum (iota @Nx)
> 45

:p _, Nx = unpack range 10
   x = iota @Nx
   isum (for i. x.i)
> 45

:p vdot :: n=>Real -> n=>Real -> Real
   vdot x y = sum (for i. x.i * y.i * 2.0)
   _, Nx = unpack range 3
   x = (iota) :: (Nx=>Int)
   y = map real x
   vdot y y
> 10.0

:p _, Nx = unpack range 3
   _, Ny = unpack range 4
   x = iota @ Nx
   y = iota @ Ny
   z.i.j = real x.i * real y.j
   sum (for i. sum z.i)
> 18.0

-- :p randint (hash 0 0) 10
-- :p let x = unpack range 10000
--        key = hash 0
--    in sum (for i: randint (key x.i) 10)
_, NArr = unpack range 7


arr = iota @ NArr


:p for i::NArr. iadd iota.i iota.i
> [0, 2, 4, 6, 8, 10, 12]

:p isum for i::NArr. 1
> 7

fun = lam y. sum (map real arr) + y


:p fun 3.0
> 24.0

:p arr
> [0, 1, 2, 3, 4, 5, 6]

:p fold 0 for i. iadd arr.i
> 21

:p 6.0 - 10.0
> -4.0

:p (lam (x, y). x + y) (1.0, 2.0)
> 3.0

:p f :: (a -> b, a) -> b
   f (x, y) = x y
   f (lam x. x, 1)
> 1

:p (x,y) = ((1.0,2.0),3.0)
   (x1, x2) = x
   x1 + x2 + y
> 6.0

:p x = (1.0,2.0)
   (y,z) = x
   y + z
> 3.0

-- :p let f (x, y) = x + 2 * y;
--        z.i = (x.i, x.i * x.i)
--    in sum (for i. f z.i)
:p exp 1.0
> 2.7182817

:p log 1.0
> 0.0

:p sqrt 2.0
> 1.4142135

:p sin 3.14159
> 2.6535897e-6

:p cos 0.0
> 1.0

:p tan 1.57079
> 158057.9

:p fadd 1.0 2.0
> 3.0

:p fsub 1.0 2.0
> -1.0

:p fmul 3.0 2.0
> 6.0

:p fdiv 3.0 2.0
> 1.5

s = 1.0

:p s
> 1.0

:p [2, 4, 8]
> [2, 4, 8]

:p xs = [2,1,0]; (for i. iadd xs.i 10)
> [12, 11, 10]

cumsumplus :: n=>Real -> n=>Real
cumsumplus xs = snd (scan 0.0 for i. lam c. ans = c + xs.i
                                            (ans, 1.0 + ans))

:p cumsumplus [1.0, 2.0, 3.0]
> [2.0, 4.0, 7.0]

:p [False, False, True]
> [False, False, True]

:p [False, True, True, False]  -- testing again because it's been flaky
> [False, True, True, False]

:p (True, False)
> (True, False)

:p 1.0 > 2.0
> False

:p 1.0 > neg 2.0
> True

:p 1.0 < 2.0
> True

:p b2i (1.0 < 2.0)
> 1

_, N3 = unpack range 3
_, N4 = unpack range 4
mat = for i::N3 j::N4. iadd iota.i (imul 10 iota.j)

:p isum for (i,j). mat.i.j
> 192

litArr = [10, 5, 3]

:p litArr.(asidx 2)
> 3

:p mod 5 3
> 2

:p size @N3
> 3

:p for i::3. 1
> [1, 1, 1]

:p type Nrand = 6
   (k, _) = (iadd 1 2, 3)
   for i::Nrand. iadd k (asint i)
> [3, 4, 5, 6, 7, 8]

:p k = newKey 0
   mean for i::100. randn (ixkey k i)
> -0.115799494

:p k = newKey 0
   mean for i::100. sq $ randn (ixkey k i)
> 1.2581897

:p x = for i::3. 0; x
> [0, 0, 0]

:p x = for i::3. for j::4. 0; x
> [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

:p fold (for i::3. 0.0) $ for i::2. lam c. (for j. c.j + real (asint j))
> [0.0, 2.0, 4.0]

:p (mat2 = for i::4 j::4 . asint i; tmp = for i. mat2.i.i; tmp)
> [0, 1, 2, 3]

:p (x = [[0, 1], [2, 3]]; xt.i.j = x.j.i; xt)
> [[0, 2], [1, 3]]

:p (x, y) = (1, (2,3))
   (x, y)
> (1, (2, 3))

:p for i::3. i
> [0@3, 1@3, 2@3]

:p (asidx 0)::1
> 0@1

newtype MyInt = Int

toMyInt :: Int -> MyInt
toMyInt x = %newtypecast(x)

fromMyInt :: MyInt -> Int
fromMyInt x = %newtypecast(x)

myIntId :: MyInt -> MyInt
myIntId x = x

:p myIntId 1
> Type error:
> Expected: MyInt
>   Actual: Int
> In: 1
>
> :p myIntId 1
>            ^

:p iadd (toMyInt 2) 2
> Type error:
> Expected: Int
>   Actual: MyInt
> In: (toMyInt 2)
>
> :p iadd (toMyInt 2) 2
>         ^^^^^^^^^^^^

:p fromMyInt $ myIntId $ toMyInt $ 3
> 3

:p [0].([asidx 0].(asidx 0))
> 0

:p select True 1 2
> 1

:p select False 1.0 2.0
> 2.0

:p select True [1,2,3] [10,20,30]
> [1, 2, 3]

:p select False [1,2,3] [10,20,30]
> [10, 20, 30]

:p [(1, (for i::2 . 3))].(asidx 0)
> (1, [3, 3])

:p (False && False, False && True, True && False, True && True)
> (False, False, False, True)

:p (and False False, and False True, and True False, and True True)
> (False, False, False, True)

:p (not False, not True)
> (True, False)

:p (False || False, False || True, True || False, True || True)
> (False, True, True, True)

:p (or False False, or False True, or True False, or True True)
> (False, True, True, True)

:p [(for i::1. (False, for j::2. 1.0)), [(True, for k::2 . 2.0)]]
> [[(False, [1.0, 1.0])], [(True, [2.0, 2.0])]]

:p (mod 5 3, mod 7 3, mod -1 3, mod -5 3)
> (2, 1, 2, 1)

:p [[1,2], for i. 3]
> [[1, 2], [3, 3]]

:p select False [1, 2] (for i. 3)
> [3, 3]

:p fold [1, 2] for i::3. lam c. for j. 4
> [4, 4]

:p select True (1,2) (2,3)
> (1, 2)

:p select False (1,[2,3]) (4, for _. 3)
> (4, [3, 3])

:p select False () ()
> ()

:p [1,2,3].(1@3)
> 2

:p fs = for i::3. lam x. x + x
   for i. fs.i 1.0
> [2.0, 2.0, 2.0]

:p fs = snd $ scan 1.0 for i::4. lam c. (c + 1.0, lam x. x + c)
   for i. fs.i 1.0
> [2.0, 3.0, 4.0, 5.0]

:p fold (1.0, 2.0) for i::2. lam (x, y). (y, x)
> (1.0, 2.0)

:p fold (1.0, 2.0) for i::3. lam (x, y). (y, x)
> (2.0, 1.0)

:p id 2
> 2

:p min 2.0 3.0
> 2.0

:p minby sq 0.5 -2.0
> 0.5

:p minimum [2.0, 3.0, 4.0, 1.5, 7.0]
> 1.5

:p minimumby (asNonLin fst) [(2.0, 20), (1.5, 15), (10.0, 100)]
> (1.5, 15)

:p max 2.0 3.0
> 3.0

:p maxby sq 0.5 -2.0
> -2.0

:p maximum [2.0, 4.0, 1.5, 7.0]
> 7.0

:p maximumby (asNonLin fst) [(2.0, 20), (1.5, 15), (10.0, 100)]
> (10.0, 100)

:p (1 == 2, -1 == -1, 1 < 2, -1 < 2, 2 < -1)
> (False, True, True, True, False)

:p (1. == 2., -1. == -1., 1. < 2., -1. < 2., 2. < -1.)
> (False, True, True, True, False)

:p for i::7. select (i < 3@7) 1 2
> [1, 1, 1, 2, 2, 2, 2]

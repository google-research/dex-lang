:p 1.0 + 2.0
> 3.0

:p (double = lam x. x * 2.0
    double 10.0)
> 20.0

:p _, Nx = unpack range 10
   isum (iota @Nx)
> 45

:p _, Nx = unpack range 10
   x = (iota :: Nx=>Int)
   isum (for i. x.i)
> 45

:p vdot :: n=>Real -> n=>Real -> Real
   vdot x y = sum (for i. x.i * y.i * 2.0)
   _, Nx = unpack range 3
   x = (iota :: Nx=>Int)
   y = map real x
   vdot y y
> 10.0

:p _, Nx = unpack range 3
   _, Ny = unpack range 4
   x = iota @ Nx
   y = iota @ Ny
   z.i.j = real x.i * real y.j
   sum (for i. sum z.i)
> 18.0

-- :p randint (hash 0 0) 10
-- :p let x = unpack range 10000
--        key = hash 0
--    in sum (for i: randint (key x.i) 10)
_, NArr = unpack range 7


arr = iota @ NArr


:p for i::NArr. iadd iota.i iota.i
> [0, 2, 4, 6, 8, 10, 12]

:p isum for i::NArr. 1
> 7

fun = lam y. sum (map real arr) + y


:p fun 3.0
> 24.0

:p arr
> [0, 1, 2, 3, 4, 5, 6]

:p fold 0 for i. iadd arr.i
> 21

:p 6.0 - 10.0
> -4.0

:p (lam (x, y). x + y) (1.0, 2.0)
> 3.0

:p f :: (a -> b, a) -> b
   f (x, y) = x y
   f (lam x. x, 1)
> 1

:p (x,y) = ((1.0,2.0),3.0)
   (x1, x2) = x
   x1 + x2 + y
> 6.0

:p x = (1.0,2.0)
   (y,z) = x
   y + z
> 3.0

-- :p let f (x, y) = x + 2 * y;
--        z.i = (x.i, x.i * x.i)
--    in sum (for i. f z.i)
:p exp 1.0
> 2.718281828459045

:p log 1.0
> 0.0

:p sqrt 2.0
> 1.4142135623730951

:p sin 3.14159
> 2.65358979335273e-6

:p cos 0.0
> 1.0

:p tan 1.57079
> 158057.9134162482

:p fadd 1.0 2.0
> 3.0

:p fsub 1.0 2.0
> -1.0

:p fmul 3.0 2.0
> 6.0

:p fdiv 3.0 2.0
> 1.5

s = 1.0

:p s
> 1.0

:p [2, 4, 8]
> [2, 4, 8]

:p xs = [2,1,0]; (for i. iadd xs.i 10)
> [12, 11, 10]

cumsumplus :: n=>Real -> n=>Real
cumsumplus xs = snd (scan 0.0 for i. lam c. ans = c + xs.i
                                            (ans, 1.0 + ans))

:p cumsumplus [1.0, 2.0, 3.0]
> [2.0, 4.0, 7.0]

:p [False, False, True]
> [False, False, True]

:p (True, False)
> (True, False)

:p 1.0 > 2.0
> False

:p 1.0 > (0.0 - 2.0)
> True

:p 1.0 < 2.0
> True

:p b2i (1.0 < 2.0)
> 1

_, N3 = unpack range 3
_, N4 = unpack range 4
mat = for i::N3 j::N4. iadd iota.i (imul 10 iota.j)

:p isum for (i,j). mat.i.j
> 192

litArr = [10, 5, 3]

:p litArr.(asidx 2)
> 3

:p mod 5 3
> 2

:p size @N3
> 3

:p for i::3. 1
> [1, 1, 1]

:p type Nrand = 6
   (k, _) = (iadd 1 2, 3)
   for i::Nrand. iadd k (asint i)
> [3, 4, 5, 6, 7, 8]

:p mean for i::100. randn (asint i)
> 3.6825456339802366e-2

:p mean for i::100. sq $ randn (asint i)
> 1.0268342292186705

:p x = for i::3. 0; x
> [0, 0, 0]

:p x = for i::3. for j::4. 0; x
> [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

:p fold (for i::3. 0.0) $ for i::2. lam c. (for j. c.j + real (asint j))
> [0.0, 2.0, 4.0]

:p (mat2 = for i::4 j::4 . asint i; tmp = for i. mat2.i.i; tmp)
> [0, 1, 2, 3]

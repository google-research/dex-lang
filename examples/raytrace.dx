' ## Multi-step Ray Tracer

' Based on Eric Jang's
[JAX implementation](https://github.com/ericjang/pt-jax/blob/master/jaxpt_vmap.ipynb),
described
[here](https://blog.evjang.com/2019/11/jaxpt.html).
Specifically, it's based on his unrolled ```lax.scan``` version.


' ### Generic Helper Functions
Some of these should probably go in prelude.

def Vec (n:Int) : Type = Fin n => Float
def Mat (n:Int) (m:Int) : Type = Fin n => Fin m => Float

def relu (x:Float) : Float = max x 0.0
def length    (x: d=>Float) : Float = sqrt $ sum for i. sq x.i
-- TODO: make a newtype for normal vectors
def normalize (x: d=>Float) : d=>Float = x / (length x)
def directionAndLength (x: d=>Float) : (d=>Float & Float) =
  l = length x
  (x / (length x), l)

def dot (_:VSpace v) ?=> (s:d=>Float) (vs:d=>v) : v = sum for j. s.j .* vs.j
def randuniform (lower:Float) (upper:Float) (k:Key) : Float =
  lower + (rand k) * (upper - lower)

def reverse (x:n=>a) : n=>a =
  s = size n
  for i. x.((s - 1 - ordinal i)@_)

def sampleAveraged (_:VSpace a) ?=> (sample:Key -> a) (n:Int) (k:Key) : a =
  snd $ withState zero \total.
    for i:(Fin n).
      total := get total + sample (ixkey k i) / IToF n

def positiveProjection (x:n=>Float) (y:n=>Float) : Bool = dot x y > 0.0

data IterResult a:Type b:Type =
  Continue a
  Done b

-- A little iteration combinator
-- TODO: allow effects (currently there's some type inference bug preventing it)
def iter (init:a) (body: Int -> a -> IterResult a b) : b  =
  result = snd $ withState Nothing \resultRef.
    withState init \carryRef.
      withState 0 \i.
        while (\(). isNothing (get resultRef)) \().
          case body (get i) (get carryRef) of
            Continue carry ->
              i := get i + 1
              carryRef := carry
            Done result ->
              resultRef := Just result
  case result of
    Just ans -> ans
    Nothing -> todo  -- should be unreachable

' ### 3D Helper Functions

-- TODO: implement table unpacking
def unpackvec3 (p:Vec 3) : (Float & Float & Float) =
  (p.(0@(Fin 3)), p.(1@(Fin 3)), p.(2@(Fin 3)))

def cross (a:Vec 3) (b:Vec 3) : Vec 3 =
  (a1, a2, a3) = unpackvec3 a
  (b1, b2, b3) = unpackvec3 b
  [a2 * b3 - a3 * b2, a3 * b1 - a1 * b3, a1 * b2 - a2 * b1]

-- TODO: Use `data Color = Red | Green | Blue` and ADTs for index sets
Color = (Fin 3)=>Float
def ColorImage     (height:Int) (width:Int) : Type = Fin height => Fin width => Color
def GrayScaleImage (height:Int) (width:Int) : Type = Fin height => Fin width => Float

xHat : Vec 3 = [1., 0., 0.]
yHat : Vec 3 = [0., 1., 0.]
zHat : Vec 3 = [0., 0., 1.]

Angle = Float  -- angle in radians

def rotateX (p:Vec 3) (angle:Angle) : Vec 3 =
  c = cos angle
  s = sin angle
  (px, py, pz) = unpackvec3(p)
  [px, c*py - s*pz, s*py + c*pz]

def rotateY (p:Vec 3) (angle:Angle) : Vec 3 =
  c = cos angle
  s = sin angle
  (px, py, pz) = unpackvec3(p)
  [c*px + s*pz, py, - s*px+ c*pz]

def rotateZ (p:Vec 3) (angle:Angle) : Vec 3 =
  c = cos angle
  s = sin angle
  (px, py, pz) = unpackvec3(p)
  [c*px - s*py, s*px+c*py, pz]

def sampleCosineWeightedHemisphere (normal: Vec 3) (k:Key) : Vec 3 =
  (k1, k2) = splitKey k
  u1 = rand k1
  u2 = rand k2
  uu = normalize $ cross normal [0.0, 1.1, 1.1]
  vv = cross uu normal
  ra = sqrt u2
  rx = ra * cos (2.0 * pi * u1)
  ry = ra * sin (2.0 * pi * u1)
  rz = sqrt (1.0 - u2)
  rr = (rx .* uu) + (ry .* vv) + (rz .* normal)
  normalize rr

' ### Raytracer

Distance = Float
def Image (n:Int) :Type = Fin n => Fin n => Color -- TODO: hide the size

Position  = Vec 3
Direction = Vec 3  -- Should be normalized. TODO: use a newtype wrapper

BlockHalfWidths = Vec 3
Radius = Float
Radiance = Color

data ObjectGeom =
  Wall Direction Distance
  Block Position BlockHalfWidths Angle
  Sphere Position Radius

data Surface =
  Matte Color
  Mirror

OrientedSurface = (Direction & Surface)

data Object =
  PassiveObject ObjectGeom Surface
  -- position, half-width, intensity (assumed to point down)
  Light Position Float Radiance

Ray = (Position & Direction)
Filter   = Color

-- TODO: use a record
-- num samples, num bounces, share seed?
Params = (Int & Int & Bool)

-- TODO: use a list instead, once they work
data Scene n:Type = MkScene (n=>Object)

def sampleReflection ((nor, surf):OrientedSurface) ((pos, dir):Ray) (k:Key) : Ray =
  newDir = case surf of
    Matte _ -> sampleCosineWeightedHemisphere nor k
    -- TODO: surely there's some change-of-solid-angle correction we need to
    -- consider when reflecting off a curved surface.
    Mirror  -> dir - (2.0 * dot dir nor) .* nor
  (pos, newDir)

def probReflection ((nor, surf):OrientedSurface) (_:Ray) ((_, outRayDir):Ray) : Float =
  case surf of
    Matte _ -> relu $ dot nor outRayDir
    Mirror  -> 0.0  -- TODO: this should be a delta function of some sort

def applyFilter (filter:Filter) (radiance:Radiance) : Radiance =
  for i. filter.i * radiance.i

def surfaceFilter (filter:Filter) (surf:Surface) : Filter =
  case surf of
    Matte color -> for i. filter.i * color.i
    Mirror      -> filter

def sdObject (pos:Position) (obj:Object) : Distance =
  case obj of
    PassiveObject geom _ -> case geom of
      Wall nor d -> d + dot nor pos
      Block blockPos halfWidths angle ->
        pos' = rotateY (pos - blockPos) angle
        length $ for i. max ((abs pos'.i) - halfWidths.i) 0.0
      Sphere spherePos r ->
        pos' = pos - spherePos
        max (length pos' - r) 0.0
    Light squarePos hw _ ->
      pos' = pos - squarePos
      halfWidths = [hw, 0.01, hw]
      length $ for i. max ((abs pos'.i) - halfWidths.i) 0.0

def sdScene (scene:Scene n) (pos:Position) : (Object & Distance) =
  (MkScene objs) = scene
  (i, d) = minimumBy snd $ for i. (i, sdObject pos objs.i)
  (objs.i, d)

def calcNormal (scene:Scene n) (pos:Position) : Direction =
  dist = \p. snd $ sdScene scene p
  normalize (grad dist pos)

data RayMarchResult =
  -- incident ray, surface normal, surface properties
  HitObj Ray OrientedSurface
  HitLight Radiance
  -- Could refine with failure reason (beyond horizon, failed to converge etc)
  HitNothing

def raymarch (scene:Scene n) (ray:Ray) : RayMarchResult =
  max_iters = 100
  tol = 0.01
  startLength = 10.0 * tol  -- trying to escape the current surface
  (rayOrigin, rayDir) = ray
  iter (10.0 * tol) \i rayLength.
    case i >= max_iters of
      True -> Done HitNothing
      False ->
        rayPos = rayOrigin + rayLength .* rayDir
        (obj, d) = sdScene scene $ rayPos
        -- 0.9 ensures we come close to the surface but don't touch it
        dNew = rayLength + 0.9 * d
        case d < tol of
          False -> Continue $ dNew
          True ->
            surfNorm = calcNormal scene rayPos
            case positiveProjection rayDir surfNorm of
              True ->
                -- Oops, we didn't escape the surface we're leaving..
                -- (Is there a more standard way to do this?)
                Continue dNew
              False ->
                -- We made it!
                Done $ case obj of
                  PassiveObject _ surf -> HitObj (rayPos, rayDir) (surfNorm, surf)
                  Light _ _ radiance   -> HitLight radiance

def rayDirectRadiance (scene:Scene n) (ray:Ray) : Radiance =
  case raymarch scene ray of
    HitLight intensity -> intensity
    HitNothing -> zero
    HitObj _ _ -> zero

def sampleSquare (hw:Float) (k:Key) : Position =
 (kx, kz) = splitKey k
 x = randuniform (- hw) hw kx
 z = randuniform (- hw) hw kz
 [x, 0.0, z]

def sampleLightRadiance
      (scene:Scene n) (osurf:OrientedSurface) (inRay:Ray) (k:Key) : Radiance =
  (surfNor, surf) = osurf
  (rayPos, _) = inRay
  (MkScene objs) = scene
  snd $ withAccum \radiance.
    for i. case objs.i of
      PassiveObject _ _ -> ()
      Light lightPos hw _ ->
        (dirToLight, distToLight) = directionAndLength $
                                      lightPos + sampleSquare hw k - rayPos
        case positiveProjection dirToLight surfNor of
          False -> () -- light on the far side of current surface
          True ->
            fracSolidAngle = (relu $ dot dirToLight yHat) * sq hw / (pi * sq distToLight)
            outRay = (rayPos, dirToLight)
            coeff = fracSolidAngle * probReflection osurf inRay outRay
            radiance += coeff .* rayDirectRadiance scene outRay

def trace (params:Params) (scene:Scene n) (init_ray:Ray) (k:Key) : Color =
  (_, max_bounces, _) = params
  -- TODO: we ought to be able to use an accumulator here, but there's a bug
  noFilter = [1.0, 1.0, 1.0]
  iter (noFilter, zero, init_ray) $
    \i (filter, radiance, ray).
      case i >= max_bounces of
        True -> Done radiance
        False -> case raymarch scene ray of
          HitNothing -> Done radiance
          HitLight intensity -> case i == 0 of
            True  -> Done intensity  -- TODO: scale etc
            False -> Done radiance
          HitObj incidentRay osurf ->
            (k1, k2) = splitKey $ hash k i
            lightRadiance    = sampleLightRadiance scene osurf incidentRay k1
            outRayHemisphere = sampleReflection          osurf incidentRay k2
            newFilter = surfaceFilter filter (snd osurf)
            newRadiance = radiance + applyFilter newFilter lightRadiance
            Continue (newFilter, newRadiance, outRayHemisphere)

-- TODO: add number of pixels once we can hide sizes
-- sensor half-width, pinhole-sensor distance, pinhole position
-- (Assumes we're looking towards -z.)
Camera = (Position & Float & Float)

def cameraRays (n:Int) (camera:Camera) : Fin n => Fin n => (Key -> Ray) =
  -- images indexed from top-left
  (pos, halfWidth, sensorDist) = camera
  pixHalfWidth = halfWidth / IToF n
  ys = reverse $ linspace (Fin n) (neg halfWidth) halfWidth
  xs =           linspace (Fin n) (neg halfWidth) halfWidth
  for i j. \key.
    (kx, ky) = splitKey key
    x = xs.j + randuniform (-pixHalfWidth) pixHalfWidth kx
    y = ys.i + randuniform (-pixHalfWidth) pixHalfWidth ky
    (pos, normalize [x, y, neg sensorDist])

def takePicture
       (params:Params) (scene:Scene m) (n:Int) (camera:Camera)
      : ColorImage n n =
  (numSamples, _, shareSeed) = params
  rays = cameraRays n camera
  rootKey = newKey 0
  image = for i j.
    pixKey = case shareSeed of
      True  -> rootKey
      False -> ixkey (ixkey rootKey i) j
    sampleRayColor : Key -> Color =  \k.
      (k1, k2) = splitKey k
      trace params scene (rays.i.j k1) k2
    sampleAveraged sampleRayColor numSamples pixKey
  image / mean (for (i,j,k). image.i.j.k)

' ### Define the scene and render it

lightColor = [0.2, 0.2, 0.2]
leftWallColor  = 1.5 .* [0.611, 0.0555, 0.062]
rightWallColor = 1.5 .* [0.117, 0.4125, 0.115]
whiteWallColor = [255.0, 239.0, 196.0] / 255.0
blockColor     = [200.0, 200.0, 255.0] / 255.0

theScene = MkScene $
    [ Light (1.9 .* yHat) 0.5 lightColor
    , PassiveObject (Wall      xHat  2.0) (Matte leftWallColor)
    , PassiveObject (Wall (neg xHat) 2.0) (Matte rightWallColor)
    , PassiveObject (Wall      yHat  2.0) (Matte whiteWallColor)
    , PassiveObject (Wall (neg yHat) 2.0) (Matte whiteWallColor)
    , PassiveObject (Wall      zHat  2.0) (Matte whiteWallColor)
    , PassiveObject (Block  [ 1.0, -1.6,  1.2] [0.6, 0.8, 0.6] 0.5) (Matte blockColor)
    , PassiveObject (Sphere [-1.0, -1.2,  0.2] 0.8) (Matte (0.7.* whiteWallColor))
    , PassiveObject (Sphere [ 2.0,  2.0, -2.0] 1.5) (Mirror)
    ]

camera = (10.0 .* zHat, 0.3, 1.0)

-- num_pix = 250
num_pix = 10
num_samples = 50
num_bounces = 10
share_prng = True
params = (num_samples, num_bounces, share_prng)


-- %time
image = takePicture params theScene num_pix camera

:plotmatcolor image
> <graphical output>

'Just for fun, here's what we get with a single sample (sharing the PRNG
key among pixels)

-- :plotmatcolor takePicture (1, num_bounces, share_prng) theScene num_pix camera

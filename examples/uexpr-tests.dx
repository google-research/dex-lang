
:p 3 + (4 + 5)
> 12

def depId (a:Type) (x:a) : a = x

:p depId Int 1
> 1

def returnFirstArg (a:Type) (b:Type) (x:a) (y:b) : a = x

:p returnFirstArg Int Float 1 2.0
> 1

:p 1.0 + 2.0
> 3.0

def triple (x:Float) : Float = x + x + x

:p triple 1.0
> 3.0

def idExplicit (a:Type) (x:a) : a = x

:p idExplicit Int 1
> 1

def idImplicit (a:Type) ?-> (x:a) : a = x
:p idImplicit 1
> 1

idImplicit2 : (a:Type ?-> a -> a) = \x. x
:p idImplicit2 1
> 1

:p
  idImplicit3 : (a:Type ?-> a -> a) = \x. x
  idImplicit3 1
> 1

:p (\x y. x + y) 1.0 2.0
> 3.0

:p 1.0 + 1
> Type error:
> Expected: Float32
>   Actual: Int32
>
> :p 1.0 + 1
>          ^

:p 1 + (1.0 + 2.0)
> Type error:
> Expected: Int32
>   Actual: Float32
>
> :p 1 + (1.0 + 2.0)
>         ^^^^^^^^^

:p 1.0 + (2 + 3)
> Type error:
> Expected: Float32
>   Actual: Int32
>
> :p 1.0 + (2 + 3)
>           ^^^^^

:p x + x
> Error: variable not in scope: x
>
> :p x + x
>    ^^

idiv = 1
> Error: variable already defined: idiv

def TyId (a:Type) : Type = a
:p
  x:(TyId Int) = 1
  x
> 1

:p
  def TyId2 (a:Type) : Type = a
  x:(TyId2 Int) = 1
  x
> 1

def tabId (n:Type) ?-> (x:n=>Int) : n=>Int = for i. x.i

-- bug: this doesn't work if we split it across top-level decls
:p
  xs = for i:(Fin 3) . 1
  tabId xs
> [1, 1, 1]

myPair = (1, 2.3)

:p fst myPair
> 1

:p
   snd $ withState 2 \s.
     x = get s
     s := x + 3
> 5

:p
   snd $ withState 1 \s.
     for i:(Fin 10).
       x = get s
       s := x + x
> 1024

:p
 x:Unit = ()
 x
> ()

:p [1,2,3]
> [1, 2, 3]

:p
  x : Fin 0 => Int = []
  x
> []

:p
  x : (Fin 2 & Fin 2) => Int = [1, 2, 3, 4]
  x
> [1, 2, 3, 4]@(Fin 2 & Fin 2)

:p [] : (Fin 0 => Int)
> []

:p [1, 2, 3, 4] : ((Fin 2 & Fin 2) => Int)
> [1, 2, 3, 4]@(Fin 2 & Fin 2)


:p sin 1.0
> 0.84147096

:p
  (x,y) = (1,2)
  (x,y)
> (1, 2)

:p
  (x,y,z) = (1,2,3)
  (x,y,z)
> (1, (2, 3))

:p
  ((x,y),z) = (1,2,3)
  ((x,y),z)
> Type error:
> Expected: (a & b)
>   Actual: Int32
> (Solving for: [a:Type, b:Type])
>
>   ((x,y),z) = (1,2,3)
>     ^^^

:p
  (x,(y,z)) = (1,2,3)
  (x,(y,z))
> (1, (2, 3))

:p
  (x,y) = 1
  (x,y)
> Type error:
> Expected: (a & b)
>   Actual: Int32
> (Solving for: [a:Type, b:Type])
>
>   (x,y) = 1
>    ^^^

:p
  snd $ withState [1,2,3] \xsRef.
    for i:(Fin 3).
      xsRef!i := ordinal i
> [0, 1, 2]

def passthrough (eff:Effects) ?-> (f:(a -> {|eff} b)) (x:a) : {|eff} b = f x

:p
  snd $ withState 1 \ref.
    passthrough (\(). ref := 10) ()
> 10

:p
  withState 0 \r1.
    withState 0 \r2.
      r1 := 1
      r2 := 2
> (((), 2), 1)

:p (\f x y. f x y) (+) 1.0 2.0
> 3.0

:p
  myId = fst (\x. x, 2)
  f : a:Type -> a -> a = \a. \x. myId x
  f Int 1
> Type error:Leaked type variable: a:Type
>
>   f : a:Type -> a -> a = \a. \x. myId x
>                           ^^^^^^^^^^^^^

def myFst (p:(a&b)) : a =
  (x, _) = p
  x
:p myFst (1,2)
> 1

def myOtherFst ((x, _):(a&b)) : a = x
:p myOtherFst (1,2)
> 1

:p sum [1.,2.]
> 3.0

:p
  xs = fanout _ 1.0
  for i:(Fin 3). xs.i + xs.i
> [2.0, 2.0, 2.0]

:p
   f = \x. x * x * x
   jvp f 2.0 1.5
> 18.0

:p
   f : Float --o Float =
     \x. 2.0 * (x + x)
   transposeLinear f 1.0
> 4.0

-- FIXME: This fails due to shadowing!
--def transpose' (x:n=>m=>Float) --o : m=>n=>Float = for i j. x.j.i
--
--:p transposeLinear transpose' [[1.0, 2.0, 3.0]]
--> [[1.0], [2.0], [3.0]]

:p
   f : Float --o (Fin 3=>Float) =
     \x. for i. x * 2.0
   transposeLinear f [1.0, 2.0, 3.0]
> 12.0

id'' : b -> b = id

def eitherFloor (x:(Int|Float)) : Int = case x of
  Left  i -> i
  Right f -> FToI f

:p (eitherFloor (Left 1), eitherFloor (Right 2.3))
> (1, 2)

:p [1, 2, 3, 4] : ((Fin _ & Fin 2) => Int)
> Type error:
> Expected: ((Fin a & Fin 2) => Int32)
>   Actual: ((Fin 4) => Int32)
> (Solving for: [a:Int32])
> If attempting to construct a fixed-size table not indexed by 'Fin n' for some n, this error may indicate there was not enough information to infer a concrete index set; try adding an explicit annotation.
>
> :p [1, 2, 3, 4] : ((Fin _ & Fin 2) => Int)
>    ^^^^^^^^^^^^^

:p
  [(a, b), c] = [(1, 2), (3, 4)]
  (a, c)
> (1, (3, 4))

:p
  [a, b] = [1, 2, 3]
  (a, b)
> Type error:
> Expected: ((Fin 3) => Int32)
>   Actual: ((Fin 2) => a)
> (Solving for: [a:Type])
>
>   [a, b] = [1, 2, 3]
>   ^^^^^^^

:p
  [[a, _], [_, d]] = [[1, 2], [3, 4]]
  a + d
> 5

-- Can only unpack tables indexed by `Fin n`
:p
  [a, b, c, d] = [1, 2, 3, 4] : ((Fin 2 & Fin 2) => Int)
  (a, b, c, d)
> Type error:
> Expected: ((Fin 2 & Fin 2) => Int32)
>   Actual: ((Fin 4) => a)
> (Solving for: [a:Type])
>
>   [a, b, c, d] = [1, 2, 3, 4] : ((Fin 2 & Fin 2) => Int)
>   ^^^^^^^^^^^^^

:p
  -- parentheses needed to stop the parser from reading "zero" as a binder name
  [a, b, c, d] = (zero) : (_ => Int)
  (a, b, c, d)
> (0, (0, (0, 0)))

def bug (n : Type) : Unit =
  for w':n.
    w : n = todo
    for i:(w..). ()
  ()
> Type error:Leaked local variable `w` in result type ((w..) => Unit)
>
>   for w':n.
>   ^^^^

deriv newprim 1.0
> Not implemented: linearization for newprim

:p f : 3=>Float -> 3=>Float
   f x = for i. sq x.i
   jvp f [1.0, 2.0, 3.0] [1.0, 10.0, 100.0]
> [2.0, 40.0, 600.0]

:p jvp (asNonLin sum) [1.0, 2.0, 3.0] [1.0, 2.0, 3.0]
> 6.0

:p f : (Float, 3=>Float) -> (Float, 3=>Float)
   f (x0, xs) = scan x0 for i. lam c. (c * 2.0, c * xs.i)
   jvp f (10.0, [1., 2., 3.]) (10.0, [1., 2., 3.])
> (80.0, [20.0, 80.0, 240.0])

:p transposeLinear (llam xs. xs.(1@3)) 1.5
> [0.0, 1.5, 0.0]

:p transposeLinear (llam xs. xs.(0@3).(1@2)) 1.5
> [[0.0, 1.5], [0.0, 0.0], [0.0, 0.0]]

:p transposeLinear (llam xs. for i. xs.i) [1., 2., 3.]
> [1.0, 2.0, 3.0]

:p transposeLinear (sum @4) 1.5
> [1.5, 1.5, 1.5, 1.5]

myscan : (Float, n=>Float) --o (Float, n=>Float)
myscan (c0, xs) = scanlin (for _. llam (x, y). (y, x)) (c0, xs)

cs = [1.0, 2.0, 3.0]

:p transposeLinear (llam xs. for i. xs.i * cs.i) [1.0, 10.0, 100.0]
> [1.0, 20.0, 300.0]

:p transposeLinear myscan (2.0, [3.0, 4.0])
> (3.0, [4.0, 2.0])

cs1 = [0.0, 1.0]
cs2 = [1.0, 0.0]

myNonCommutingFold : Float --o Float
myNonCommutingFold y0 =
  fst $ foldlin (for i. llam ((x, y), ()). (cs1.i * x + cs2.i * y, 0.0)) $
                ((0.0, y0), for _. ())

:p myNonCommutingFold 2.0
> 2.0

:p transposeLinear myNonCommutingFold 2.0
> 2.0

:p vadd 1. 2.
> 3.0

:p vadd (1.,2.) (3.,4.)
> (4.0, 6.0)

:p vadd [1.,2.] [3.,4.]
> [4.0, 6.0]

:p vzero @Float
> 0.0

:p vzero @(Float, Float)
> (0.0, 0.0)

:p vzero @(Float, 3=>(Float, Float))
> (0.0, [(0.0, 0.0), (0.0, 0.0), (0.0, 0.0)])

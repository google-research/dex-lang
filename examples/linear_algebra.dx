'## LU Decomposition and Matrix Inversion

def identity_matrix (_:Eq n) ?=> (_:Add a) ?=> (_:Mul a) ?=> : n=>n=>a =
  for i j. select (i == j) one zero


'### Triangular matrices

def LowerTriMat (n:Type) : Type = i:n=>(..i)=>Float
def UpperTriMat (n:Type) : Type = i:n=>(i..)=>Float

def forward_substitute (_:VSpace v) ?=> (a:LowerTriMat n) (b:n=>v) : n=>v =
  -- Solves lower triangular linear system (inverse a) **. b
  snd $ withState zero \sRef.
    for i:n.
      s = sum for k:(..<i).  -- dot product
        a.i.((ordinal k)@_) .* (get sRef).(%inject k)
      sRef!i := (b.i - s) / a.i.((ordinal i)@_)

def backward_substitute (_:VSpace v) ?=> (a:UpperTriMat n) (b:n=>v) : n=>v =
  -- Solves upper triangular linear system (inverse a) **. b
  snd $ withState zero \sRef.
    rof i:n.
      s = sum for k:(i..).  -- dot product
        a.i.((ordinal k)@_) .* (get sRef).(%inject k)
      sRef!i := (b.i - s) / a.i.(0@_) -- 0 is the diagonal index

-- Todo: get rid of these by writing a dependent indexing (!) operator.
def lowerTriIndex (ref:Ref h (LowerTriMat n)) (i:n) : Ref h ((..i)=>Float) =
  %indexRef ref i
def upperTriIndex (ref:Ref h (UpperTriMat n)) (i:n) : Ref h ((i..)=>Float) =
  %indexRef ref i


'### Permutations

def Permutation (n:Type) : Type = n=>n
def apply_permutation (permutation: n=>n) (array: n=>t) : n=>t =
  for i. array.(permutation.i)
def identity_permutation (n:Type) ?-> : Permutation n =
  for i. i


'### LU decomposition functions

Sign = Float  -- Either 1.0 or -1.0

def pivotize (_:Eq n) ?=> (a:n=>n=>Float) : (Permutation n & Sign) =
  -- Permutes rows of a matrix to make Gaussian elimination more stable.
  -- Returns permutation and the sign of its determinant.
  snd $ withState (identity_permutation, 1.0) \stateRef.
    (pRef, signRef) = (fstRef stateRef, sndRef stateRef)
    for j:n.
      row_with_largest = argmin for i:(j..). (-(abs a.(%inject i).j))
      row_with_largest = %inject row_with_largest
      case (j == row_with_largest) of
        True -> ()
        False -> 
          tempj = get pRef!j  -- Is there a refSwap?
          pRef!j := get pRef!row_with_largest
          pRef!row_with_largest := tempj
          signRef := -(get signRef)

def lu (_:Eq n) ?=> (a: n=>n=>Float) :
       (LowerTriMat n & UpperTriMat n & Permutation n & Sign) =
  -- Computes lower, upper, and permuntation matrices from a square matrix,
  -- such that apply_permutation permutation a == lower ** upper.
  (permutation, swapcount) = pivotize a
  a = apply_permutation permutation a

  init_lower = for i:n. for j':(..i).
    select (i == (%inject j')) 1.0 0.0
  init_upper = for i:n. for j'':(i..). 0.0

  (lower, upper) = snd $ withState (init_lower, init_upper) \stateRef.
    lRef = fstRef stateRef
    uRef = sndRef stateRef

  -- For reference, here's code to computed the LU decomposition
  -- without dependent tables (i.e. with standard flat matrices):
  --  for j:n.
  --    for i:(..j).
  --      i = %inject i
  --      s = sum for k':(..i).
  --        k = %inject k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      uRef!i!j := a.i.j - s

  --    for i':(j<..).
  --      i = %inject i'
  --      s = sum for k':(..j).
  --        k = %inject k'
  --        (get uRef!k!j) * (get lRef!i!k)
  --      lRef!i!j := (a.i.j - s) / (get uRef!j!j)
  --    for i:n. ()

    for j:n.
      for i:(..j).
        i' = %inject i
        s = sum for k:(..i).
          k'' = %inject k
          k' = %inject k''
          ukj = get (upperTriIndex uRef k')!(((ordinal j) - (ordinal k))@_)
          lik = get (lowerTriIndex lRef i')!((ordinal k)@_)
          ukj * lik
          
        uijRef = (upperTriIndex uRef i')!(((ordinal j) - (ordinal i))@_)
        uijRef := a.(%inject i).j - s
      
      for i:(j<..).
        i' = %inject i
        s = sum for k:(..j).
          k' = %inject k
          i'' = (((ordinal j) - (ordinal k))@_)
          ukj = get (upperTriIndex uRef k')!i''
          lik = get (lowerTriIndex lRef i')!((ordinal k)@_)
          ukj * lik
        
        i'' = ((ordinal i) + (ordinal j) + 1)@_
        ujj = get (upperTriIndex uRef j)!(0@_)
        lijRef = (lowerTriIndex lRef i'')!((ordinal j)@_)
        lijRef := (a.i'.j - s) / ujj
  (lower, upper, permutation, swapcount)


'### General linear algebra functions.

def solve (_:Eq n) ?=> (_:VSpace v) ?=> (a:n=>n=>Float) (b:n=>v) : n=>v =
  -- There's a small speedup possible by exploiting the fact
  -- that l always has ones on the diagonal.  It would just require a
  -- custom forward_substitute routine that doesn't divide
  -- by the diagonal entries.
  (l, u, perm, _) = lu a
  b' = apply_permutation perm b
  y = forward_substitute l b'
  backward_substitute u y

def invert (_:Eq n) ?=> (a:n=>n=>Float) : n=>n=>Float =
  solve a identity_matrix

def determinant (_:Eq n) ?=> (a:n=>n=>Float) : Float =
  (l, u, perm, permutation_sign) = lu a
  -- formerly u.i.i * l.i.i
  (prod for i. u.i.(0@_) * l.i.((ordinal i)@_)) * permutation_sign

def sign_and_log_determinant (_:Eq n) ?=> (a:n=>n=>Float) : (Float & Float) =
  (l, u, perm, permutation_sign) = lu a
  -- formerly u.i.i * l.i.i
  diags = for i. u.i.(0@_) * l.i.((ordinal i)@_)
  sign = permutation_sign * prod for i. sign diags.i
  sum_of_log_abs = sum for i. log (abs diags.i) 
  (sign, sum_of_log_abs)


'### Numerical Tests

-- Check that the inverse of the inverse is identity.
mat = [[11.,9.,24.,2.],[1.,5.,2.,6.],[3.,17.,18.,1.],[2.,5.,7.,1.]]
:p mat ~~ (invert (invert mat))
> True

-- Check that solving gives the inverse.
v = [1., 2., 3., 4.]
:p v ~~ (mat **. (solve mat v))
> True

-- Check that det and exp(logdet) are the same.
(s, logdet) = sign_and_log_determinant mat
:p (determinant mat) ~~ (s * (exp logdet))
> True

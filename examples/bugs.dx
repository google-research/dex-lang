-- we don't do let generalization on patterns, but this is a problem if
-- generalization is required. This fails:
(f, g) = (lam x. x, lam x. x)


-- printing of tuple-index tables not implemented
x = [1,2,3]
:p for (i,j). iadd x.i x.j


-- out-of-bounds indexing - need to wrap indices
:p let litArr = [10, 5, 3]
   in litArr.(asidx 4)
> 5

-- polymorphic declarations without explicit types crash the compiler
-- (should be a straightforward error message)
f x = x

-- apparently we're treating unbound type aliases as things to infer
x : N
x = 1

-- need a type class constrain for index sets so that this is an error
:t for i:Int. 1

-- Bad error message because we lose provenance of the constraint
:t lam x.
  z = iadd x 1
  y = fadd x 1.0
  (z, y)
> Type error:
> Expected: Int
>   Actual: Float
> In: From subst


data IntFloat =
  MkIntFloat Int Float

:p
  case MkIntFloat 1 2.3 of
    MkIntFloat x y -> (x, y)
> (1, 2.3)

data MyPair a:Type b:Type =
   MkMyPair a b

z = MkMyPair 1 2.3

:p z
> MkMyPair 1 2.3

:t z
> (MyPair Int Float)

:p
  case z of
    MkMyPair x y -> (x, y)
> (1, 2.3)

data Dual a:Type =
   MkDual a a

:p
  d = MkDual 1 2
  case d of
    MkDual x y -> (x, y)
> (1, 2)

:p for i:(Fin 3). MkMyPair (ordinal i) (ordinal i + 1)
> [MkMyPair 0 1, MkMyPair 1 2, MkMyPair 2 3]

zz = MkMyPair 1 (MkMyPair True 2.3)

(MkMyPair z1 (MkMyPair z2 z3)) = zz

:p (z1, z2, z3)
> (1, (True, 2.3))

:p
  tabOfPairs = for i:(Fin 3). MkMyPair (ordinal i) (ordinal i + 1)
  for i.
   case tabOfPairs.i of
     -- TODO: investigate shadowing bug if we call these a and b
     MkMyPair x y -> (x + y, y)
> [(1, 1), (3, 2), (5, 3)]

data MyEither a:Type b:Type =
  MyLeft  a
  MyRight b

x : MyEither Int Float = MyLeft 1

:p x
> MyLeft 1

:p
  (MyLeft x') = x
  x
> Type error:sum type constructor in can't-fail pattern
>
>   (MyLeft x') = x
>    ^^^^^^^^^

:p
  case x of
    MyLeft  val -> val
    MyRight val -> FToI $ floor val
> 1

-- %passes imp
myTab = [MyLeft 1, MyRight 3.5, MyLeft 123, MyLeft 456]

:p myTab
> [(MyLeft 1), (MyRight 3.5), (MyLeft 123), (MyLeft 456)]

:p for i. case myTab.i of
  MyLeft  val -> val
  MyRight val -> FToI $ floor val
> [1, 3, 123, 456]

-- check order independence
:p for i. case myTab.i of
  MyRight val -> FToI $ floor val
  MyLeft  val -> val
> [1, 3, 123, 456]

-- test non-exhaustive patterns
:p for i. case myTab.i of
  MyLeft  val -> val
> Runtime error

:p for i. case myTab.i of
  MyLeft  val -> val
  MyRight _   -> todo
> Runtime error

:p
  snd $ withAccum \ref.
    for i. case myTab.i of
      MyLeft tmp -> ()
      MyRight val -> ref += 1.0 + val
> 4.5

:p
  -- check that the order of the case alternatives doesn't matter
  snd $ withAccum \ref.
    for i. case myTab.i of
      MyRight val -> ref += 1.0 + val
      MyLeft tmp -> ()
> 4.5

data ThreeCases =
  TheEmptyCase
  TheIntCase Int
  ThePairCase Int Float

threeCaseTab : (Fin 4)=>ThreeCases =
  [TheIntCase 3, TheEmptyCase, ThePairCase 2 0.1, TheEmptyCase]

:p threeCaseTab
> [(TheIntCase 3), TheEmptyCase, (ThePairCase 2 0.1), TheEmptyCase]

:p
  snd $ withAccum \ref.
    for i. case threeCaseTab.i of
      TheEmptyCase    -> ref += 1000.0
      ThePairCase x y -> ref +=  100.0 + y + IToF x
      TheIntCase x    -> ref +=   10.0 + IToF (x * 2)
> 2118.1

data MyIntish = MkIntish Int

:p case MkIntish 1 of MkIntish x -> x
> 1


:p
  f : MyPair Int Float -> Int =
    \(MkMyPair x y). x + (FToI $ floor y)
  f (MkMyPair 1 2.3)
> 3

:p
  pairs = [MkMyPair 2 z,  MkMyPair 2 (MkMyPair 4 3.4)]
  for i.
    (MkMyPair x (MkMyPair y z)) = pairs.i
    x + y + (FToI $ floor z)
> [5, 9]

:p
  xs = [MyLeft 1.0, MyLeft 2.0, MyRight (MkMyPair 3 4.0)]
  for i. case xs.i of
    MyLeft x -> (FToI $ floor x)
    MyRight (MkMyPair x y) -> x + (FToI $ floor y)
> [1, 2, 7]

xsList = AsList _ [1,2,3]

:p
  (AsList _ xsTab) = xsList
  sum xsTab
> 6

(AsList _ xsTab) = xsList

:p xsTab
> [1, 2, 3]

:p
  xs = AsList _ [1,2,3]
  ys = AsList _ [4,5]
  (AsList _ ans) = xs <> ys
  sum ans
> 15

' # Particle Swarm Optimizer

' ## Fitness function

rosenbrock:: Real -> Real -> Real
rosenbrock x y = sq (1.0 - x) + 10000.0*sq (y - x*x) 


' We write one that uses vector for input

rosenbrock2:: (2=>Real) -> Real
rosenbrock2 xs =
  x = xs.(asidx 0)
  y = xs.(asidx 1)
  rosenbrock x y


' Min should be at 1.0, 1.0

:p rosenbrock 1.0 1.000

:p rosenbrock2 [1.0, 1.000]

:p rosenbrock 1.0 1.02

:p rosenbrock2 [1.0, 1.02]



' ## Helper functions

' make a random vector unifornly distrubuted between lb and ub

randBounded:: Key -> (d=>Real)->(d=>Real)->(d=>Real)
randBounded key lb ub =
    for i. lb.i + ((rand $ ixkey key i) * (ub.i - lb.i))

randBounded (newKey 4) [1.0,  -2.0] [-1.0,  2.0]

' minby and minimumby
' to find the smallest values

minby:: A a::Data. (a->Real)->a->a->a
minby f x y = [x,y].(asidx $ b2i $ (f x) > (f y))

minby sq -1.0 0.5
minby fst (0.7, 1000.0) (3.0, 12.0)


minimumby:: A p q::Data. (q->Real)->(p=>q)->q
minimumby f xs = fold xs.(asidx 0) (for i. minby f xs.i)

minimumby sq [-1.0, -0.1, 2.0, 3.0]


' ## The Optimizer itself.
### TODO:
 - Replace `res = optStep inits` with `res = fold inits (for iter::200. optStep)`
 - workout how to pass `nparticles` and `niters` in as a variable
     - Currrently hardcoded as 1000 and 200 respectively
 - workout more compact way to define type sig



optimize:: Key->((d=>Real)->Real) -> (d=>Real,d=>Real) -> (Real,Real,Real) -> (d=>Real)
optimize key f (lb,ub) (momentum,gRate,pRate) =
    optStep (keyL, gbest, pbests,positions,velocities) =
        (keyG, keyP, keyNext) = splitKey3 keyL
        gWeight::Real = gRate * rand keyG
        pWeight::Real = pRate * rand keyP
        (gscore, gloc) = gbest
        plocs = map snd pbests
        gDirs::(1000=>d=>Real) = for p i. gloc.i - positions.p.i
        pDirs::(1000=>d=>Real) = for p i. plocs.p.i - positions.p.i
        newVelocities::(1000=>d=>Real) = for p i. momentum*velocities.p.i + gWeight*gDirs.p.i + pWeight*gDirs.p.i
        newPositions::(1000=>d=>Real) = for p i. positions.p.i + velocities.p.i
        newPbests::(1000=>(Real, d=>Real)) = for p. minby fst pbests.p (f newPositions.p, newPositions.p)
        newGbest::(Real, d=>Real) = minby fst gbest (minimumby fst newPbests)
        (keyNext,newGbest,newPbests,newPositions,newVelocities)
    randInit1 keyI1 = randBounded keyI1 lb ub
    randInit keyI = for p::1000. randInit1 $ ixkey keyI p
    (keyPos, keyVel, keyLoop) = splitKey3 key
    initPositions::(1000=>d=>Real) = randInit keyPos
    initVelocities::(1000=>d=>Real) = randInit keyVel
    initPs::(1000=>(Real, d=>Real)) = for p. (f initPositions.p, initPositions.p) 
    initG::(Real, d=>Real) = minimumby fst initPs
    inits = (keyLoop,initG,initPs,initPositions,initVelocities)
    res = optStep inits
    (dc0,(finalGscore, finalGloc),dc1,dc2,dc3) = res
    finalGloc

:p optimize (newKey 1) rosenbrock2 ([-1.0, -1.0],[2.0, 2.0]) (0.2,0.3,0.4)




' ---
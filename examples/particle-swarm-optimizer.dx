' # Particle Swarm Optimizer

' ## Fitness function

rosenbrock:: Real -> Real -> Real
rosenbrock x y = sq (1.0 - x) + 80.0*sq (y - x*x)


' We write one that uses vector for input

rosenbrock2:: (2=>Real) -> Real
rosenbrock2 xs =
  x = xs.(0@2)
  y = xs.(1@2)
  rosenbrock x y

' Min should be at 1.0, 1.0

:p rosenbrock 1.0 1.000
> 0.0

:p rosenbrock2 [1.0, 1.000]
> 0.0

:p rosenbrock 1.0 1.02
> 3.2e-2

:p rosenbrock2 [1.0, 1.02]
> 3.2e-2


' ## Helper functions

minbyfst:: A a::Data. (Real, a)->(Real, a)->(Real, a)
minbyfst = minby (asNonLin fst)

minimumbyfst:: A n a::Data. (n=>(Real, a))->(Real, a)
minimumbyfst = minimumby (asNonLin fst)

' ### Rand helpers

' make a random vector uniformly distributed between `lb` and `ub`

randBounded:: Key -> (d=>Real)->(d=>Real)->(d=>Real)
randBounded key lb ub =
    for i. lb.i + ((rand $ ixkey key i) * (ub.i - lb.i))

:p randBounded (newKey 4) [1.0,  -2.0] [-1.0,  2.0]
> [-0.3510105, 1.4935503]



' ## The Optimizer itself.
We have **arguments**:
 - type explicit, `np::Ix`: number of particles
 - type explicit, `niter::Ix`: number of iterations
 - type: `d::Ix`: number of dimensions in the domain of `f`, i.e. the search space.
 - `f::(d=>Real)->Real`: loss function being minimized.
 - `(lb,ub)::(d=>Real,d=>Real)`: boundries of the space being searched
 - `(momentum,gRate,pRate)::(Real,Real,Real)`: PSO hyper-parameters to control exploration vs exploitation.

' **Returns**: the optimal point found with-in the bounds on the input domain of `f`.

optimize:: A np::Ix niter::Ix d::Ix. Key->((d=>Real)->Real) -> (d=>Real,d=>Real) -> (Real,Real,Real) -> (d=>Real)
optimize key f (lb,ub) (momentum,gRate,pRate) =
    optStep (keyL, gbest, pbests, positions, velocities) =       
        newPositions::(np=>d=>Real) = for p i.
            positions.p.i + velocities.p.i
        newPbests::(np=>(Real, d=>Real)) = for p.
            minbyfst pbests.p (f newPositions.p, newPositions.p)
        newGbest::(Real, d=>Real) =
            minbyfst gbest (minimumbyfst newPbests)
        (keyG, keyP, keyNext) = splitKey3 keyL
        (gscore, gloc) = gbest
        plocs = map (asNonLin snd) pbests
        gVel::(np=>d=>Real) = for p i.
            weight = rand $ (ixkey2 keyG p i)
            dir = gloc.i - positions.p.i
            weight * dir
        pVel::(np=>d=>Real) = for p i.
            weight = rand $ (ixkey2 keyP p i)
            dir = plocs.p.i - positions.p.i
            weight * dir
        newVelocities::(np=>d=>Real) = for p i.
            momentum*velocities.p.i + gRate*gVel.p.i + pRate*gVel.p.i
        (keyNext,newGbest,newPbests,newPositions,newVelocities)
    randInit1 keyI1 = randBounded keyI1 lb ub
    randInit keyI = for p::np. randInit1 $ ixkey keyI p
    (keyPos, keyVel, keyLoop) = splitKey3 key
    initPositions::(np=>d=>Real) = randInit keyPos
    initVelocities::(np=>d=>Real) = randInit keyVel
    initPs::(np=>(Real, d=>Real)) = for p. (f initPositions.p, initPositions.p)
    initG::(Real, d=>Real) = minimumbyfst initPs
    inits = (keyLoop,initG,initPs,initPositions,initVelocities)
    res = fold inits (lam iter::niter. optStep)
    (dc0,(finalGscore, finalGloc),dc1,dc2,dc3) = res
    finalGloc

' ---
Lets see how it goes.
Run it for more iterations and result should improve.
Which it indeed does.

:p (optimize 
    @50  -- number of particles
    @10  -- number of iterations
    (newKey 0)  -- random seed
    rosenbrock2  -- function to optimize
    ([-10.0, -10.0],[20.0, 20.0])  -- bounds
    (0.5,0.3,0.4)  -- momentum/pRate/gRate
)
> [3.7902775, 14.911414]


:p (optimize 
    @50  -- number of particles
    @20  -- number of iterations
    (newKey 0)  -- random seed
    rosenbrock2  -- function to optimize
    ([-10.0, -10.0],[20.0, 20.0])  -- bounds
    (0.5,0.3,0.4) -- momentum/pRate/gRate
)
> [1.737736, 3.1227164]

:p (optimize 
    @50  -- number of particles
    @100  -- number of iterations
    (newKey 0)  -- random seed
    rosenbrock2  -- function to optimize
    ([-10.0, -10.0],[20.0, 20.0])  -- bounds
    (0.5,0.3,0.4) -- momentum/pRate/gRate
)
> [1.0062338, 1.0128839]

:p (optimize 
    @50  -- number of particles
    @1000  -- number of iterations
    (newKey 0)  -- random seed
    rosenbrock2  -- function to optimize
    ([-10.0, -10.0],[20.0, 20.0])  -- bounds
    (0.5,0.3,0.4) -- momentum/pRate/gRate
)
> [1.0, 1.0]

' ---


' ## Gradients on manifolds
An example of how to generalize the Dex `linearize` and `grad` functions to take
derivatives and gradients of functions on manifolds.

' ### Tangent space
The difference between differentiating on $\mathbb{R}^n$ and on general
manifolds is that in the general case, the manifold tangent space type may be
different to the manifold representation type. The tangent space at a single
point will always be isomorphic to $\mathbb{R}^n$ for some $n$, but here we
allow any vector space type `b` for flexibility.

' The proper definition of a tangent space is quite abstract, so no further details will be provided here. Wikipedia has quite a good
[article](https://en.wikipedia.org/wiki/Tangent_space) for more information.

' Practically, the two components required for defining the differentiable
structure on the manifold are the exponential map (a mapping from the tangent
space at p to the manifold, such that zero is mapped to $p$, and straight lines
are mapped to geodesics), and its inverse. Note that "exponential map" is a
somewhat overloaded term, here we are talking about it in a Riemannian geometry
sense.

' In the `TangentSpace` interface, `manifold` is the type which can represent points
on the manifold. `tangent` is the type which can represent points in a tangent space
to the manifold.  Ideally `tangent` would be an associated type of `manifold` so that the
compiler is able to infer the tangent space type from the manifold type, but
this feature is not yet available in Dex.

interface [VSpace tangent] TangentSpace manifold tangent
  -- Given a point p on the manifold M and a point v in its tangent space TpM,
  -- this returns another point q on the manifold.
  -- Must satisfy tangentExponentialMap p zero == p
  -- (tangentExponentialMap p) will be linearized around zero, so it is
  -- important that any operations used have well-defined derivatives for inputs
  -- p, zero.
  tangentExponentialMap: manifold -> tangent -> manifold
  -- (tangentLogarithmMap p) is the pointwise inverse to
  -- (tangentExponentialMap p).
  -- Must satisfy tangentLogarithmMap p p == zero
  -- (tangentLogarithmMap p) will be linearized around p, so it is important
  -- that any operations used have well-defined derivatives for inputs p, p.
  tangentLogarithmMap: manifold -> manifold -> tangent


'### Differentiation functions

'We can then define a version of the Dex `linearize` function which works on
manifolds.  To see intuitively why this works, consider the following diagram.
We would like to obtain a linearized version of the function "across the top" of
the diagram, and we can form this by linearizing the function formed from the
bottom three sides of the square.

:html
   "<img
     src=\"https://user-images.githubusercontent.com/33986545/122416078-5a23ef00-cf80-11eb-83d5-d0d5986e8d20.png\"
     width=\"100%\">"
> <html output>

def manifoldLinearize
    {manifoldA tangentA manifoldB tangentB}
    [TangentSpace manifoldA tangentA, TangentSpace manifoldB tangentB, Add tangentA]
    (f: manifoldA -> manifoldB) (x: manifoldA) :
    (manifoldB & tangentA --o tangentB) =
  y = f x
  tangentSpaceMapping : tangentA -> tangentB =
    \ v . tangentLogarithmMap y $ f $ tangentExponentialMap x v
  rawLinearize = linearize tangentSpaceMapping zero
  (y, snd rawLinearize)

' A full proof that this is in fact a correct formulation is a bit more
involved, so we leave it out here. The general idea is to use the differentiable
curves formulation of the tangent space, and to treat the tangent space at a
point $x$ as both the tangent space, and as a local chart.

' Before we can define `grad` for manifolds, we need to create the trivial
instance of a TangentSpace for vector spaces. In this case, we view the tangent
space at $x$ to be just a copy of the vector space, centred on $x$.

instance {a} [VSpace a] TangentSpace a a
  tangentExponentialMap = \ p v . p + v
  tangentLogarithmMap = \ p q . q - p

' Now we can define a version of the Dex `grad` function which works on
manifolds.

def manifoldGrad
  {manifoldA tangentA}
  [TangentSpace manifoldA tangentA, VSpace tangentA]
  (f: manifoldA -> Float) (x: manifoldA) : tangentA =
  linearized: (Float & (tangentA --o Float)) = manifoldLinearize f x
  transpose_linear (snd linearized) 1.0


' ### Equivalence to standard differentiation
As a sense check we make sure that these functions give the same output as the
non-manifold versions on functions which are defined on $\mathbb{R}^n$.

x = for i:(Fin 10). n_to_f (ordinal i) / 10.

def myFunc {n} (x : (n => Float)) : Float =
  sum $ for i. if (mod (ordinal i) 2 == 0) then (exp x.i) else (sin x.i)

original = linearize myFunc x
-- Need to explicitly set up the types here, due to missing associated types.
new : (Float & ((Fin 10 => Float) --o Float)) = manifoldLinearize myFunc x

fst original ~~ fst new
> True

snd original x ~~ snd new x
> True


' ### Simple example: Circle
For a simple demonstration of this framework, consider the manifold $S^1$, i.e.
the circle. This can be defined as the set of points in $\mathbb{R}^2$ at unit
distance from the origin:
$S^1 = \lbrace \(x, y\) \in \mathbb{R}^2 : x^2 + y^2 = 1 \rbrace $.
The metric can be induced from $\mathbb{R}^2$.

' The standard 1-dimensional parameterization of the circle uses an angle
$\theta$ to parameterize it, using the map
$\theta \mapsto (\cos \theta, \sin \theta),\ \theta \in [0, 2\pi)$.
This has nice properties, in particular it "preserves the metric", in the sense
that increasing $\theta$ by $\Delta \theta$ moves a distance of $\Delta \theta$
along the circle. However, the problem is that the inverse of this map has a
discontinuity, jumping from $2 \pi$ to $0$ once a full rotation is completed, so
we can't use it to globally identify $S^1$ with $[0, 2\pi) \subset \mathbb{R}$.

' However, we can use the tangent space formalism to locally identify a subset
of the circle with a subset of $\mathbb{R}$, which allows us to view derivatives
of maps on $S^1$ as acting on $\mathbb{R}$.

' First we define a data structure to represent a point on $S^1$.

data S1 = S {x: Float & y: Float}

' To make things simpler numerically, we will say that `x` and `y` can take any
values, as long as they are not both zero, and we will identify `S{x, y}` with
the point $(x, y)$ on $S^1$ given by normalizing the associated element of
$\mathbb{R}^2$, that is $x$ = `x / sqrt(x*x + y*y)`, $y$ = `y / sqrt(x*x + y*y)`.

-- Normalizes an S1 instance. Note this doesn't modify the point on the circle
-- which it represents.
def s1Normalize (S{x, y}: S1) : S1 =
  magnitude = sqrt $ x * x + y * y
  (S{x = x / magnitude, y = y / magnitude})


' Now we need to define the tangent space operations. First consider the
exponential map. We will take the tangent space at a point $p = (x_0, y_0)$ to
be the $\theta$ space as described above, but offset such that $\theta = 0$ is
mapped to $p$, to satisfy the condition that `tangentExponentialMap p zero == p`.
This means that for some $\theta_0$, the exponential map is
$\theta \mapsto (\cos (\theta_0 + \theta), \sin (\theta_0 + \theta))$, and
$x = \cos \theta_0, y = \sin \theta_0$.

' As discussed previously, though, calculating $\theta_0$ from $(x_0, y_0)$
could lead to discontinuities, if we're not careful. But in this case, we can
use trigonometric identities to calculate the exponential map without requiring
the value of $\theta_0$ at all.

' $(\cos (\theta_0 + \theta), \sin (\theta_0 + \theta))$

' $ = (\cos \theta_0 \cos \theta - \sin \theta_0 \sin \theta,
       \sin \theta_0 \cos \theta + \cos \theta_0 \sin \theta)$

' $ = (x \cos \theta - y \sin \theta, y \cos \theta + x \sin \theta)$


' For the inverse of this, we could just write out the equations and try and
invert them, or we can consider that for two points $(x, y)$ and $(s, t)$ on the
unit circle, the angle $\theta$ between them (equal to the distance between then
*on the circle*) is given by the cosine rule and the Euclidean distance $d$
between them: $\cos \theta = (1 - d^2) / 2$.

' Now we can define the tangent space structure on `S1`. There is no arccos
function in Dex so we copy the numerical approximation from `quaterions.dx`.

-- source: https://developer.nvidia.com/cg-toolkit
def acos (x:Float) : Float =
  negate = select (x < 0.0) 1.0 0.0
  x = abs x
  ret1 = (-0.0187293 * x) + 0.0742610
  ret2 = (ret1 * x) - 0.2121144
  ret3 = (ret2 * x) + pi / 2.
  ret4 = (ret3 * (sqrt (1.0-x)))
  ret5 = ret4 - (2.0 * negate * ret4)
  negate * pi + ret5

instance TangentSpace S1 Float
  tangentExponentialMap = \ (S{x=x, y=y}) theta.
    (S{x=xn, y=yn}) = s1Normalize (S{x=x, y=y})
    S{x = xn * cos theta - yn * sin theta,
      y = yn * cos theta + xn * sin theta}
  tangentLogarithmMap = \ (S{x=x, y=y}) (S{x=s, y=t}).
    (S{x=xn, y=yn}) = s1Normalize (S{x=x, y=y})
    (S{x=sn, y=tn}) = s1Normalize (S{x=s, y=t})
    dSquared = (xn - sn) * (xn - sn) + (yn - tn) * (yn - tn)
    -- Check if we're using positive or negative inverse cos solution.
    -- This is done by considering the sign of the cross product of the two
    -- points in 3D space.
    negate = select ((xn * tn - sn * yn) > 0.) 1.0 (-1.0)
    negate * (acos $ (1. - dSquared / 2.))

' Check that the tangent and logarithm are actually inverse to one another:

-- Convenience function to help check for equality.
def s1ToR2 (S{x=x, y=y}: S1) : (Fin 2 => Float) =
  [x, y]

-- Two arbitrary points on the circle, not normalized.
circlePointOne = S{x=3.4, y=0.2}
circlePointTwo = S{x= -1.0, y=1.8}

-- Applying tangent mappings at circlePointTwo, to circlePointOne
intermediateLog: Float = tangentLogarithmMap circlePointTwo circlePointOne
roundTrip = tangentExponentialMap circlePointTwo intermediateLog

(s1ToR2 $ s1Normalize roundTrip) ~~ (s1ToR2 $ s1Normalize circlePointOne)
> True


' Now we can take gradients of maps on a circle. Consider a function which takes
$(x, y) \mapsto x$. In $\theta$ space, this is equivalent to
$\theta \mapsto \cos \theta$, so should have gradient given by
$- \sin \theta = -y$.

def getX (S{x=x, y=y}: S1) : Float = x

-- Make types explicit
s1ManifoldGrad : (S1 -> Float) -> S1 -> Float = manifoldGrad

s1ManifoldGrad getX (S{x=0., y=1.}) ~~ -1.
> True
s1ManifoldGrad getX (S{x=1., y=0.}) ~~ 0.
> True
s1ManifoldGrad getX (S{x=sqrt 0.5, y=sqrt 0.5}) ~~ - (sqrt 0.5)
> True


' ### Further example: Quaternions
For a more complex use-case, we consider the SO3 manifold of 3D rotations, with
the usual 4D quaternion representation. Again, the full definition of
quaternions has a few subtleties, but a simple intuition is that a rotation by
an angle $\theta$ about a unit-length axis $(u, v, w)$ is represented by the
quaternion $ cos(\theta / 2) + \bold{i}\ u\ sin(\theta / 2) + \bold{j}\ v\ sin(\theta / 2) + \bold{k}\ w\ sin(\theta / 2)$.
The components of a quaternion are often labelled $w$ for the real component,
$x$ for the $\bold{i}$ component, $y$ for the $\bold{j}$ component and $z$ for
the $\bold{k}$ component.

' Generally we use unit quaternions, i.e. those where
$x^2 + y^2 + z^2 + w^2 = 1$, but like for the $S^1$ example above, any non-zero
quaternion can also be considered as a valid rotation by defining scalar
multiples of the same quaternion to represent the same rotation.

' We re-use the data structures and some of the functions from the
`quaternions.dx` example.

data Quaternion = Q {x:Float & y:Float & z:Float & w:Float}

-- Conversion functions from a quaternion to an array of four components.
def quatAsVec (Q{x, y, z, w}: Quaternion) : (Fin 4 => Float) = [x, y, z, w]
def quatFromVec ([x, y, z, w]: Fin 4 => Float) : Quaternion = Q{x, y, z, w}

-- General normalization functions for arrays.
def squareMagnitude {a} (x:a=>Float) : Float = sum $ for i. x.i * x.i
def magnitude {a} (x:a=>Float) : Float = sqrt $ squareMagnitude x
def normalize {a} (x:a=>Float) : a=> Float = (1.0 / (magnitude x)) .* x

-- Normalization for quaternions.
def quatNormalize (q: Quaternion) : Quaternion =
  quatFromVec $ normalize $ quatAsVec q

-- The identity quaternion, representing a no-op rotation.
quatIdent = Q{x=0.0, y=0.0, z=0.0, w=1.0}

instance Add Quaternion
  add = \ x y. quatFromVec $ (quatAsVec x) + quatAsVec y
  zero = quatFromVec $ zero

instance Sub Quaternion
  sub = \ x y. quatFromVec $ (quatAsVec x) - quatAsVec y

' Scaling a quaternion does not affect the rotation it represents, but is still
useful for numerical computations.

instance VSpace Quaternion
  scale_vec = \ s x. quatFromVec (s .* quatAsVec x)

instance HasAllClose Quaternion
  allclose = \atol rtol a b.
    allclose (quatAsVec atol) (quatAsVec rtol) (quatAsVec a) (quatAsVec b)

instance HasDefaultTolerance Quaternion
  atol = quatFromVec atol
  rtol = quatFromVec rtol

' Quaternion multiplication is composition of rotations. This formula can be
derived from the relations that $ij = k$, $ji = -k$, $jk = i$, $kj = -i$,
$ki = j$, $ik = -j$, $i^2 = j^2 = k^2 = -1$. These can also be used to derive
the given expression for the quaternion inverse.

instance Mul Quaternion
  mul = \ (Q{x,y,z,w}) (Q{x=x',y=y',z=z',w=w'}). Q {
        x = w*x' + x*w' + y*z' - z*y',
        y = w*y' - x*z' + y*w' + z*x',
        z = w*z' + x*y' - y*x' + z*w',
        w = w*w' - x*x' - y*y' - z*z'
  }
  one = quatIdent

def quatConj ((Q {x, y, z, w}):Quaternion) : Quaternion =
  Q {x = -x, y = -y, z = -z, w = w}

def quatInv (q:Quaternion) : Quaternion =
  m = magnitude $ quatAsVec q
  1.0 / (m * m) .* quatConj q

instance Monoid Quaternion
  mempty = one
  mcombine = \a b. a * b


'### Quaternions manifold structure

' We now define the exponential and logarithm map for the quaternions. The
exponential map at the identity is the well-known mapping from axis-angle to
quaternions.  Away from the identity, we can use the fact that SO3 is a Lie
group to transport the exponential map at the identity to the appropriate
tangent space, by using simple right-multiplication by $q$ to associate the
two tangent spaces.

' Since we need to ensure that the exponential function is differentiable at
zero (and similar for the logarithm), we can't use standard formulations of
functions such as `sinc x = (sin x) / x` or
`magnitude x = sqrt $ sum (for i. x.i * x.i)`. To get around this, we use some
simple Taylor series expansions, noting that this will cause reduced precision,
and running autodiff on the resulting linearizations may be inefficient.
Taking higher-order deriviatives will also lose further precision as the number
of approximation terms will be reduced by each successive differentiation.

-- Convenience alias for an array of three floats.
R3 = (Fin 3 => Float)

-- Taylor expansion for sinc (sqrt x).
def sincSqrt (x : Float) : Float =
 (1.
  - (x  / 6.)
  + (x * x / 120.)
  - (x * x * x / 5040.)
  + (x * x * x * x / 362880.)
  - (x * x * x * x * x/ 39916800.)
  + (x * x * x * x * x *  x / 6227020800.))

-- Taylor expansion for cos (sqrt x).
def cosSqrt (x: Float) : Float =
  (1.
   - (x / 2.)
   + (x * x / 24.)
   - (x * x * x / 720.)
   + (x * x * x * x / 40320.)
   - (x * x * x * x * x / 3628800.)
   + (x * x * x * x * x * x / 479001600.))

-- Taylor expansion for sinc (arccos x)
def sincAcos (x: Float) : Float =
  (2. / pi
   + x * 4. / (pow pi 2.)
   + x * x * (8. - pow pi 2.) / (pow pi 3.)
   - x * x * x * 4. * (pow pi 2. - 12.) / (3. * pow pi 4.)
   + x * x * x * x * (384. - 16. * pow pi 2. - 3. * pow pi 4.) / (12. * pow pi 5.)
   - x * x * x * x * x * 8. * (pow pi 4. - 120.) / (15. * pow pi 6.))

-- Exponential function at the identity.
def quatExpAtIdent (v : R3) : Quaternion =
  [x', y', z'] = v
  m2 = squareMagnitude v
  -- This is equal to sinc (m / 2) = 2 * sin (m / 2) / m
  sincHalfM = sincSqrt $ m2 / 4.
  Q {x = x' * sincHalfM / 2.,
     y = y' * sincHalfM / 2.,
     z = z' * sincHalfM / 2.,
     w = cosSqrt $ m2 / 4. }

-- Inverse to exponential function at the identity.
def quatExpAtIdentInv (q: Quaternion) : R3 =
  -- Fine to use qNormalize here, since q should be approximately unit magnitude
  -- (or at least non-zero), so the sqrt operation can be differentiated.
  (Q{x, y, z, w}) = quatNormalize q
  2. .* [x, y, z] / (sincAcos w)


instance TangentSpace Quaternion R3
  tangentExponentialMap =
    \ q v . quatExpAtIdent v * q
  tangentLogarithmMap =
    \ q p . quatExpAtIdentInv (p * quatInv q)


' Run some simple checks to make sure that the exponential and logarithm maps
have the correct properties. Use a looser tolerance for numerical innaccuracies.

looseTolerance = 0.005
quatLooseTolerance = quatFromVec $ for i. looseTolerance
tangentLooseTolerance : R3 = for i. looseTolerance

-- Just arbitrary quaternions.
quatForTestOne = quatNormalize (Q{w =  1.0, x = 0.5, y = -0.2, z =  0.4})
quatForTestTwo = quatNormalize (Q{w = -0.4, x = 0.5, y =  0.8, z = -0.9})

allclose quatLooseTolerance rtol (quatExpAtIdent $ quatExpAtIdentInv quatForTestOne) (quatForTestOne)
> True

-- Same, but taking the logarithm and exponential at a non-identity point.
logOfQuatForTestOne : R3 = tangentLogarithmMap quatForTestTwo quatForTestOne
allclose quatLooseTolerance rtol (tangentExponentialMap quatForTestTwo logOfQuatForTestOne) quatForTestOne
> True

-- Should be equal to quatIdent
allclose quatLooseTolerance rtol (quatExpAtIdent $ quatExpAtIdentInv quatIdent) quatIdent
> True

-- Now the other way around
tangentVectorForTest = [0.1, -0.2, 0.3]

allclose tangentLooseTolerance rtol (quatExpAtIdentInv $ quatExpAtIdent tangentVectorForTest) tangentVectorForTest
> True

expOfTangentVectorForTest : Quaternion = tangentExponentialMap quatForTestOne tangentVectorForTest
roundTripTangentVectorForTest : R3 =
  tangentLogarithmMap quatForTestOne expOfTangentVectorForTest
allclose tangentLooseTolerance rtol roundTripTangentVectorForTest tangentVectorForTest
> True


' To check the exponential map is doing what we think, take some arbitrary
initial rotation, and consider applying a small perturbation by some axis angle.
We can do this in two ways, which should give the same result:

'1: Applying the exponential map directly:

initialRotation = quatNormalize $ quatFromVec [0.2, 0.4, -0.35, 0.7]
perturbation = [0.01, -0.07, 0.04]

perturbedRotationDirect = tangentExponentialMap initialRotation perturbation

'2: Composing the initial rotatation with the quaternion associated to the
axis-angle perturbation, i.e. the result of applying the exponential map at the
identity to the perturbation. Note the ordering of the multiplication, which
comes from our choice of right-multiplication to associate the tangent spaces.

perturbedRotationComposed =
  (tangentExponentialMap quatIdent perturbation) * initialRotation

allclose quatLooseTolerance rtol perturbedRotationDirect perturbedRotationComposed
> True


' Now we can test the linearization and gradient functions.

-- A function to get the Euler-angle roll from a quaternion.
def quatRoll (Q{x, y, z, w} : Quaternion) : Float =
  sinrCosp = 2. * (w * x + y * z)
  cosrCosp = 1. - 2. * (x * x + y * y)
  atan2 sinrCosp cosrCosp

-- A fixed quaternion with roll = 0.5.
quatSomeRoll = Q{x=0.247, y=0., z=0., w=0.969}
quatRoll quatSomeRoll
> 0.49916

-- A function to compose a given quaternion with fixed rotation.
def quatAddSomeRoll (q: Quaternion) : Quaternion = q * quatSomeRoll

' According to our right-multiplication definition of the tangent space mappings,
the linearized version of `quatAddSomeRoll` should just be the identity map
between tangent spaces.

linearInput = [0.05, 0.1, 0.15]
quatAddSomeRollLinearized: R3 --o R3 =
  snd $ manifoldLinearize quatAddSomeRoll quatForTestOne
allclose tangentLooseTolerance rtol (quatAddSomeRollLinearized linearInput) linearInput
> True


' Try taking the gradient of the `quatRoll` function, at various points.

-- Without associated types we have to define this, otherwise we get ambiguous
-- type variables.
def quatGrad (f: Quaternion -> Float) (x: Quaternion) : R3 = manifoldGrad f x

-- Applying the gradient at a quaternion representing a "pure roll" rotation, we
-- see that the only way to modify the roll is by adding further rotation in the
-- roll direction.
quatGrad quatRoll quatSomeRoll
> [0.999973, 0., 0.]


-- However, at other points, we can also modify the roll of the rotation by
-- moving in pitch and/or yaw directions. This demonstrates that the Euler
-- angles are not independent.
quatGrad quatRoll quatForTestOne
> [1.041025, 0.594871, 0.]

quatGrad quatRoll quatForTestTwo
> [-0.570283, 0.83349, -0.]

'# Markov Chain Monte Carlo

'## General MCMC utilities

import plot

LogProb : Type = Float

def runChain(
    initialize: (Key) -> a,
    step:       (Key, a) -> a,
    numSamples: Nat,
    k:Key
    ) -> Fin numSamples => a  given (a|Data) =
  [k1, k2] = split_key k
  with_state (initialize k1) \s.
    for i:(Fin numSamples).
      x = step (ixkey k2 i) (get s)
      s := x
      x

def propose(
    logDensity: (a) -> LogProb,
    cur:        a,
    proposal:   a,
    k:          Key
    ) -> a given (a) =
  accept = logDensity proposal > (logDensity cur + log (rand k))
  select accept proposal cur

def meanAndCovariance(xs:n=>d=>Float) -> (d=>Float, d=>d=>Float) given (n|Ix, d|Ix) =
   xsMean :    d=>Float = (for i. sum for j. xs[j,i]) / n_to_f (size n)
   xsCov  : d=>d=>Float = (for i i'. sum for j.
                           (xs[j,i'] - xsMean[i']) *
                           (xs[j,i ] - xsMean[i ])   ) / (n_to_f (size n) - 1)
   (xsMean, xsCov)

'## Metropolis-Hastings implementation

MHParams : Type = Float  -- step size

def mhStep(
    stepSize: MHParams,
    logProb: (d=>Float) -> LogProb,
    k:Key,
    x:d=>Float
    ) -> d=>Float given (d|Ix) =
  [k1, k2] = split_key k
  proposal = x + stepSize .* randn_vec k1
  propose logProb x proposal k2

'## HMC implementation

struct HMCParams =
  nsteps : Nat
  dt     : Float

struct HMCState(a|VSpace) =
  x: a
  p: a

def leapfrogIntegrate(
    params:  HMCParams,
    logProb: (a) -> LogProb,
    init:    HMCState a
    ) -> HMCState a given (a|VSpace) =
  x = init.x + (0.5 * params.dt) .* init.p
  final = apply_n params.nsteps HMCState(x, init.p) \old.
    pNew = old.p + params.dt .* grad logProb old.x
    xNew = old.x + params.dt .* pNew
    HMCState(xNew, pNew)
  p = final.p + (0.5 * params.dt) .* grad logProb final.x
  HMCState(final.x, p)

def hmcStep(
    params:  HMCParams,
    logProb: (d=>Float) -> LogProb,
    k:       Key,
    x:       d=>Float
    ) -> d=>Float given (d|Ix) =
  def hamiltonian(s:HMCState (d=>Float)) -> Float =
    logProb s.x - 0.5 * vdot s.p s.p
  [k1, k2] = split_key k
  p = randn_vec k1
  proposal = leapfrogIntegrate params logProb HMCState(x, p)
  final = propose hamiltonian HMCState(x, p) proposal k2
  final.x

'## Test it out

'Generate samples from a multivariate normal distribution N([1.5, 2.5], [[1., 0.], [0., 0.05]]).

def myLogProb(x:(Fin 2)=>Float) -> LogProb =
  x' = x - [1.5, 2.5]
  neg $ 0.5 * inner x' [[1.,0.],[0.,20.]] x'

numSamples : Nat =
  if dex_test_mode()
    then 1000
    else 10000
k0 = new_key 1

mhParams = 0.1
mhSamples  = runChain randn_vec (\k x. mhStep  mhParams myLogProb k x) numSamples k0

:p meanAndCovariance mhSamples
> ([0.5455918, 2.522631], [[0.3552593, 0.05022133], [0.05022133, 0.08734216]])

:html show_plot $ y_plot $
  slice (map head mhSamples) 0 (Fin 1000)
> <html output>

hmcParams = HMCParams(10, 0.1)
hmcSamples = runChain randn_vec (\k x. hmcStep hmcParams myLogProb k x) numSamples k0

:p meanAndCovariance hmcSamples
> ([1.472011, 2.483082], [[1.054705, -0.002082013], [-0.002082013, 0.05058844]])

:html show_plot $ y_plot $
  slice (map head hmcSamples) 0 (Fin 1000)
> <html output>

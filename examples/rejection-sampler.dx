
def rejectionSample (try: Key -> Maybe a) (k:Key) : a =
  ans = fst $ withState 0 \i.
    snd $ withState Nothing \sample.
      while (\(). isNothing (get sample)) \().
        i := get i + 1
        sample := try $ hash k (get i)
  case ans of Just sample -> sample

Prob    = Float
LogProb = Float

def binomialSample (n:Int) (p:Prob) (k:Key) : Int = todo

def logBinomialProb (n:Int) (p:Prob) (counts:Int) : LogProb =
  pSuccess = log p * IToF counts
  pFailure = log1p (-p) * IToF (n - counts)
  normConst = (lbeta (1. + IToF counts) (1. + IToF n - IToF counts) +
               log (1. + IToF n))
  pSuccess + pFailure - normConst

def binomialProb (n:Int) (p:Prob) (count:Int) : Prob =
  exp $ logBinomialProb n p count

def trySampleBinomial (n:Int) (p:Prob) (k:Key) : Maybe Int =
  (k1, k2) = splitKey k
  proposal = floor $ rand k1 * IToF (n + 1)
  acceptance = rand k2 < binomialProb n p proposal
  case proposal < (n + 1) && acceptance of
    True -> Just proposal
    False -> Nothing

:p randVec 10 (rejectionSample (trySampleBinomial 10 0.5)) (newKey 0)
> [4, 2, 5, 4, 6, 7, 3, 6, 6, 3]

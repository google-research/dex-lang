'# [Connectionist Temporal Classification](https://www.cs.toronto.edu/~graves/icml_2006.pdf)
By Alex Graves *et alia*, 2006.

'This algorithm computes the probability of a sequence of labels
(without pauses included) given another sequence of label probabilities
(with pauses included), marginalizing over all possible combination of
pause lengths.
It's used for training speech-to-text models on unaligned training data.

'Most implementations of CTC compute the log marginal likelihood
and its gradients through a separate forward and a backward pass.
However, Dex's autodiff can produce the backward
pass automatically.  That makes this code much shorter than
most implementations.

import stats  -- for log-space representation of probabilities.


'## Custom index sets

'### Fence and Posts
Here we create a custom datatype and index set
that interleaves the elements of a table with another set
of values representing all the spaces in between those elements.

data FenceAndPosts(n|Ix) =
  Fence(n)
  Posts(Post n)

instance Ix(FenceAndPosts n) given (n|Ix)
  def size'() = 2 * size n + 1
  def ordinal(i) = case i of
    Fence j -> 2 * ordinal j + 1
    Posts j -> 2 * ordinal j
  def unsafe_from_ordinal(o) =
    case is_odd o of
      True  -> Fence $ unsafe_from_ordinal (intdiv2 o)
      False -> Posts $ unsafe_from_ordinal (intdiv2 o)

instance NonEmpty(FenceAndPosts n) given (n|Ix)
  first_ix = unsafe_from_ordinal 0

instance Eq(FenceAndPosts a) given (a|Ix|Eq)
  def (==)(x, y) = case x of
    Fence x -> case y of
      Fence y -> x == y
      Posts y -> False
    Posts x -> case y of
      Fence y -> False
      Posts y -> ordinal x == ordinal y

'#### Test FenceAndPosts

all $ for i:(FenceAndPosts Bool).
  i == (unsafe_from_ordinal $ ordinal i)
> True


'### All but First
Next we make an index set from any non-empty set
that doesn't contain the first element.

struct AllButFirst(n|NonEmpty) =
  val : n

instance Ix(AllButFirst n) given (n|Ix|NonEmpty)
  def size'() = unsafe_nat_diff (size n) 1
  def ordinal(i) = ordinal i.val
  def unsafe_from_ordinal(o) = AllButFirst $ unsafe_from_ordinal o

instance Subset(AllButFirst a, a) given (a|NonEmpty)
  def inject'(x) = unsafe_from_ordinal ((ordinal x) + 1)
  def project'(x) = case ordinal x > 0 of
    True -> unsafe_from_ordinal (unsafe_nat_diff (ordinal x) 1)
    False -> Nothing
  def unsafe_project'(x) = unsafe_from_ordinal (unsafe_nat_diff (ordinal x) 1)

instance Eq(AllButFirst a) given (a|Eq|NonEmpty)
  def (==)(x, y) = x.val == y.val

'#### Test AllButFirst

all $ for i:(AllButFirst (() `Either` Fin 2)).
  i == (unsafe_from_ordinal $ ordinal i)
> True

all $ for i:(AllButFirst (Bool `Either` Bool)).
  Just i == (project $ inject(to=Bool `Either` Bool, i))
> True

all $ for i:(AllButFirst (Bool `Either` Bool)).
  i == (unsafe_project $ inject(to=Bool `Either` Bool, i))
> True

for i:(AllButFirst (Bool `Either` Bool)).
  inject(to=Bool `Either` Bool, i)
> [(Left True), (Right False), (Right True)]

project(to=AllButFirst (Bool `Either` Bool), 0@(Bool `Either` Bool))
> Nothing


'### Helper functions

def interleave_blanks(blank:v, seq: m=>v) -> (FenceAndPosts m)=>v given (m|Ix, v) =
  -- Turns "text" into " t e x t ".
  for idx. case idx of
    Fence i -> seq[i]
    Posts i -> blank

def normalize(xs:n=>v) -> n=>v given (n|Ix, v|Fractional|Add) =
  total = sum xs
  for i. divide xs[i] total


'### Main CTC algorithm
Computes `p(labels | logits)`, marginalizing over possible alignments,
and over insertion of blanks between characters.
Todo: add a `[Subset position time]` constraint.

def ctc_non_empty(
    blank: vocab,
    logits: time=>vocab=>LogSpace Float,
    labels: position=>vocab
    ) -> LogSpace Float
    given (vocab|NonEmpty|Eq, time|NonEmpty|Eq, position|NonEmpty) =
  ilabels = interleave_blanks blank labels
  label_probs = for t. normalize logits[t]

  -- Initialize dynamic programming table to all zeros
  -- except for starting with either a blank or the first token.
  prob_seq_at_start = yield_state zero \lpRef.
    lpRef!(Posts first_ix) := label_probs[first_ix,blank]
    lpRef!(Fence first_ix) := label_probs[first_ix,labels[first_ix]]

  safe_idx_sub = \prev s y.
    if (ordinal s) < y
      then zero
      else prev[unsafe_from_ordinal (unsafe_nat_diff (ordinal s) y)]

  same_token_as_last = \s. if (ordinal s) >= 2
    then
      s_minus_2 = unsafe_from_ordinal (unsafe_nat_diff (ordinal s) 2)
      ilabels[s] == ilabels[s_minus_2]
    else False

  prob_seq_final = fold prob_seq_at_start \t:(AllButFirst time) prev.
    for s.
      prob_no_transition              = prev[s]
      prob_transition_from_blank      = safe_idx_sub prev s 1
      prob_transition_from_last_token = safe_idx_sub prev s 2

      -- Equation 6 from CTC paper.
      transition_prob = if ilabels[s] == blank || same_token_as_last s
        then prob_no_transition + prob_transition_from_blank
        else prob_no_transition + prob_transition_from_blank +
          prob_transition_from_last_token
      transition_prob * label_probs[inject t, ilabels[s]]

  -- Sum over last two entries in the table.  Eq 8 from paper.
  end_with_label = prob_seq_final[Fence last_ix]
  end_with_space = prob_seq_final[Posts last_ix]
  end_with_label + end_with_space

'### Wrapper function to provide proof of `NonEmpty`
This is a wrapper function to check if any of the inputs are empty,
and if not, casts them to an equivalent but provably `NonEmpty` form.

'If the compiler could generate `NonEmpty` instances for all
`Fin N` where `N > 0`, this function would be unnecessary.

def ctc(
    blank: vocab,
    logits: time=>vocab=>LogSpace Float,
    labels: position=>vocab
    ) -> LogSpace Float
    given (vocab|Ix|Eq, time|Eq|Ix, position|Ix) =
  if ((size vocab) > 0) && ((size time) > 0) && ((size position) > 0)
    then
      vocab_size_m1    = unsafe_nat_diff (size vocab) 1
      time_size_m1     = unsafe_nat_diff (size time) 1
      position_size_m1 = unsafe_nat_diff (size position) 1

      vocab'    = (() `Either` Fin vocab_size_m1)
      time'     = (() `Either` Fin time_size_m1)
      position' = (() `Either` Fin position_size_m1)

      blank'  = unsafe_from_ordinal(n=vocab', ordinal blank)
      logits' = for t:time' v:vocab'.
        logits[unsafe_from_ordinal (ordinal t), unsafe_from_ordinal (ordinal v)]
      labels' = for p:position'.
        unsafe_from_ordinal (ordinal labels[unsafe_from_ordinal (ordinal p)])

      ctc_non_empty blank' logits' labels'
    else zero

'## Demo
Evaluate marginal probability of some labels given logits.

Vocab = Fin 6
blank = 0@Vocab
Time = Fin 4

-- Create random logits and labels
logits : Time => Vocab => (LogSpace Float) = arb $ new_key 0
labels = [(3@Vocab), (4@Vocab), (1@Vocab)]

-- Evaluate probability.
:p ls_to_f $ ctc blank logits labels
> 0.00208998


'### Test
The CTC paper claims that the output of the above algorithm
computes `p(labels|logits)`, which should sum to 1.0 over all possible labels.
They don't sum to one.  Maybe there is a bug in the above code
or the paper.

-- Fin N=>Vocab is the set of all combinations of N tokens.
sum for i:(Fin 3=>Vocab).
  ls_to_f $ ctc blank logits i
> 0.5653746

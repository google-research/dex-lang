'## Connectionist Temporal Classification
By Alex Graves et alia.

'[Link to paper](https://www.cs.toronto.edu/~graves/icml_2006.pdf).

' This dynamic programming algorithm computes the probability of a particular sequences of labels
(without pauses included) given another sequence of label probabilities
(with pauses included), marginalizing over all possible combination of
pause lengths.
It's used for training speech-to-text models on unaligned training data.

'Most implementations of CTC compute the marginal logprob
and its gradients combining a forward and a backward pass.
However, as mentioned in the original paper, we should only
need the last step of the forward pass to compute the marginal
probability, and Dex's autodiff should produce the backward
pass automatically.  That makes this code much shorter than
most implementations.


def interleave {m v} (blank:v) (labels: m=>v) : (m & (Fin 2))=>v =
  -- Turns "text" into "t e x t " by first pairing each letter with a blank,
  -- then flattening the pairs back into a single-index table.
  pairs = for i. [labels.i, blank]
  for (i, j). pairs.i.j

def prepend {m v} (first: v) (seq: m=>v) : ((Unit|m)=>v) =
  -- Concatenates a single element to the beginning of a sequence.
  for idx. case idx of
    Left () -> first
    Right i -> seq.i

def prepend_and_interleave {m v} (blank:v) (seq: m=>v) : ((Unit|(m & (Fin 2)))=>v) =
  -- Turns "text" into " t e x t".
  -- The output of this function has a slightly complicated output type, which
  -- has size 1 + 2 * (size m).
  interleaved = interleave blank seq
  prepend blank interleaved

def clipidx (n:Type) [Ix n] (i:Int) : n =
  -- Returns element at 0 if less than zero.
  -- Ideally we could have an alternative
  -- to Fin that just clips the index at its bounds.
  from_ordinal n $ unsafe_i_to_n (select (i < 0) 0 i)

def logaddexp (x:Float) (y:Float) : Float =
  m = max x y
  m + ( log ( (exp (x - m) + exp (y - m))))

def ctc {vocab time position} [Eq vocab, Eq position, Eq time]
      (blank:  vocab)
      (logits: time=>vocab=>Float)
      (labels: position=>vocab)
      : Float =
  -- Computes log p(labels | logits), marginalizing over possible alignments.
  -- Todo: remove unnecessary implicit type annotations once
  -- Dex starts putting implicit types in scope.

  ilabels = prepend_and_interleave blank labels

  normalized_logits = for t. logsoftmax logits.t

  -- Initialization rules
  logprob_start_with_blank = normalized_logits.(0@_).blank
  logprob_of_first_label   = normalized_logits.(0@_).(labels.(0@_))
  log_prob_seq_t0 = for pos.
    -- TODO: allow pattern-matching on integer literals
    case ordinal pos == 0 of
      True -> logprob_start_with_blank
      False -> case ordinal pos == 1 of
        True  -> logprob_of_first_label
        False -> log 0.000001

  same_as_last = \ilabels s.
    o = n_to_i $ ordinal s
    select (o >= 2) (ilabels.s == ilabels.(clipidx _ (o - 2))) False

  safe_idx = \prev s.
    select (s >= 0) prev.(clipidx _ s) (log 0.0)

  -- Todo: As suggested by Adam Paske, we could get rid of these
  -- logaddexp calls with a newtype that overloads + and *
  update = \t prev.
    case ordinal t == 0 of
      True -> log_prob_seq_t0
      False -> for s.
        cond = ilabels.s == blank || same_as_last ilabels s
        labar = logaddexp prev.s (safe_idx prev (n_to_i (ordinal s) - 1))
        other = logaddexp labar  (safe_idx prev (n_to_i (ordinal s) - 2))
        ans = select cond labar other
        ans + normalized_logits.t.(ilabels.s)

  log_prob_seq_final = fold log_prob_seq_t0 update

  -- Todo: nicer way to get last two elements of log_prob_seq_final.
  seq_length = 1 + size (position & (Fin 2))
  endlabel = log_prob_seq_final.((unsafe_nat_diff seq_length 2)@_)
  endspace = log_prob_seq_final.((unsafe_nat_diff seq_length 1)@_)
  logaddexp endlabel endspace


'### Demo

def randIdxNoZero (n:Type) [Ix n] (k:Key) : n =
  unif = rand k
  from_ordinal n $ unsafe_i_to_n $
    (1 + (f_to_i (floor ( unif * i_to_f ((n_to_i $ size n) - 1)))))

Vocab = Fin 6
position = Fin 3
blank = 0@Vocab

-- Create random logits
Time = Fin 4
logits : Time => Vocab => Float = arb $ new_key 0

-- Create random labels
labels = for i:position. randIdxNoZero Vocab (new_key (ordinal i))
:p labels
> [(3@Fin 6), (4@Fin 6), (1@Fin 6)]

-- Evaluate marginal probability of labels given logits
:p exp $ ctc blank logits labels
> 0.008863



'### Test

-- Check that the sum of p(labels|logits) sums to 1.0 over all possible labels.
-- They don't yet sum to one, however I'm not 100% sure about the
-- semantics of the marginal likelihood being computed, and whether
-- e.g. the summed-over labels should include blanks.

sum for i:Vocab. exp $ ctc blank logits [i]
> 0.024464

-- (Fin N)=>Vocab is all combinations of N tokens.
sum for i:((Fin 2)=>Vocab). exp $ ctc blank logits i
> 0.32822

sum for i:((Fin 3)=>Vocab). exp $ ctc blank logits i
> 0.650282


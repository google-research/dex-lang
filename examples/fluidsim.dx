'## Fluid sim
Fluid simulation code based on
[Real-Time Fluid Dynamics for Games](https://www.josstam.com/publications) by Jos Stam

import plot

def wrapidx (n:Type) -> (i:Int) : n =
  -- Index wrapping around at ends.
  asidx $ mod i $ size n

def incwrap (i:n) : n =  -- Increment index, wrapping around at ends.
  asidx $ mod ((ordinal i) + 1) $ size n

def decwrap (i:n) : n =  -- Decrement index, wrapping around at ends.
  asidx $ mod ((ordinal i) - 1) $ size n

def finite_difference_neighbours [Add a] (x:n=>a) : n=>a =
  for i. x.(incwrap i) - x.(decwrap i)

def add_neighbours [Add a] (x:n=>a) : n=>a =
  for i. x.(incwrap i) + x.(decwrap i)

def apply_along_axis1 (f:b=>a -> b=>a) (x:b=>c=>a) : b=>c=>a =
  transpose for j. f for i. x.i.j

def apply_along_axis2 (f:c=>a -> c=>a) (x:b=>c=>a) : b=>c=>a =
  for i. f x.i

def fdx [Add a] (x:n=>m=>a) : (n=>m=>a) =
  apply_along_axis1 finite_difference_neighbours x

def fdy [Add a] (x:n=>m=>a) : (n=>m=>a) =
  apply_along_axis2 finite_difference_neighbours x

def divergence [Add a] (vx:n=>m=>a) (vy:n=>m=>a) : (n=>m=>a) =
  fdx vx + fdy vy

def add_neighbours_2d [Add a] (x:n=>m=>a) : (n=>m=>a) =
  ax1 = apply_along_axis1 add_neighbours x
  ax2 = apply_along_axis2 add_neighbours x
  ax1 + ax2

def project [VSpace a] (v: n=>m=>(Fin 2)=>a) : n=>m=>(Fin 2)=>a =
  -- Project the velocity field to be approximately mass-conserving,
  -- using a few iterations of Gauss-Seidel.
  h = 1.0 / IToF (size n)

  -- unpack into two scalar fields
  vx = for i j. v.i.j.(fromOrdinal _ 0)
  vy = for i j. v.i.j.(fromOrdinal _ 1)

  div = -0.5 .* h .* (divergence vx vy)

  p = yieldState zero \state.
    for i:(Fin 10).
      state := (1.0 / 4.0) .* (div + add_neighbours_2d (get state))

  vx = vx - (0.5 / h) .* fdx(p)
  vy = vy - (0.5 / h) .* fdy(p)

  for i j. [vx.i.j, vy.i.j]  -- pack back into a table.

def bilinear_interp [VSpace a] (right_weight:Float) (bottom_weight:Float)
  (topleft: a) (bottomleft: a) (topright: a) (bottomright: a) : a =
  left  = (1.0 - right_weight) .* ((1.0 - bottom_weight) .* topleft  + bottom_weight .* bottomleft)
  right =        right_weight  .* ((1.0 - bottom_weight) .* topright + bottom_weight .* bottomright)
  left + right

def advect [VSpace a] (f: n=>m=>a) (v: n=>m=>(Fin 2)=>Float) : n=>m=>a =
  -- Move field f according to x and y velocities (u and v)
  -- using an implicit Euler integrator.

  cell_xs = linspace n 0.0 $ IToF (size n)
  cell_ys = linspace m 0.0 $ IToF (size m)

  for i j.
    -- Location of source of flow for this cell.  No meshgrid!
    center_xs = cell_xs.i - v.i.j.(fromOrdinal _ 0)
    center_ys = cell_ys.j - v.i.j.(fromOrdinal _ 1)

    -- Index of source cell.
    source_col = floor center_xs
    source_row = floor center_ys

    -- Relative weight of right-hand and bottom cells.
    right_weight  = center_xs - source_col
    bottom_weight = center_ys - source_row

    -- Cast back to indices, wrapping around edges.
    l = wrapidx n  (FToI source_col)
    r = wrapidx n ((FToI source_col) + 1)
    t = wrapidx m  (FToI source_row)
    b = wrapidx m ((FToI source_row) + 1)

    -- A convex weighting of the 4 surrounding cells.
    bilinear_interp right_weight bottom_weight f.l.t f.l.b f.r.t f.r.b

def fluidsim [ VSpace a] (num_steps: Int) (color_init: n=>m=>a)
  (v: n=>m=>(Fin 2)=>Float) : (Fin num_steps)=>n=>m=>a =
  withState (color_init, v) \state.
    for i:(Fin num_steps).
      (color, v) = get state
      v = advect v v          -- Move velocities
      v = project v           -- Project to be volume-preserving
      color' = advect color v -- Move color
      state := (color', v)
      color

'### Demo

N = Fin 50
M = Fin 50

-- Create random velocity field.
def ixkey3 (k:Key) (i:n) (j:m) (k2:o) : Key =
  hash (hash (hash k (ordinal i)) (ordinal j)) (ordinal k2)
init_velocity = for i:N j:M k:(Fin 2).
  3.0 * (randn $ ixkey3 (newKey 0) i j k)

-- Create diagonally-striped color pattern.
init_color = for i:N j:M.
  r = BToF $ (sin $ (IToF $ (ordinal j) + (ordinal i)) / 8.0) > 0.0
  b = BToF $ (sin $ (IToF $ (ordinal j) - (ordinal i)) / 6.0) > 0.0
  g = BToF $ (sin $ (IToF $ (ordinal j) + (ordinal i)) / 4.0) > 0.0
  [r, g, b]

-- Run fluid sim and plot it.
num_steps = 5
:html imseqshow $ fluidsim num_steps init_color init_velocity
> <html output>

'### Gradient test

target = transpose init_color

-- This is partial
def last (xs:n=>a) : a = xs.((size n - 1)@_)

def objective (v:N=>M=>(Fin 2)=>Float) : Float =
  final_color = last $ fluidsim num_steps init_color v
  sum for (i, j, c). sq (final_color.i.j.c - target.i.j.c)

init_vel_grad = grad objective zero

:html imshow for i j. [0.0, init_vel_grad.i.j.(0@_), init_vel_grad.i.j.(1@_)]
> <html output>

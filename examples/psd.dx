' ### PSD solver based on Cholesky decomposition

import linalg

def psdsolve {n} (mat:n=>n=>Float) (b:n=>Float) : n=>Float =
  l = chol mat
  b' = forward_substitute l b
  u = transposeLowerToUpper l
  backward_substitute u b'

' Test

N = Fin 4
[k1, k2] = splitKey $ newKey 0

psd : N=>N=>Float =
  a = for i:N j:N. randn $ ixkey2 k1 i j
  x = a ** transpose a
  x + eye

def padLowerTriMat {n v} [Add v] (mat:LowerTriMat n v) : n=>n=>v =
  for i j.
    if (ordinal j)<=(ordinal i)
      then mat.i.(cast j)
      else zero

l = chol psd
l_full = padLowerTriMat l
:p l_full
> [ [2.021765, 0., 0., 0.]
> , [-1.795019, 1.990174, 0., 0.]
> , [-0.897886, 0.186757, 1.980266, 0.]
> , [1.445752, -0.296448, 0.724586, 2.230807] ]

psdReconstructed = l_full ** transpose l_full

:p sum for (i, j). sq (psd.i.j - psdReconstructed.i.j)
> 0.

vec : N=>Float = arb k2

:p (vec, psd **. psdsolve psd vec)
> ( [1.211277, 0.23285, -0.741911, 0.883351]
> , [1.211277, 0.23285, -0.741911, 0.883351] )

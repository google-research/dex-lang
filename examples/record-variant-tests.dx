
'Basics:
Syntax for records, variants, and their types.

'Record types

:p {&}
> { &}

:p {a:Int & b:Float}
> {a: Int & b: Float}

:p {a:Int & b:Float &}
> {a: Int & b: Float}

:p {a:Int & a:Float}
> {a: Int & a: Float}


'Records

:p {}
> {,}
:t {}
> { &}

:p {,}
> {,}
:t {,}
> { &}

:p {a=3, b=4}
> {a = 3, b = 4}
:t {a=3, b=4}
> {a: Int & b: Int}

:p {a=3, b=4,}
> {a = 3, b = 4}
:t {a=3, b=4,}
> {a: Int & b: Int}

:p {a=3, a=4}
> {a = 3, a = 4}
:t {a=3, a=4}
> {a: Int & a: Int}


'Variant (enum) types

:p {|}
> { |}

:p {a:Int | b:Float}
> {a: Int | b: Float}

:p {a:Int | b:Float |}
> {a: Int | b: Float}

:p {a:Int | a:Float}
> {a: Int | a: Float}


'Variants (enums)


:p
  x : {a:Int | b:Float} = {| a=3 |}
  x
> {| a = 3 |}

:p
  x : {a:Int | a:Float | a:Int} = {| a#1 = 3.0 |}
  x
> {| a#1 = 3.0 |}

:t
  x : {a:Int | a:Float | a:Int} = {| a#1 = 3.0 |}
  x
> {a: Int | a: Float | a: Int}


'Parse errors

:p {a:Int & b:Float | c:Int }

> Parse error:84:21:
>    |
> 84 | :p {a:Int & b:Float | c:Int }
>    |                     ^
> unexpected '|'
> expecting "..", "..<", expression, or negation
:p {a:Int & b:Float & ...c}

> Parse error:92:27:
>    |
> 92 | :p {a:Int & b:Float & ...c}
>    |                           ^
> Extensible records and variants not implemented
:p {&...c}

> Parse error:99:10:
>    |
> 99 | :p {&...c}
>    |          ^
> Extensible records and variants not implemented
:p {a=3, b=4, ...c}

> Parse error:106:19:
>     |
> 106 | :p {a=3, b=4, ...c}
>     |                   ^
> Extensible records and variants not implemented
:p {a:Int | b:Float | ...c}

> Parse error:113:27:
>     |
> 113 | :p {a:Int | b:Float | ...c}
>     |                           ^
> Extensible records and variants not implemented
:p {|...c}

> Parse error:120:10:
>     |
> 120 | :p {|...c}
>     |          ^
> Extensible records and variants not implemented

'Unpacking


:p
  ({b=b, a=a1, a=a2}) = {a=1, b=2, a=3}
  (a1, a2, b)
> (1, (3, 2))

({b=b, a=a1, a=a2}) = {a=1, b=2, a=3}
:p (a1, a2, b)
> (1, (3, 2))

:p
  ({b=b, a=a1, a=a2}) = {a=1, b=2}
  (a1, a2, b)
> Type error:Labels in record pattern do not match record type. Expected structure {a: Int & b: Int}
>
>   ({b=b, a=a1, a=a2}) = {a=1, b=2}
>    ^^^^^^^^^^^^^^^^^

:p
  x : {a:Int | a:Float | a:Int} = {| a#1 = 3.0 |}
  ({| a#1 = a |}) = x
  x
> Type error:Variant not allowed in can't-fail pattern
>
>   ({| a#1 = a |}) = x
>    ^^^^^^^^^^^^^

x : {a:Int | a:Float | a:Int} = {| a#1 = 3.0 |}
({| a#1 = a |}) = x
> Type error:Variant not allowed in can't-fail pattern


'Pattern matching

-- Not allowed: use a let binding instead
:p case {a=1, b=2, a=3} of
  {b=b, a=a1, a=a2} -> (a1, a2, b)
> Type error:Case patterns must start with a data constructor or variant pattern
>
>   {b=b, a=a1, a=a2} -> (a1, a2, b)
>   ^^^^^^^^^^^^^^^^^^

:p
  x : {a:Int | a:Float | b:Int} = {| a#1 = 3.0 |}
  case x of
    {| a#0 = x |} -> IToF x
    {| a#1 = x |} -> x
    {| b = x |}   -> IToF x
> 3.0

'Table values and imp lowering

myRecordTable : (Fin 2)=>{a:Int & b:Float} =
  [{a=1, b=2.0}, {a=3, b=4.0}]

:p myRecordTable
> [{a = 1, b = 2.0}, {a = 3, b = 4.0}]

:p for i:(Fin 2).
    ({a=a, b=b}) = myRecordTable.i
    {a=b, b=a}
> [{a = 2.0, b = 1}, {a = 4.0, b = 3}]

myVariantTable = [{| a=1 |}, {| b=2.0 |}]: (Fin 2)=>{a:Int | b:Float}
:p myVariantTable
> [{| a = 1 |}, {| b = 2.0 |}]

:p for i:(Fin 2).
    case myVariantTable.i of
      {| a=a |} -> {| b=a |}:{a:Float | b:Int}
      {| b=b |} -> {| a=b |}:{a:Float | b:Int}
> [{| b = 1 |}, {| a = 2.0 |}]

'As index sets

:p size {a:Fin 10 & b:Fin 3}
> 30
:p ordinal {a=(7@Fin 10), b=(2@Fin 3)}
> 27
:p fromOrdinal {a:Fin 10 & b:Fin 3} 14
> {a = 4@Fin 10, b = 1@Fin 3}

recordsAsIndices : {a:Fin 2 & b:Fin 3}=>{a:Fin 2 & b:Fin 3} = for i. i

-- TODO: error when printing a table indexed by records

:p size {a:Fin 10 | b:Fin 3}
> 13
:p ordinal {| b=(2@_) |}:{a:Fin 10 | b:Fin 3}
> 12
:p fromOrdinal {a:Fin 10 | b:Fin 3} 4
> {| a = 4@Fin 10 |}
:p fromOrdinal {a:Fin 10 | b:Fin 3} 11
> {| b = 1@Fin 3 |}

variantsAsIndices : {a:Fin 10 | b:Fin 3}=>{a:Fin 10 | b:Fin 3} = for i. i

-- TODO: error when printing a table indexed by variants

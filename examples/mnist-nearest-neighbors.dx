
load dxbo "scratch/mnist.dxbo" as mnist

:t mnist

-- TODO: these should come from the data set itself
type Img = 28=>28=>Float
type NTrain = 60000
type NTest  = 10000

(xsTrain, ysTrain, xsTest, ysTest) = mnist

findNearestNeighbor : (a -> a -> Float) -> n=>a -> a -> n
findNearestNeighbor metric xs x =
  distances.i = metric xs.i x
  argmin distances

imgDistance : Img -> Img -> Float
imgDistance x y = sum for (i,j). sq (x.i.j - y.i.j)

fracTrue : n=>Bool -> Float
fracTrue xs = mean for i. float (b2i xs.i)

example = asidx @NTest 123
:plotmat xsTest.example

-- look at closest match in the training set
closest = findNearestNeighbor imgDistance xsTrain (xsTest.example)
:plotmat xsTrain.closest

-- Make a subset of the test set (evaluating a single test example takes ~80ms)
type NTestSmall = 1000
xsTest' = slice @NTestSmall xsTest 0
ysTest' = slice @NTestSmall ysTest 0

closestTrainExample : NTestSmall => NTrain
closestTrainExample.i = findNearestNeighbor imgDistance xsTrain xsTest'.i

:p fracTrue for i. ysTrain.(closestTrainExample.i) == ysTest'.i

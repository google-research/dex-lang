import sort

:p is_sorted $ sort []:((Fin 0)=>Int)
> True
:p is_sorted $ sort [9, 3, 7, 4, 6, 1, 9, 1, 9, -1, 10, 10, 100, 0]
> True


'### Lexical Sorting Tests

:p "aaa" < "bbb"
> True

:p "aa" < "bbb"
> True

:p "a" < "aa"
> True

:p "aaa" > "bbb"
> False

:p "aa" > "bbb"
> False

:p "a" > "aa"
> False

:p "a" < "aa"
> True

:p ("": List Word8) > ("": List Word8)
> False

:p ("": List Word8) < ("": List Word8)
> False

:p "a" > "a"
> False

:p "a" < "a"
> False

:p "Thomas" < "Thompson"
> True

:p "Thomas" > "Thompson"
> False

:p is_sorted $ sort ["Charlie", "Alice", "Bob", "Aaron"]
> True


'### Argsort Tests

example = [5, 4, 3, 2, 1, 100, 1000, 10]

-- Argsort gives a perumatation that sorts the array.
argsorted = argsort example
:p isSorted for i. example.(argsorted.i)
> True

-- Argsort of argsort gives a permutation that un-sorts the array.
rank = argsort $ argsort example
:p all for i. example.i == (sort example).(rank.i)
> True


interface InterfaceTest0(a)
  someMethod : a

interface InterfaceTest1(a)
  InterfaceTest1 : a
> Error: variable already defined: InterfaceTest1

interface InterfaceTest3(a)
  foo_dup : (a) -> Int
  foo_dup : (a) -> Int
> Error: variable already defined: foo_dup

interface InterfaceTest4(a)
  foo : Int
  bar : (a) -> Int

instance InterfaceTest4(Float)
  foo = 1
  def bar(_) = 1
  foo = 1
> Type error:Duplicate method: foo

instance InterfaceTest4(Float)
  foo = 1
> Type error:Missing method: bar

baz = 1
instance InterfaceTest4(Float)
  baz = 1
> Type error:not a method name: baz
>
>   baz = 1
>   ^^^^^^^

instance InterfaceTest4(Float)
  someMethod = 1
> Type error:someMethod is not a method of InterfaceTest4
>
>   someMethod = 1
>   ^^^^^^^^^^^^^^

instance InterfaceTest4(Float)
  foo = 1
  def bar(_) = 'x'
> Type error:
> Expected: Int32
>   Actual: Word8
>
>   def bar(_) = 'x'
>                ^^^

instance InterfaceTest4(Float)
  foo = 1
  def bar(_) = 1

-------------------- Diamond superclasses --------------------

interface A(a)
  a_ : (a) -> Int
interface B(a|A)
  b_ : (Int)
interface C(a|A)
  c_ : (Int)

-- Diamond superclasses should be ok
def f1(x: a) -> Int given (a|B|C) = a_ x
-- Multiple binders are ok too
def f2(x: a) -> Int given (a|A|A) = a_ x

-------------------- Transitive superclasses --------------------

interface D(a)
  d_ : (a) -> Int
interface E(a|D)
  e_ : (a) -> Int
interface F(a|E)
  f_ : (a) -> Int
instance D(Int)
  def d_(_) = 1
instance E(Int)
  def e_(_) = 2
instance F(Int)
  def f_(_) = 3

def deriveDFromE(x:a) -> Int given (a|E) = d_ x
def deriveDFromF(x:a) -> Int given (a|F) = d_ x

-------------------- Overlapping instances --------------------

-- Overlapping instances
instance A(Int)
  def a_(x) = 1
instance A(n=>a) given (a|A, n|Ix)
  def a_(x) = a_ x[0@_]
instance A(n=>Int) given (n|Ix)
  def a_(x) = 0

-- There are two derivations for n=>Int
def f3(x: n=>Int) -> Int given (n|Ix) = a_ x
> Type error:Multiple candidate class dictionaries for: (A (n => Int32))
>
> def f3(x: n=>Int) -> Int given (n|Ix) = a_ x
>                                         ^^^^
-- Adding an explicit binder shouldn't change anything
def f4(x: n=>Int) -> Int given (n|Ix) (A (n=>Int)) = a_ x
> Type error:Multiple candidate class dictionaries for: (A (n => Int32))
>
> def f4(x: n=>Int) -> Int given (n|Ix) (A (n=>Int)) = a_ x
>                                                      ^^^^

-- TODO: This should fail! The choice of dictionary depends on instantiation
--       of a (there's a generic one and a specific one for n=>Int)!
--       This is reported in #669.
def f5(x : n=>a) -> Int given (n|Ix, a|A) = a_ x

interface Eq'(a)
  eq : (a) -> Int
interface Ord'(a|Eq')
  ord : (a) -> Int

instance Eq'(n=>Int) given (n|Ix)
  def eq(_) = 2
instance Eq'(n=>a) given (n|Ix, a|Eq')
  def eq(_) = 3
instance Ord'(n=>a) given (n|Ix, a|Ord')
  def ord(_) = 4

-- Simplifiable constraints should be accepted
def f6(x : n=>Int) -> Int given (n|Ix) (Eq'  (n=>Int))= eq x
def f7(x : n=>Int) -> Int given (n|Ix) (Ord' (n=>Int)) = eq x

-- This additional instance makes f7 ambiguous. Note that there's an easy way out
-- in the form of the superclass of Ord', but we still check that there's no overlap.
instance Eq'(Int)
  def eq(_) = 0
def f8(x : n=>Int) -> Int given (n|Ix) (Ord' (n=>Int))  = eq x
> Type error:Multiple candidate class dictionaries for: (Eq' (n => Int32))
>
> def f8(x : n=>Int) -> Int given (n|Ix) (Ord' (n=>Int))  = eq x
>                                                           ^^^^

-- XXX: In Haskell overlap is determined entirely by instance heads, making it
--      independent of other instances in scope. In Dex an instance might be ruled out,
--      because at some point its constraints are unsatisfiable, but later on it
--      might become viable. How big of an issue is that??

-------------------- Multi-parameter interfaces --------------------

-- Adapted from PR 1039
interface MyDist(d, a)
  log_pdf : (d, a) -> Float

interface MyOrderedDist(d, a, given () (MyDist d a))
  log_cdf : (d, a) -> Float

-- TODO: Test actually using it.

-------------------- User-defined Ix --------------------

data TwoPoints =
  FirstPoint
  SecondPoint

instance Ix(TwoPoints)
  def size'() = 2
  def ordinal(b) = case b of
    FirstPoint  -> 0
    SecondPoint -> 1
  def unsafe_from_ordinal(i) = case i == 0 of
    True  -> FirstPoint
    False -> SecondPoint

:p for i:TwoPoints. i
> [FirstPoint, SecondPoint]

----------------- User-defined Ix referencing toplevel data -----------------

-- This is a regression test for Issue #930.

data TwoMorePoints =
  APoint
  AnotherPoint

both_points = [APoint, AnotherPoint]

instance Ix(TwoMorePoints)
  def size'() = 2
  def ordinal(b) = case b of
    APoint -> 0
    AnotherPoint -> 1
  def unsafe_from_ordinal(i) = both_points[unsafe_from_ordinal i]

:p for i:TwoMorePoints. ordinal i
> [0, 1]

----------------- Data constraint synthesis -----------------

def data_id(x:a) -> a given (a|Data) = x

data_id 4
> 4

data_id Int
> Type error:Couldn't synthesize a class dictionary for: (Data Type)
>
> data_id Int
> ^^^^^^^^^^^

data_id (5, Int)
> Type error:Couldn't synthesize a class dictionary for: (Data (Nat, Type))
>
> data_id (5, Int)
> ^^^^^^^^^^^^^^^^

data_id (5, 8)
> (5, 8)

data_id [4, 5, 6]
> [4, 5, 6]

data_id (the (n:Nat &> (Fin n) => Nat) (3 ,> [5, 6, 7]))
> (3 ,> [5, 6, 7])

----------------- Lambda function taking class arguments -----------------

:t \(given (a|Ix, b|Ix) (Subset a b)) (xs:a=>Float). xs[0@_]
> ({a:Type}[d:(Ix a)]{b:Type}[d.1:(Ix b),v#0:(Subset a b)](xs:(a
>                                                              => Float32)) -> Float32)

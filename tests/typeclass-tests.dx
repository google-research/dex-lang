
interface InterfaceTest0 a
  someMethod : a

interface InterfaceTest1 a
  InterfaceTest1 : a
> Error: variable already defined: InterfaceTest1

interface InterfaceTest3 a
  foo : a -> Int
  foo : a -> Int
> Error: variable already defined: foo

interface InterfaceTest4 a
  foo : Int
  bar : a -> Int

instance InterfaceTest4 Float
  foo = 1
  bar = \_. 1
  foo = 1
> Type error:Duplicate method: foo

instance InterfaceTest4 Float
  foo = 1
> Type error:Missing method: bar

baz = 1
instance InterfaceTest4 Float
  baz = 1
> Type error:baz is not a method of InterfaceTest4

instance InterfaceTest4 Float
  someMethod = 1
> Type error:someMethod is not a method of InterfaceTest4

instance InterfaceTest4 Float
  foo = 1
  bar = \_. 'x'
> Type error:
> Expected: Int32
>   Actual: Word8
>
>   bar = \_. 'x'
>             ^^^

instance InterfaceTest4 Float
  foo = 1
  bar = \_. 1

outer = 1.0
-- Should be able to shadow a variable with the parameter
interface InterfaceTest5 outer
  value outer : Int

-- Shouldn't be able to bind a parameter variable twice
interface InterfaceTest6 a a
  f : a -> Int
> Error: variable already defined within pattern: a

-------------------- Diamond superclasses --------------------

interface A a
  a_ : a -> Int
interface [A a] B a
  b_ : Int
interface [A a] C a
  c_ : Int

-- Diamond superclasses should be ok
def f1 [B a, C a] (x : a) : Int = a_ x
-- Multiple binders are ok too
def f2 [A a, A a] (x : a) : Int = a_ x

-------------------- Transitive superclasses --------------------

interface D a
  d_ : a -> Int
interface [D a] E a
  e_ : a -> Int
interface [E a] F a
  f_ : a -> Int
instance D Int
  d_ = \_. 1
instance E Int
  e_ = \_. 2
instance F Int
  f_ = \_. 3

def deriveDFromE [E a] (x:a) : Int = d_ x
def deriveDFromF [F a] (x:a) : Int = d_ x

-------------------- Overlapping instances --------------------

-- Overlapping instances
instance A Int
  a_ = \x. 1
instance [A a] A (n=>a)
  a_ = \x. a_ x.(0@_)
instance A (n=>Int)
  a_ = \x. 0

-- There are two derivations for n=>Int
def f3 (x : n=>Int) : Int = a_ x
> Type error:Multiple candidate class dictionaries for: (A (n => Int32))
>
> def f3 (x : n=>Int) : Int = a_ x
>                             ^^^
-- Adding an explicit binder shouldn't change anything
def f4 [A (n=>Int)] (x : n=>Int) : Int = a_ x
> Type error:Multiple candidate class dictionaries for: (A (n => Int32))
>
> def f4 [A (n=>Int)] (x : n=>Int) : Int = a_ x
>                                          ^^^

-- TODO: This should fail! The choice of dictionary depends on instantiation
--       of a (there's a generic one and a specific one for n=>Int)!
--       This is reported in #669.
def f5 [A a] (x : n=>a) : Int = a_ x

interface Eq' a
  eq : a -> Int
interface [Eq' a] Ord' a
  ord : a -> Int

instance Eq' (n=>Int)
  eq = const 2
instance [Eq' a] Eq' (n=>a)
  eq = const 3
instance [Ord' a] Ord' (n=>a)
  ord = const 4

-- Simplifiable constraints should be accepted
def f6 [Eq' (n=>Int)] (x : n=>Int) : Int = eq x
def f7 [Ord' (n=>Int)] (x : n=>Int) : Int = eq x

-- This additional instance makes f7 ambiguous. Note that there's an easy way out
-- in the form of the superclass of Ord', but we still check that there's no overlap.
instance Eq' Int
  eq = const 0
def f8 [Ord' (n=>Int)] (x : n=>Int) : Int = eq x
> Type error:Multiple candidate class dictionaries for: (Eq' (n => Int32))
>
> def f8 [Ord' (n=>Int)] (x : n=>Int) : Int = eq x
>                                             ^^^

-- XXX: In Haskell overlap is determined entirely by instance heads, making it
--      independent of other instances in scope. In Dex an instance might be ruled out,
--      because at some point its constraints are unsatisfiable, but later on it
--      might become viable. How big of an issue is that??

-------------------- Multi-parameter interfaces --------------------

-- TODO!

-------------------- Automatic quantification --------------------

interface X a
  x_ a : Int

def MyPairOfXs (a : Type) (_ : X a) ?=> : Type = (a & a)

instance X Int
  x_ = 1

-- No automatic quantification needed
def q0 (x : MyPairOfXs Int) : Int = fst x
def q1 [X a] (x : MyPairOfXs a) : a = fst x

-- Should work with implicit quantification
def q2 (x : MyPairOfXs a) : a = fst x

-- Should work with implicit quantification
def q3 (x : MyPairOfXs a) : Int = x_ a

-- We should also implicitly quantify over constraints of the return type
def f4 (x : a) : MyPairOfXs a = (x, x)

-- Check automatic quantification for interfaces
interface AutoQuant a
  dummy : Int
instance AutoQuant (MyPairOfXs a)
  dummy = 1

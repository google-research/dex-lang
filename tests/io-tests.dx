
:p unsafe_io \().
  with_temp_file \fname.
    with_file fname WriteMode \stream.
      fwrite stream "lorem ipsum\n"
      fwrite stream "dolor sit amet\n"
    read_file fname
> "lorem ipsum
> dolor sit amet
> "

:p unsafe_io \().
  with_alloc 4 \ptr:(Ptr Nat).
    for i:(Fin 4). store (ptr +>> ordinal i) (ordinal i)
    table_from_ptr (Fin 4) ptr
> [0, 1, 2, 3]

unsafe_io \().
  print "testing log"
> testing log
> ()

unsafe_io \().
  for i':(Fin 10).
    i = ordinal i'
    if rem i 2 == 0
      then print $ show i <> " is even"
      else print $ show i <> " is odd"
> 0 is even
> 1 is odd
> 2 is even
> 3 is odd
> 4 is even
> 5 is odd
> 6 is even
> 7 is odd
> 8 is even
> 9 is odd
> [(), (), (), (), (), (), (), (), (), ()]

:p storage_size Int
> 4

:p unsafe_io \().
  with_alloc 1 \ptr:(Ptr Int).
    store ptr 3
    load ptr
> 3

:p unsafe_io \().
  with_dynamic_buffer \buf.
    extend_dynamic_buffer buf $ to_list for i:(Fin 1000). ordinal i
    extend_dynamic_buffer buf $ to_list for i:(Fin 1000). ordinal i
    (AsList _ xs) = load_dynamic_buffer buf
    sum xs
> 999000

:p unsafe_io \().
  s = for i:(Fin 10000). i_to_w8 $ f_to_i $ 128.0 * rand (ixkey (new_key 0) i)
  with_temp_file \fname.
    with_file fname WriteMode \stream.
      fwrite stream $ AsList _ s
    (AsList _ s') = read_file fname
    sum (for i. w8_to_i s.i) == sum (for i. w8_to_i s'.i)
> True

:p unsafe_io do get_env "NOT_AN_ENV_VAR"
> Nothing

:p unsafe_io do get_env "DEX_TEST_MODE"
> (Just "t")

:p dex_test_mode ()
> True

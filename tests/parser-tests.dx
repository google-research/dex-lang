'For now, arithmetic is not sensitive to whitespace:

:p 1.0+1.0
> 2.

:p 1.0 +1.0
> 2.

:p 1.0+ 1.0
> 2.

:p 1.0 + 1.0
> 2.

:p 1.0-1.0
> 0.

:p 1.0 -1.0
> 0.

:p 1.0- 1.0
> 0.

:p 1.0 - 1.0
> 0.

'Applying a function to a negative literal thus requires parentheses.

f = \x. x + 10.

:p f -1.0   -- parses as (-) f (-1.0)
> Type error:
> Expected: (Float32 -> Float32)
>   Actual: Float32
>
> :p f -1.0   -- parses as (-) f (-1.0)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:p f (-1.0)
> 9.

'Lambdas can have specific arrow annotations.

lam1 = \{n}. \x:(Fin n). ordinal x
:t lam1
> ((n:Nat) ?-> (Fin n) -> Nat)

lam4 = \{n m}. (Fin n, Fin m)
:t lam4
> (Nat ?-> Nat ?-> (Type & Type))

:p (
    1
    +
    2
   )
> 3

:p
  xs = [1,2,3]
  for i.
    if xs.i > 1
      then 0
      else 1
> [1, 0, 0]

:p
  run_state 5 \ref.
    n = get ref
    for_ i:(Fin n).
      ref := get ref + 1
> ((), 10)

def myInt : Int = 1
:p myInt
> 1

def myInt2 : {State Int} Int = 1
> Syntax error: Nullary def can't have effects
>
> def myInt2 : {State Int} Int = 1
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-- Check that a syntax error in a funDefLet doesn't try to reparse the
-- whole definition as something it's not.
def frob (x:Int) (y:Int) : + =

> Parse error:86:30:
>    |
> 86 | def frob (x:Int) (y:Int) : + =
>    |                              ^
> unexpected '='
> expecting name or symbol name

-- Check that indented blocks have to actually be indented.
for i.
i

> Parse error:97:1:
>    |
> 97 | i
>    | ^
> expecting end of line or space

def (foo + bar) : Int = 6

> Parse error:105:6:
>     |
> 105 | def (foo + bar) : Int = 6
>     |      ^
> unexpected 'f'
> expecting symbol name

'Data definitions allow but do not require type / kind annotations

data MyPair1 a b = MkPair1 a b

data MyPair2 a:Type b:Type = MkPair2 x:a y:b

'which may be grouped with parentheses

data MyPair3 (a:Type) (b:Type) = MkPair3 (x:a) (y:b)

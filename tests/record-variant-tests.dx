
'Basics:
Syntax for records, variants, and their types.

'Record types

:p {&}
> {&}

:p {a:Int & b:Float}
> {a: Int32 & b: Float32}

:p {a:Int & b:Float &}
> {a: Int32 & b: Float32}

:p {a:Int & a:Float}
> {a: Int32 & a: Float32}


'Records

:p {}
> {}
:t {}
> {&}

:p {,}
> {}
:t {,}
> {&}

:p {a=3, b=4}
> {a = 3, b = 4}
:t {a=3, b=4}
> {a: Int32 & b: Int32}

:p {a=3, b=4,}
> {a = 3, b = 4}
:t {a=3, b=4,}
> {a: Int32 & b: Int32}

:p {a=3, a=4}
> {a = 3, a = 4}
:t {a=3, a=4}
> {a: Int32 & a: Int32}

:p
  x = {a=5.0, b=2}
  y : {a:Int & b:Int & ..._} = {a=3, a=4, ...x}
  y
> {a = 3, a = 4, a = 5., b = 2}

:p
  {b=b1, a=a1, c=c1, a=a2} = {a=1, a=2, b=3, c=4}
  (a1, a2, b1, c1)
> (1, (2, (3, 4)))

'Variant (enum) types

:p {|}
> { |}

:p {a:Int | b:Float}
> {a: Int32 | b: Float32}

:p {a:Int | b:Float |}
> {a: Int32 | b: Float32}

:p {a:Int | a:Float}
> {a: Int32 | a: Float32}


'Variants (enums)


:p {| a=3 |} : {a:Int | b:Float}
> {| a = 3 |}

:p {| a | a = 3.0 |} : {a:Int | a:Float | a:Int}
> {|a| a = 3. |}

:t {| a | a = 3.0 |} : {a:Int | a:Float | a:Int}
> {a: Int32 | a: Float32 | a: Int32}

:p
  x : {a:Int | b:Float} = {| a=3 |}
  y : {a:Float | a:Int | ..._} = {| a | ...x |}
  y
> {|a| a = 3 |}


'Parse errors

:p {a:Int & b:Float | c:Int }

> Parse error:94:21:
>    |
> 94 | :p {a:Int & b:Float | c:Int }
>    |                     ^
> unexpected '|'
> expecting "..", "..<", "<..", "<..<", "=>", "{|", '$', '&', '.', ':', '}', arrow, backquoted name, expression, or infix operator

:p {a:Int,}

> Parse error:103:10:
>     |
> 103 | :p {a:Int,}
>     |          ^
> unexpected ','
> expecting "..", "..<", "<..", "<..<", "=>", "{|", '$', '&', ''', '.', ':', '?', '_', '|', '}', alphanumeric character, arrow, backquoted name, expression, or infix operator

:p {|3}

> Parse error:112:6:
>     |
> 112 | :p {|3}
>     |      ^
> unexpected '3'
> expecting "...", '}', or field label


'Unpacking


:p
  ({b=b, a=a1, a=a2}) = {a=1, b=2, a=3}
  (a1, a2, b)
> (1, (3, 2))

({b=b, a=a1, a=a2}) = {a=1, b=2, a=3}
:p (a1, a2, b)
> (1, (3, 2))

:p
  ({foo=foo, ..._}) = {foo=1, bar=2, baz=3}
  foo
> 1

({foo=foo, ..._}) = {foo=1, bar=2, baz=3}
:p foo
> 1

def getFoo {a} {rest : Fields} (x : {foo:a & ...rest}) : a =
  ({foo=foo, ..._}) = x
  foo

:p getFoo {foo=1, foo=0.0, bar=2, baz=3}
> 1

def getTwoFoosAndABar {a b c} {rest : Fields}
                      (x : {foo:a & foo:b & bar:c & ...rest}) : (a&b&c) =
  ({foo=f1, foo=f2, bar=b, ..._}) = x
  (f1, f2, b)

:p getTwoFoosAndABar {foo=1, bar=2, foo=0.0, foo=4, baz=3.0, bar=7}
> (1, (0., 2))

:p
  ({b=b, a=a1, a=a2}) = {a=1, b=2}
  (a1, a2, b)
> Type error:
> Expected: {a: c & a: d & b: e}
>   Actual: {a: b1 & b: a}
> (Solving for: [a, b1, c, d, e])
>
>   ({b=b, a=a1, a=a2}) = {a=1, b=2}
>    ^^^^^^^^^^^^^^^^^

:p
  x : {a:Int | a:Float | a:Int} = {| a | a = 3.0 |}
  ({| a | a = a |}) = x
  x
> Type error:Variant not allowed in can't-fail pattern
>
>   ({| a | a = a |}) = x
>    ^^^^^^^^^^^^^^^

x : {a:Int | a:Float | a:Int} = {| a | a = 3.0 |}
({| a | a = a |}) = x
> Type error:Variant not allowed in can't-fail pattern
>
> ({| a | a = a |}) = x
>  ^^^^^^^^^^^^^^^

'Record puns

:p
  foo = 1
  bar = 2.0
  {foo, bar}
> {bar = 2., foo = 1}

:p
  ({foo, ...}) = {foo=1, bar=2.0}
  foo
> 1


'Pattern matching

-- Not allowed: use a let binding instead
:p case {a=1, b=2, a=3} of
  {b=b, a=a1, a=a2} -> (a1, a2, b)
> Type error:Case patterns must start with a data constructor or variant pattern
>
>   {b=b, a=a1, a=a2} -> (a1, a2, b)
>   ^^^^^^^^^^^^^^^^^^

:p
  x : {a:Int | a:Float | b:Int} = {| a | a = 3.0 |}
  case x of
    {| a = x |} -> IToF x
    {| a | a = x |} -> x
    {| b = x |} -> IToF x
> 3.

'Table values and imp lowering

myRecordTable : (Fin 2)=>{a:Int & b:Float} =
  [{a=1, b=2.0}, {a=3, b=4.0}]

:p myRecordTable
> [{a = 1, b = 2.}, {a = 3, b = 4.}]

:p for i:(Fin 2).
    ({a=a, b=b}) = myRecordTable.i
    {a=b, b=a}
> [{a = 2., b = 1}, {a = 4., b = 3}]

myVariantTable : (Fin 2)=>{a:Int | b:Float} = [{| a=1 |}, {| b=2.0 |}]
:p myVariantTable
> [{| a = 1 |}, {| b = 2. |}]

:p for i:(Fin 2).
    v : {a:_ | b:_} = case myVariantTable.i of
      {| a=a |} -> {| b=a |}
      {| b=b |} -> {| a=b |}
    v
> [{| b = 1 |}, {| a = 2. |}]

-- Known variant, unused tail pattern
:p
  x : {a:Int | a:Float | b:Int | c:Int } = {| a | a = 3.0 |}
  case x of
    {| a = x |} -> 1.0
    {| a | a = x |} -> x
    {|a|a| ..._ |} -> 5.0
> 3.

-- Known variant, missing pattern
:p
  x : {a:Int | a:Float | b:Int | c:Int } = {| a | a = 3.0 |}
  case x of
    {| a = x |} -> 1.0
    {| a | a = x |} -> x
> 3.

-- Known variant, used tail pattern
myVal =
  x : {a:Int | a:Float | b:Int | c:Int } = {| b = 4 |}
  case x of
    {| a = x |} -> todo
    {|a| ...rest |} -> rest

:p myVal
> {| b = 4 |}
:t myVal
> {a: Float32 | b: Int32 | c: Int32}

-- Badly written tail pattern
:p
  x : {a:Int | a:Float | b:Int | c:Int } = {| b = 4 |}
  case x of
    {| a = x |} -> 1
    {| ...rest |} -> 2
> Type error:Variant explicit alternatives overlap with tail pattern.
>
>   case x of
>   ^^^^^^^^^^

-- Too many tail patterns
:p
  x : {a:Int | a:Float | b:Int | c:Int } = {| b = 4 |}
  case x of
    {| a = x |} -> 1
    {|a| ...rest |} -> 2
    {| ...rest2 |} -> 3
> Type error:Can't specify more than one variant tail pattern.
>
>   case x of
>   ^^^^^^^^^^

def splitTwoFoosOrABar {a b c} {rest:Fields}
                       (x : {foo:a | foo:b | bar:c | ...rest})
                       : ({x:a | y:b | z:c} | {|...rest}) =
  case x of
    {| foo=x |}                 -> Left {| x=x |}
    {| foo | foo=y |}           -> Left {| y=y |}
    {| bar=z |}                 -> Left {| z=z |}
    {|foo|foo|bar| ...other |}  -> Right other

myStuff :(Fin 5 => {foo:_ | foo:_ | foo:_ | bar:_ | baz:_}) =
  [ {| foo=1 |},
    {| bar=2 |},
    {| foo | foo=3 |},
    {| baz=4 |},
    {| foo | foo | foo=5 |}
  ]

:p for i. splitTwoFoosOrABar myStuff.i
> [ (Left {| x = 1 |})
> , (Left {| z = 2 |})
> , (Left {| y = 3 |})
> , (Right {| baz = 4 |})
> , (Right {| foo = 5 |}) ]

'As index sets

-- Use a non-standard iteration order by putting b before a!
def abToPair {a b} : Iso {a:a & b:b} (b&a) =
  fwd = \{a, b}. (b, a)
  bwd = \(b, a). {a, b}
  MkIso {fwd, bwd}
instance {n m} [Ix n, Ix m] Ix {a:n & b:m}
  getSize = \(). size n * size m
  ordinal = ordinal <<< appIso abToPair
  unsafeFromOrdinal = unsafeFromOrdinal _ >>> revIso abToPair

:p size {a:Fin 10 & b:Fin 3}
> 30
:p ordinal {a=(7@Fin 10), b=(2@Fin 3)}
> 27
:p fromOrdinal {a:Fin 10 & b:Fin 3} 14
> {a = (4@Fin 10), b = (1@Fin 3)}

recordsAsIndices : {a:Fin 2 & b:Fin 3}=>{a:Fin 2 & b:Fin 3} = for i. i
:p recordsAsIndices
> [ {a = (0@Fin 2), b = (0@Fin 3)}
> , {a = (1@Fin 2), b = (0@Fin 3)}
> , {a = (0@Fin 2), b = (1@Fin 3)}
> , {a = (1@Fin 2), b = (1@Fin 3)}
> , {a = (0@Fin 2), b = (2@Fin 3)}
> , {a = (1@Fin 2), b = (2@Fin 3)} ]@{a: Fin 2 & b: Fin 3}

-- TODO: this still causes an error
-- :p for i:(Fin 6). recordsAsIndices.((ordinal i) @ _)

def abToEither {a b} : Iso {a:a | b:b} (a|b) =
  fwd = \v.  case v of
    {|a=x|} -> Left x
    {|b=x|} -> Right x
  bwd = \v. case v of
    Left x  -> {|a=x|}
    Right x -> {|b=x|}
  MkIso {fwd, bwd}
instance {n m} [Ix n, Ix m] Ix {a:n | b:m}
  getSize = \(). size n + size m
  ordinal = ordinal <<< appIso abToEither
  unsafeFromOrdinal = unsafeFromOrdinal _ >>> revIso abToEither

:p size {a:Fin 10 | b:Fin 3}
> 13

:p
  x : {a:Fin 10 | b:Fin 3} = {| b=(2@_) |}
  ordinal x
> 12

:p fromOrdinal {a:Fin 10 | b:Fin 3} 4
> {| a = 4@Fin 10 |}

:p fromOrdinal {a:Fin 10 | b:Fin 3} 11
> {| b = 1@Fin 3 |}

variantsAsIndices : {a:Fin 10 | b:Fin 3}=>{a:Fin 10 | b:Fin 3} = for i. i
:p variantsAsIndices
> [ {| a = 0@Fin 10 |}
> , {| a = 1@Fin 10 |}
> , {| a = 2@Fin 10 |}
> , {| a = 3@Fin 10 |}
> , {| a = 4@Fin 10 |}
> , {| a = 5@Fin 10 |}
> , {| a = 6@Fin 10 |}
> , {| a = 7@Fin 10 |}
> , {| a = 8@Fin 10 |}
> , {| a = 9@Fin 10 |}
> , {| b = 0@Fin 3 |}
> , {| b = 1@Fin 3 |}
> , {| b = 2@Fin 3 |} ]@{a: Fin 10 | b: Fin 3}

-- === First-class labels ===

abc : Label = ##abc
:t abc
> Label

q = {@abc=1, y=2}
q
> {abc = 1, y = 2}
:t q
> {abc: Int32 & y: Int32}

:p
  {@abc=xv, y=yv} = q
  (xv, yv)
> (1, 2)

def projectField {r t} (l: Label) (x: {@l:t & ...r}) : t =
  {@l=v, ...} = x
  v

projectField ##a {a=1, b=2}
> 1

def addField {r1 r2} (l: Label) (x: {@l:Int & ...r1}) (y: {@l:Int & ...r2}) : Int =
  {@l=v1, ...} = x
  {@l=v2, ...} = y
  v1 + v2

addField ##b {a=1, b=2} {b=2, c=4}
> 4

def badProject (l: Label) (x: {@l:Int & l:Float}) : Float =
  {l=lv, ...} = x
  lv
> Type error:
> Expected: {l: a & ...b1}
>   Actual: {@l: Int32 & l: Float32}
> (Solving for: [a, b1])
>
>   {l=lv, ...} = x
>   ^^^^^^^^^^^^

def concatRecords {f f'} (x: {&...f}) (y: {&...f'}) : ({...f & ...f'}) =
  {...x, ...y}

concatRecords {a=1} {b=2}
> {a = 1, b = 2}

def projectTwo {f a b} (l1: Label) (l2: Label) (x: {@l1:a & @l2:b & ...f}) : (a & b) =
  {@l1=v1, @l2=v2, ...} = x
  (v1, v2)

projectTwo ##a ##b {c=1, b=2, a=4}
> (4, 2)

-- TODO: Add support a for richer pattern syntax
def subsetRecord (f: Fields) {f'} (x: {...f & ...f'}) : ({&...f}) = todo

-- This should at least typecheck for now
subsetRecord {a: _ ? b: _} {a=1, b=2, c=4}
> TODO: implement it!
> Runtime error

subsetRecord {? c: _ ?} {a=1, b=2}
> Type error:
> Expected: {c: a & ...b1}
>   Actual: {a: d & b: c}
> (Solving for: [a, b1, c, d])
>
> subsetRecord {? c: _ ?} {a=1, b=2}
>                         ^^^^^^^^^^

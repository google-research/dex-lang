{"orderedNodesUpdate":{"numDropped":0,"newTail":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]},"nodeMapUpdate":[[0,{"contents":[{"rsbBlockId":0,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\"></span></div>","rsbLexemeList":[],"rsbNumLines":0,"rsbLine":0,"rsbText":""},"Complete",[{"contents":[[0,0]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[0,0],"tnHighlights":[[0,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"}]],"tag":"Create"}],[1,{"contents":[{"rsbBlockId":1,"rsbHtml":"<div class=\"prose-block\"><h1>Syntax of if expressions</h1>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":1,"rsbText":"'# Syntax of if expressions\n\n"},"Inert",[]],"tag":"Create"}],[2,{"contents":[{"rsbBlockId":2,"rsbHtml":"<div class=\"prose-block\"><p>The basic syntax of <code>if</code> in Dex is</p>\n<pre><code>if &lt;condition&gt; then &lt;consequent&gt; [else &lt;alternate&gt;]\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":3,"rsbText":"'The basic syntax of `if` in Dex is\n```\nif <condition> then <consequent> [else <alternate>]\n```\n\n"},"Inert",[]],"tag":"Create"}],[3,{"contents":[{"rsbBlockId":3,"rsbHtml":"<div class=\"prose-block\"><p>It can be a bit confusing, though, because of all the tokens it may make sense to indent.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":8,"rsbText":"'It can be a bit confusing, though, because of all the tokens it may make sense to indent.\n\n"},"Inert",[]],"tag":"Create"}],[4,{"contents":[{"rsbBlockId":4,"rsbHtml":"<div class=\"prose-block\"><p>The main rules are:</p>\n<ul>\n<li>The <code>else</code> clause is optional (regardless of indentation)</li>\n<li>The <code>then</code> and <code>else</code> keywords can be inline with the preceding\ncode, or indented relative to the <code>if</code>.</li>\n<li>The code for each arm of the <code>if</code> can be either an inline expression\nor start a new indentation level (relative to its keyword if that is\nindented, or relative to the whole <code>if</code> otherwise).</li>\n</ul>\n</div>","rsbLexemeList":[],"rsbNumLines":8,"rsbLine":10,"rsbText":"'The main rules are:\n- The `else` clause is optional (regardless of indentation)\n- The `then` and `else` keywords can be inline with the preceding\n  code, or indented relative to the `if`.\n- The code for each arm of the `if` can be either an inline expression\n  or start a new indentation level (relative to its keyword if that is\n  indented, or relative to the whole `if` otherwise).\n\n"},"Inert",[]],"tag":"Create"}],[5,{"contents":[{"rsbBlockId":5,"rsbHtml":"<div class=\"prose-block\"><p>This produces four combinations for one-armed <code>if</code>, all of which are legal:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":18,"rsbText":"'This produces four combinations for one-armed `if`, all of which are legal:\n\n"},"Inert",[]],"tag":"Create"}],[6,{"contents":[{"rsbBlockId":6,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">:</span><span id=\"span_6_1\">p</span><span class=\"comment\">\n  </span><span id=\"span_6_4\">yield_accum</span><span> </span><span class=\"symbol\" id=\"span_6_7\">(</span><span id=\"span_6_8\">AddMonoid</span><span> </span><span id=\"span_6_10\">Float</span><span class=\"symbol\" id=\"span_6_11\">)</span><span> </span><span class=\"symbol\" id=\"span_6_14\">\\</span><span id=\"span_6_15\">ref</span><span class=\"symbol\" id=\"span_6_16\">.</span><span class=\"comment\">\n    </span><span class=\"keyword\" id=\"span_6_20\">if</span><span> </span><span id=\"span_6_21\">True</span><span> </span><span class=\"keyword\" id=\"span_6_22\">then</span><span> </span><span id=\"span_6_23\">ref</span><span> </span><span class=\"symbol\" id=\"span_6_24\">+=</span><span> </span><span class=\"literal\" id=\"span_6_26\">3.</span><span class=\"comment\">\n    </span><span class=\"keyword\" id=\"span_6_29\">if</span><span> </span><span id=\"span_6_30\">True</span><span> </span><span class=\"keyword\" id=\"span_6_31\">then</span><span class=\"comment\">\n      </span><span id=\"span_6_34\">ref</span><span> </span><span class=\"symbol\" id=\"span_6_35\">+=</span><span> </span><span class=\"literal\" id=\"span_6_37\">1.</span><span class=\"comment\">\n      </span><span id=\"span_6_39\">ref</span><span> </span><span class=\"symbol\" id=\"span_6_40\">+=</span><span> </span><span class=\"literal\" id=\"span_6_42\">2.</span><span class=\"comment\">\n    </span><span class=\"keyword\" id=\"span_6_45\">if</span><span> </span><span id=\"span_6_46\">True</span><span class=\"comment\">\n      </span><span class=\"keyword\" id=\"span_6_47\">then</span><span> </span><span id=\"span_6_48\">ref</span><span> </span><span class=\"symbol\" id=\"span_6_49\">+=</span><span> </span><span class=\"literal\" id=\"span_6_51\">3.</span><span class=\"comment\">\n    </span><span class=\"keyword\" id=\"span_6_54\">if</span><span> </span><span id=\"span_6_55\">False</span><span class=\"comment\">\n      </span><span class=\"keyword\" id=\"span_6_56\">then</span><span class=\"comment\">\n        </span><span id=\"span_6_59\">ref</span><span> </span><span class=\"symbol\" id=\"span_6_60\">+=</span><span> </span><span class=\"literal\" id=\"span_6_62\">1.</span><span class=\"comment\">\n        </span><span id=\"span_6_64\">ref</span><span> </span><span class=\"symbol\" id=\"span_6_65\">+=</span><span> </span><span class=\"literal\" id=\"span_6_67\">2.</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[1,4,7,8,10,11,14,15,16,20,21,22,23,24,26,29,30,31,34,35,37,39,40,42,45,46,47,48,49,51,54,55,56,59,60,62,64,65,67],"rsbNumLines":12,"rsbLine":20,"rsbText":":p\n  yield_accum (AddMonoid Float) \\ref.\n    if True then ref += 3.\n    if True then\n      ref += 1.\n      ref += 2.\n    if True\n      then ref += 3.\n    if False\n      then\n        ref += 1.\n        ref += 2.\n"},"CompleteWithErrors",[{"contents":[[4,4],[7,6],[8,8],[10,10],[11,6],[14,13],[15,15],[16,13],[20,19],[21,21],[22,19],[23,23],[24,24],[26,26],[29,28],[30,30],[31,28],[34,34],[35,35],[37,37],[39,39],[40,40],[42,42],[45,44],[46,46],[47,44],[48,48],[49,49],[51,51],[54,53],[55,55],[56,53],[59,59],[60,60],[62,62],[64,64],[65,65],[67,67]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[4,67],"tnHighlights":[[68,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[2,{"contents":{"tnSpan":[4,67],"tnHighlights":[[3,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[3,{"contents":{"tnSpan":[4,67],"tnHighlights":[[12,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[4,{"contents":{"tnSpan":[4,4],"tnHighlights":[[4,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[5,{"contents":{"tnSpan":[4,11],"tnHighlights":[[4,"HighlightGroup"],[6,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[6,{"contents":{"tnSpan":[7,11],"tnHighlights":[[7,"HighlightLeaf"],[11,"HighlightLeaf"],[9,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[7,{"contents":{"tnSpan":[7,7],"tnHighlights":[[7,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[8,{"contents":{"tnSpan":[8,8],"tnHighlights":[[8,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[9,{"contents":{"tnSpan":[8,10],"tnHighlights":[[8,"HighlightGroup"],[10,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[10,{"contents":{"tnSpan":[10,10],"tnHighlights":[[10,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[11,{"contents":{"tnSpan":[11,11],"tnHighlights":[[11,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[12,{"contents":{"tnSpan":[4,67],"tnHighlights":[[5,"HighlightGroup"],[13,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[13,{"contents":{"tnSpan":[14,67],"tnHighlights":[[14,"HighlightLeaf"],[16,"HighlightLeaf"],[15,"HighlightGroup"],[17,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[14,{"contents":{"tnSpan":[14,14],"tnHighlights":[[14,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[15,{"contents":{"tnSpan":[15,15],"tnHighlights":[[15,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[16,{"contents":{"tnSpan":[16,16],"tnHighlights":[[16,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[17,{"contents":{"tnSpan":[20,67],"tnHighlights":[[18,"HighlightGroup"],[27,"HighlightGroup"],[43,"HighlightGroup"],[52,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[18,{"contents":{"tnSpan":[20,26],"tnHighlights":[[19,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[19,{"contents":{"tnSpan":[20,26],"tnHighlights":[[20,"HighlightLeaf"],[22,"HighlightLeaf"],[21,"HighlightGroup"],[25,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[20,{"contents":{"tnSpan":[20,20],"tnHighlights":[[20,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[21,{"contents":{"tnSpan":[21,21],"tnHighlights":[[21,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[22,{"contents":{"tnSpan":[22,22],"tnHighlights":[[22,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[23,{"contents":{"tnSpan":[23,23],"tnHighlights":[[23,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[24,{"contents":{"tnSpan":[24,24],"tnHighlights":[[24,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[25,{"contents":{"tnSpan":[23,26],"tnHighlights":[[23,"HighlightGroup"],[24,"HighlightGroup"],[26,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[26,{"contents":{"tnSpan":[26,26],"tnHighlights":[[26,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[27,{"contents":{"tnSpan":[29,42],"tnHighlights":[[28,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[28,{"contents":{"tnSpan":[29,42],"tnHighlights":[[29,"HighlightLeaf"],[31,"HighlightLeaf"],[30,"HighlightGroup"],[32,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[29,{"contents":{"tnSpan":[29,29],"tnHighlights":[[29,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[30,{"contents":{"tnSpan":[30,30],"tnHighlights":[[30,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[31,{"contents":{"tnSpan":[31,31],"tnHighlights":[[31,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[32,{"contents":{"tnSpan":[34,42],"tnHighlights":[[33,"HighlightGroup"],[38,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[33,{"contents":{"tnSpan":[34,37],"tnHighlights":[[36,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[34,{"contents":{"tnSpan":[34,34],"tnHighlights":[[34,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[35,{"contents":{"tnSpan":[35,35],"tnHighlights":[[35,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[36,{"contents":{"tnSpan":[34,37],"tnHighlights":[[34,"HighlightGroup"],[35,"HighlightGroup"],[37,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[37,{"contents":{"tnSpan":[37,37],"tnHighlights":[[37,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[38,{"contents":{"tnSpan":[39,42],"tnHighlights":[[41,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[39,{"contents":{"tnSpan":[39,39],"tnHighlights":[[39,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[40,{"contents":{"tnSpan":[40,40],"tnHighlights":[[40,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[41,{"contents":{"tnSpan":[39,42],"tnHighlights":[[39,"HighlightGroup"],[40,"HighlightGroup"],[42,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[42,{"contents":{"tnSpan":[42,42],"tnHighlights":[[42,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[43,{"contents":{"tnSpan":[45,51],"tnHighlights":[[44,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[44,{"contents":{"tnSpan":[45,51],"tnHighlights":[[45,"HighlightLeaf"],[47,"HighlightLeaf"],[46,"HighlightGroup"],[50,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[45,{"contents":{"tnSpan":[45,45],"tnHighlights":[[45,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[46,{"contents":{"tnSpan":[46,46],"tnHighlights":[[46,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[47,{"contents":{"tnSpan":[47,47],"tnHighlights":[[47,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[48,{"contents":{"tnSpan":[48,48],"tnHighlights":[[48,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[49,{"contents":{"tnSpan":[49,49],"tnHighlights":[[49,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[50,{"contents":{"tnSpan":[48,51],"tnHighlights":[[48,"HighlightGroup"],[49,"HighlightGroup"],[51,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[51,{"contents":{"tnSpan":[51,51],"tnHighlights":[[51,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[52,{"contents":{"tnSpan":[54,67],"tnHighlights":[[53,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[53,{"contents":{"tnSpan":[54,67],"tnHighlights":[[54,"HighlightLeaf"],[56,"HighlightLeaf"],[55,"HighlightGroup"],[57,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[54,{"contents":{"tnSpan":[54,54],"tnHighlights":[[54,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[55,{"contents":{"tnSpan":[55,55],"tnHighlights":[[55,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[56,{"contents":{"tnSpan":[56,56],"tnHighlights":[[56,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[57,{"contents":{"tnSpan":[59,67],"tnHighlights":[[58,"HighlightGroup"],[63,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[58,{"contents":{"tnSpan":[59,62],"tnHighlights":[[61,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[59,{"contents":{"tnSpan":[59,59],"tnHighlights":[[59,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[60,{"contents":{"tnSpan":[60,60],"tnHighlights":[[60,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[61,{"contents":{"tnSpan":[59,62],"tnHighlights":[[59,"HighlightGroup"],[60,"HighlightGroup"],[62,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[62,{"contents":{"tnSpan":[62,62],"tnHighlights":[[62,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[63,{"contents":{"tnSpan":[64,67],"tnHighlights":[[66,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[64,{"contents":{"tnSpan":[64,64],"tnHighlights":[[64,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[65,{"contents":{"tnSpan":[65,65],"tnHighlights":[[65,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[66,{"contents":{"tnSpan":[64,67],"tnHighlights":[[64,"HighlightGroup"],[65,"HighlightGroup"],[67,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[67,{"contents":{"tnSpan":[67,67],"tnHighlights":[[67,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[68,{"contents":{"tnSpan":[4,67],"tnHighlights":[[2,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[4,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef yield_accum(\n    m:Monoid b,\n    action: (given (h:Heap) (AccumMonoid(h, b)), Ref h w) -> {Accum h|eff} a\n    ) -> {|eff} w  given (a:Type, b:Type, w|Data, eff:Effects) (MonoidLifter b w) =\n  snd $ run_accum(m, action)\n"]},"tag":"Update"}],[8,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nnamed-instance AddMonoid(a|Add) -> Monoid(a)\n  mempty = zero\n  def (<>)(x, y) = x + y\n"]},"tag":"Update"}],[10,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nFloat = Float32\n"]},"tag":"Update"}],[15,{"contents":{"tnuHighlights":[[15,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[19,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[21,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[23,{"contents":{"tnuHighlights":[[15,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[15,{"contents":{"tnuHighlights":[[23,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[24,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (+=)(ref:Ref h w, x:w) -> {Accum h} ()\n  given (h:Heap, w|Data) (am:AccumMonoid(h, w)) =\n  UnsafeMkAccumMonoidData(b, bm) = %applyMethod0(am)\n  empty = %applyMethod0(bm)\n  %mextend(ref, empty, \\x:b y:b. %applyMethod1(bm, x, y), x)\n"]},"tag":"Update"}],[28,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[30,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[34,{"contents":{"tnuHighlights":[[15,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[15,{"contents":{"tnuHighlights":[[34,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[35,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (+=)(ref:Ref h w, x:w) -> {Accum h} ()\n  given (h:Heap, w|Data) (am:AccumMonoid(h, w)) =\n  UnsafeMkAccumMonoidData(b, bm) = %applyMethod0(am)\n  empty = %applyMethod0(bm)\n  %mextend(ref, empty, \\x:b y:b. %applyMethod1(bm, x, y), x)\n"]},"tag":"Update"}],[39,{"contents":{"tnuHighlights":[[15,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[15,{"contents":{"tnuHighlights":[[39,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[40,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (+=)(ref:Ref h w, x:w) -> {Accum h} ()\n  given (h:Heap, w|Data) (am:AccumMonoid(h, w)) =\n  UnsafeMkAccumMonoidData(b, bm) = %applyMethod0(am)\n  empty = %applyMethod0(bm)\n  %mextend(ref, empty, \\x:b y:b. %applyMethod1(bm, x, y), x)\n"]},"tag":"Update"}],[44,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[46,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[48,{"contents":{"tnuHighlights":[[15,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[15,{"contents":{"tnuHighlights":[[48,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[49,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (+=)(ref:Ref h w, x:w) -> {Accum h} ()\n  given (h:Heap, w|Data) (am:AccumMonoid(h, w)) =\n  UnsafeMkAccumMonoidData(b, bm) = %applyMethod0(am)\n  empty = %applyMethod0(bm)\n  %mextend(ref, empty, \\x:b y:b. %applyMethod1(bm, x, y), x)\n"]},"tag":"Update"}],[53,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[55,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Bool =\n  False\n  True\n"]},"tag":"Update"}],[59,{"contents":{"tnuHighlights":[[15,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[15,{"contents":{"tnuHighlights":[[59,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[60,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (+=)(ref:Ref h w, x:w) -> {Accum h} ()\n  given (h:Heap, w|Data) (am:AccumMonoid(h, w)) =\n  UnsafeMkAccumMonoidData(b, bm) = %applyMethod0(am)\n  empty = %applyMethod0(bm)\n  %mextend(ref, empty, \\x:b y:b. %applyMethod1(bm, x, y), x)\n"]},"tag":"Update"}],[64,{"contents":{"tnuHighlights":[[15,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[15,{"contents":{"tnuHighlights":[[64,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[65,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (+=)(ref:Ref h w, x:w) -> {Accum h} ()\n  given (h:Heap, w|Data) (am:AccumMonoid(h, w)) =\n  UnsafeMkAccumMonoidData(b, bm) = %applyMethod0(am)\n  empty = %applyMethod0(bm)\n  %mextend(ref, empty, \\x:b y:b. %applyMethod1(bm, x, y), x)\n"]},"tag":"Update"}],[68,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef show_any(x:a) -> String given (a:Type) = unsafe_coerce(to=String, %showAny(x))\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[4,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}{b:Type}{w:Type}[v#0:(Data w)]{eff:EffKind}[v#1:({h:Heap}[v#1:(AccumMonoid h b)] ->> (AccumMonoid h w))](m:(Monoid b),action:({h:Heap}[v#2:(AccumMonoid h b)](v#3:(Ref\n                                                                                                                                                                              h w)) -> {Accum h|eff} a)) -> {|eff} w)"]},"tag":"Update"}],[6,{"contents":{"tnuHighlights":[],"tnuText":["Type:   (Monoid Float32)"]},"tag":"Update"}],[8,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((a:Type)[v#0:(Add a)] -> (Monoid a))"]},"tag":"Update"}],[10,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[68,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}(x:a) -> (List Word8))"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":[15,"Type error: type annotation or constraint required"],"tag":"RenderedError"}]],"tag":"Create"}],[7,{"contents":[{"rsbBlockId":7,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":33,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[8,{"contents":[{"rsbBlockId":8,"rsbHtml":"<div class=\"prose-block\"><p>However, not every one of the 16 concievable combinations makes sense for two-armed <code>if</code>.\nTo wit:</p>\n<ul>\n<li>If the consequent is indented, it makes no sense to have the <code>else</code>\ninline (eliminating 4 combinations).</li>\n<li>If <code>then</code> is inline, there can be no indented <code>else</code> either, because\nthere is no readable level at which to indent it (elimintaing 2 more\ncombinations).</li>\n</ul>\n</div>","rsbLexemeList":[],"rsbNumLines":8,"rsbLine":34,"rsbText":"'However, not every one of the 16 concievable combinations makes sense for two-armed `if`.\nTo wit:\n- If the consequent is indented, it makes no sense to have the `else`\n  inline (eliminating 4 combinations).\n- If `then` is inline, there can be no indented `else` either, because\n  there is no readable level at which to indent it (elimintaing 2 more\n  combinations).\n\n"},"Inert",[]],"tag":"Create"}],[9,{"contents":[{"rsbBlockId":9,"rsbHtml":"<div class=\"prose-block\"><p>The following contrived code block shows all the acceptable configurations:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":42,"rsbText":"'The following contrived code block shows all the acceptable configurations:\n\n"},"Inert",[]],"tag":"Create"}],[10,{"contents":[{"rsbBlockId":10,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">:p\n  yield_accum (AddMonoid Float) \\ref.\n    -- Two-armed `if` with `then` and the consequent both inline.\n    x = if False then 1. else 3.\n    if False then ref += 100. else\n      ref += 1.\n      ref += 2.\n    if False then ref += 200.\n      else ref += x\n    if False then ref += 300.\n      else\n        ref += 1.\n        ref += 2.\n\n</span></div>","rsbLexemeList":[],"rsbNumLines":14,"rsbLine":44,"rsbText":":p\n  yield_accum (AddMonoid Float) \\ref.\n    -- Two-armed `if` with `then` and the consequent both inline.\n    x = if False then 1. else 3.\n    if False then ref += 100. else\n      ref += 1.\n      ref += 2.\n    if False then ref += 200.\n      else ref += x\n    if False then ref += 300.\n      else\n        ref += 1.\n        ref += 2.\n\n"},"Inert",[]],"tag":"Create"}],[11,{"contents":[{"rsbBlockId":11,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">    -- Two-armed `if` with `then` indented but the consequent inline.\n    y = if False\n          then 1. else 3.\n    if False\n      then ref += 100. else\n        ref += 1.\n        ref += 2.\n    if False\n      then ref += 200.\n      else ref += y\n    if False\n      then ref += 300.\n      else\n        ref += 1.\n        ref += 2.\n\n</span></div>","rsbLexemeList":[],"rsbNumLines":16,"rsbLine":58,"rsbText":"    -- Two-armed `if` with `then` indented but the consequent inline.\n    y = if False\n          then 1. else 3.\n    if False\n      then ref += 100. else\n        ref += 1.\n        ref += 2.\n    if False\n      then ref += 200.\n      else ref += y\n    if False\n      then ref += 300.\n      else\n        ref += 1.\n        ref += 2.\n\n"},"Inert",[]],"tag":"Create"}],[12,{"contents":[{"rsbBlockId":12,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">    -- Two-armed `if` with `then` and the consequent both indented.\n    if False\n      then\n        ref += 100.\n        ref += 200.\n      else ref += 3.\n    if False\n      then\n        ref += 100.\n        ref += 200.\n      else\n        ref += 2.\n        ref += 4.\n&gt; 27.\n\n</span></div>","rsbLexemeList":[],"rsbNumLines":15,"rsbLine":74,"rsbText":"    -- Two-armed `if` with `then` and the consequent both indented.\n    if False\n      then\n        ref += 100.\n        ref += 200.\n      else ref += 3.\n    if False\n      then\n        ref += 100.\n        ref += 200.\n      else\n        ref += 2.\n        ref += 4.\n> 27.\n\n"},"Inert",[]],"tag":"Create"}],[13,{"contents":[{"rsbBlockId":13,"rsbHtml":"<div class=\"prose-block\"><p>And here are expample configurations that don't work, showing the resulting parse errors.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":89,"rsbText":"'And here are expample configurations that don't work, showing the resulting parse errors.\n\n"},"Inert",[]],"tag":"Create"}],[14,{"contents":[{"rsbBlockId":14,"rsbHtml":"<div class=\"prose-block\"><p>Inline <code>else</code> is not allowed after indented consequent, whether the\n<code>then</code> keyword is indented or not:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":3,"rsbLine":91,"rsbText":"'Inline `else` is not allowed after indented consequent, whether the\n`then` keyword is indented or not:\n\n"},"Inert",[]],"tag":"Create"}],[15,{"contents":[{"rsbBlockId":15,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">if True\n  then\n    x = 6\n    x else 5\n\n</span></div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":94,"rsbText":"if True\n  then\n    x = 6\n    x else 5\n\n"},"Inert",[]],"tag":"Create"}],[16,{"contents":[{"rsbBlockId":16,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":104,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[17,{"contents":[{"rsbBlockId":17,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">if True then\n  x = 6\n  x else 5\n\n</span></div>","rsbLexemeList":[],"rsbNumLines":4,"rsbLine":105,"rsbText":"if True then\n  x = 6\n  x else 5\n\n"},"Inert",[]],"tag":"Create"}],[18,{"contents":[{"rsbBlockId":18,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":114,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[19,{"contents":[{"rsbBlockId":19,"rsbHtml":"<div class=\"prose-block\"><p>Indented <code>else</code> is not allowed after inline <code>then</code> and indented\nconsequent either, because there is no indentation level for it to match.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":3,"rsbLine":115,"rsbText":"'Indented `else` is not allowed after inline `then` and indented\nconsequent either, because there is no indentation level for it to match.\n\n"},"Inert",[]],"tag":"Create"}],[20,{"contents":[{"rsbBlockId":20,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">:p\n if True then\n   x = 6\n   x\n  else 5\n\n</span></div>","rsbLexemeList":[],"rsbNumLines":6,"rsbLine":118,"rsbText":":p\n if True then\n   x = 6\n   x\n  else 5\n\n"},"Inert",[]],"tag":"Create"}],[21,{"contents":[{"rsbBlockId":21,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":129,"rsbText":"\n"},"Inert",[]],"tag":"Create"}]]}
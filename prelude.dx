
'## Dex prelude

'Runs before every Dex program unless an alternative is provided with `--prelude`.

'Wrappers around primitives

Int  = %Int
Real = %Real
Bool = %Bool
Unit = %UnitType
Type = %TyKind
Effects = %EffKind

def unsafeNewtypeCon     (a:Type)?-> (b:Type) ?-> (x:a) : b = %newtypeCon b x
def unsafeFromNewtypeCon (a:Type)?-> (b:Type) ?-> (x:a) : b = %fromNewtypeCon b x

def (&) (a:Type) (b:Type) : Type = %PairType a b
def (,) (x:a) (y:b) : a & b = %pair x y
def fst (p: a & b) : a = %fst p
def snd (p: a & b) : b = %snd p

def idiv (x:Int) (y:Int) : Int = %idiv x y
def rem  (x:Int) (y:Int) : Int = %rem  x y
def ipow (x:Int) (y:Int) : Int = %pow  x y

@newtype def Add (a:Type) : Type = (a->a->a & a->a->a & a)  -- add, sub, zero
MkAdd   : (a->a->a & a->a->a & a) -> Add a = unsafeNewtypeCon
fromAdd : Add a -> (a->a->a & a->a->a & a) = unsafeFromNewtypeCon

def (+)  (d:Add a) ?=> : a -> a -> a =       fst $ fromAdd d
def (-)  (d:Add a) ?=> : a -> a -> a = fst $ snd $ fromAdd d
def zero (d:Add a) ?=> : a           = snd $ snd $ fromAdd d

@instance realAdd : Add Real = MkAdd (\x y. %fadd x y, \x y. %fsub x y, 0.0)
@instance intAdd  : Add Int  = MkAdd (\x y. %iadd x y, \x y. %isub x y, 0)

@instance tabAdd : Add a ?=> Add (n=>a) =
  MkAdd ( \xs ys. for i. xs.i + ys.i
        , \xs ys. for i. xs.i - ys.i
        , for _. zero)

@newtype def Mul (a:Type) : Type = a->a->a
MkMul   : (a->a->a) -> Mul a = unsafeNewtypeCon
fromMul : Mul a -> (a->a->a) = unsafeFromNewtypeCon

def (*)  (d:Mul a) ?=> : a -> a -> a = fromMul d

@instance realMul : Mul Real = MkMul \x y. %fmul x y
@instance intMul  : Mul Int  = MkMul \x y. %imul x y

@newtype def VSpace (a:Type) : Type = Real -> a -> a
MkVSpace   : (Real->a->a) -> VSpace a = unsafeNewtypeCon
fromVSpace : VSpace a -> (Real->a->a) = unsafeFromNewtypeCon

flip : (a -> b -> c) -> (b -> a -> c) = \f x y. f y x

def (.*)  (d:VSpace a) ?=> : Real -> a -> a = fromVSpace d
(*.)  : VSpace a ?=> a -> Real -> a = flip (.*)

@instance realVS : VSpace Real = MkVSpace (*)
@instance tabVS  : VSpace a ?=> VSpace (n=>a) = MkVSpace \s xs. for i. s .* xs.i

def neg (x:Real)          : Real = %fneg x
def (/) (x:Real) (y:Real) : Real = %fdiv x y

True  = %True
False = %False
def (&&) (x:Bool) (y:Bool) : Bool = %and x y
def (||) (x:Bool) (y:Bool) : Bool = %or  x y
def not  (x:Bool)          : Bool = %not x

'Sum types

def (|) (a:Type) (b:Type) : Type = %SumType a b
def anyVal (a:Type) ?-> : a = %anyVal a
def sumCon (isLeft:Bool) (l:a) (r:b) : (a|b) = %sumCon isLeft l r
def Left  (x:a) : (a|b) = sumCon True  x      anyVal
def Right (x:b) : (a|b) = sumCon False anyVal x
def caseAnalysis (x:a|b) (l:a->c) (r:b->c) : c = %caseAnalysis x l r

def select (p:Bool) (x:a) (y:a) : a = %select p x y

def i2r (x:Int ) : Real = %inttoreal x
def b2i (x:Bool) : Int  = %booltoint x
def b2r (x:Bool) : Real = i2r (b2i x)
def todo (a:Type) ?-> : a = %todo a

'Effects

def Ref (r:Type) (a:Type) : Type = %Ref r a
def get  (ref:Ref h s)       : {State h} s    = %get  ref
def (:=) (ref:Ref h s) (x:s) : {State h} Unit = %put  ref x
def ask  (ref:Ref h r)       : {Read  h} r    = %ask  ref
def (+=) (ref:Ref h w) (x:w) : {Accum h} Unit = %tell ref x
def (!)  (ref:Ref h (n=>a)) (i:n) : Ref h a = %indexRef ref i

def withReader
      (eff:Effects) ?-> (a:Type) ?-> (r:Type) ?->
      (init:r) (action: (h:Type ?-> Ref h r -> {Read h|eff} a))
      : {|eff} a =
    def explicitAction (h':Type) (ref:Ref h' r) : {Read h'|eff} a = action ref
    %runReader init explicitAction

def withAccum
      (eff:Effects) ?-> (a:Type) ?-> (w:Type) ?->
      (action: (h:Type ?-> Ref h w -> {Accum h|eff} a))
      : {|eff} (a & w) =
    def explicitAction (h':Type) (ref:Ref h' w) : {Accum h'|eff} a = action ref
    %runWriter explicitAction

def withState
      (eff:Effects) ?-> (a:Type) ?-> (s:Type) ?->
      (init:s)
      (action: (h:Type ?-> Ref h s -> {State h |eff} a))
      : {|eff} (a & s) =
    def explicitAction (h':Type) (ref:Ref h' s) : {State h'|eff} a = action ref
    %runState init explicitAction

'Type classes

@newtype
def Eq (a:Type) : Type = a -> a -> Bool
def MkEq (f: a -> a -> Bool) : Eq a = unsafeNewtypeCon f
def fromEq (d:Eq a) : a -> a -> Bool = unsafeFromNewtypeCon d

@newtype
def Ord (a:Type) : Type = (Eq a & a -> a -> Bool & a -> a -> Bool)  -- eq, gt, lt
def MkOrd (eq:Eq a) -> (gt: a -> a -> Bool) -> (lt: a -> a -> Bool) : Ord a = unsafeNewtypeCon (eq, gt, lt)
def fromOrd (d:Ord a) : (Eq a & a -> a -> Bool & a -> a-> Bool) = unsafeFromNewtypeCon d

@superclass
def eqFromOrd (d:Ord a) : Eq a = fst (fromOrd d)

def (==) (d:Eq a) ?=> (x:a) (y:a) : Bool = (fromEq d) x y
def (/=) (d:Eq a) ?=> (x:a) (y:a) : Bool = not $ x == y

def (>)  (d:Ord a) ?=> (x:a) (y:a) : Bool = fst (snd (fromOrd d)) x y
def (<)  (d:Ord a) ?=> (x:a) (y:a) : Bool = snd (snd (fromOrd d)) x y
def (<=) (d:Ord a) ?=> (x:a) (y:a) : Bool = x<y || x==y
def (>=) (d:Ord a) ?=> (x:a) (y:a) : Bool = x>y || x==y

@instance
intEq : Eq Int = MkEq \x y. %ieq x y

@instance
intOrd : Ord Int = MkOrd intEq (\x y. %igt x y) (\x y. %ilt x y)

@instance
realEq : Eq Real = MkEq \x y. %feq x y

@instance
realOrd : Ord Real = MkOrd realEq (\x y. %fgt x y) (\x y. %flt x y)

@instance
def pairEq (eqA: Eq a)?=> (eqB: Eq b)?=> : Eq (a & b) = MkEq $
  \(x1,x2) (y1,y2). x1 == y1 && x2 == y2

@instance
def pairOrd (ordA: Ord a)?=> (ordB: Ord b)?=> : Ord (a & b) =
  pairGt = \(x1,x2) (y1,y2). x1 > y1 || (x1 == y1 && x2 > y2)
  pairLt = \(x1,x2) (y1,y2). x1 < y1 || (x1 == y1 && x2 < y2)
  MkOrd pairEq pairGt pairLt

@instance
def sumEq (eqA: Eq a)?=> (eqB: Eq b)?=> : Eq (a | b) = MkEq $
  \x y. case x
    Left  xVal -> case y
      Left  yVal -> xVal == yVal
      Right yVal -> False
    Right xVal -> case y
      Left  yVal -> False
      Right yVal -> xVal == yVal

-- TODO: accumulate using the True/&& monoid
@instance
def tabEq (n:Type) ?-> (eqA: Eq a) ?=> : Eq (n=>a) = MkEq $
  \xs ys.
    numDifferent : Real =
      snd $ withAccum \ref. for i.
        ref += (i2r (b2i (xs.i /= ys.i)))
    numDifferent == 0.0

'Wrappers around C library functions

def exp (x:Real) : Real = %ffi exp Real x
def log (x:Real) : Real = %ffi log Real x
def sin (x:Real) : Real = %ffi sin Real x
def cos (x:Real) : Real = %ffi cos Real x
def tan (x:Real) : Real = %ffi tan Real x
def sqrt (x:Real) : Real = %ffi sqrt Real x
def floor (x:Real) : Int = %ffi floorDex Int x
def pow (x:Real) (y:Real) : Real = %ffi pow Real x y

'Working with index sets

def Range (low:Int) (high:Int) : Type = %IntRange low high
def Fin (n:Int) : Type = Range 0 n
def ordinal (i:a) : Int = %asint i
def size (n:Type) : Int = %idxSetSize n
def fromOrdinal (n:Type) (i:Int) : n = %asidx n i
def asidx (n:Type) ?-> (i:Int) : n = fromOrdinal n i
def (@) (i:Int) (n:Type) : n = fromOrdinal n i
def ixadd (n:Type) ?-> (i:n) (x:Int) : n = fromOrdinal n $ ordinal i + x
def ixsub (n:Type) ?-> (i:n) (x:Int) : n = fromOrdinal n $ ordinal i - x
def iota (n:Type) : n=>Int = for i. ordinal i

-- TODO: we want Eq and Ord for all index sets, not just `Fin n`
@instance
def finEq (n:Int) ?-> : Eq (Fin n) = MkEq \x y. ordinal x == ordinal y

@instance
def finOrd (n:Int) ?-> : Ord (Fin n) =
  MkOrd finEq (\x y. ordinal x > ordinal y) (\x y. ordinal x < ordinal y)

'Misc

pi : Real = 3.141592653589793

def id (x:a) : a = x
def dup (x:a) : (a & a) = (x, x)
-- TODO: unpack pair in args once we fix the bug
def swap (p:a&b) : (b&a) = (snd p, fst p)
def map (f:a->{|eff} b) (xs: n=>a) : {|eff} (n=>b) = for i. f xs.i
def zip (xs:n=>a) (ys:n=>b) : (n=>(a&b)) = for i. (xs.i, ys.i)
def unzip (xys:n=>(a&b)) : (n=>a & n=>b) = (map fst xys, map snd xys)
def fanout (n:Type) (x:a) : n=>a = for i. x
def sq (d:Mul a) ?=> (x:a) : a = x * x
def abs (x:Real) : Real = select (x > 0.0) x (-x)
def mod (x:Int) (y:Int) : Int = rem (y + rem x y) y
def compose (f:b->c) (g:a->b) (x:a) : c = f (g x)

def slice (xs:n=>a) (start:Int) (m:Type) : m=>a =
  for i. xs.(fromOrdinal _ (ordinal i + start))

def scan (init:a) (body:n->a->(a&b)) : (a & n=>b) =
  swap $ withState init \s. for i.
    c = get s
    (c', y) = body i c
    s := c'
    y

def fold (init:a) (body:(n->a->a)) : a = fst $ scan init \i x. (body i x, ())
-- TODO: call this `scan` and call the current `scan` something else
def scan' (init:a) (body:n->a->a) : n=>a = snd $ scan init \i x. dup (body i x)
-- TODO: allow tables-via-lambda and get rid of this
def fsum (xs:n->Real) : Real = snd $ withAccum \ref. for i. ref += xs i
def sum  (xs:n=>Real) : Real = snd $ withAccum \ref. for i. ref += xs.i
def isum (xs:n=>Int) : Int = fold 0 \i c. c + xs.i
def mean (n:Type) ?-> (xs:n=>Real) : Real = sum xs / i2r (size n)
def std (xs:n=>Real) : Real = sqrt $ mean (map sq xs) - sq (mean xs)

def linspace (n:Type) (low:Real) (high:Real) : n=>Real =
  dx = (high - low) / i2r (size n)
  for i:n. low + i2r (ordinal i) * dx

def transpose (x:n=>m=>Real) : m=>n=>Real = for i j. x.j.i
def vdot (x:n=>Real) (y:n=>Real) : Real = fsum \i. x.i * y.i

-- matmul. Better symbol to use? `@`?
(**) : (l=>m=>Real) -> (m=>n=>Real) -> (l=>n=>Real) = \x y.
  y' = transpose y
  for i k. fsum \j. x.i.j * y'.k.j

(**.) : (n=>m=>Real) -> (m=>Real) -> (n=>Real) = \mat v. for i. vdot mat.i v
(.**) : (m=>Real) -> (n=>m=>Real) -> (n=>Real) = flip (**.)

def inner (x:n=>Real) (mat:n=>m=>Real) (y:m=>Real) : Real =
  fsum \(i,j). x.i * mat.i.j * y.j

'Functions for working with the pseudorandom number generator

-- TODO: newtype
Key = Int

def hash (x:Key) (y:Int) : Key = %ffi threefry2x32 Int x y
def newKey (x:Int) : Key = hash 0 x
def splitKey (k:Key) : (Key & Key) = (hash k 0, hash k 1)
def splitKey3 (k:Key) : (Key & Key & Key) =
  (k1, k') = splitKey k
  (k2, k3) = splitKey k'
  (k1, k2, k3)

def many (f:Key->a) (k:Key) (i:n) : a = f (hash k (ordinal i))
def ixkey (k:Key) (i:n) : Key = hash k (ordinal i)
def ixkey2 (k:Key) (i:n) (j:m) : Key = hash (hash k (ordinal i)) (ordinal j)
def rand (k:Key) : Real = %ffi randunif Real k

def randn (k:Key) : Real =
  (k1, k2) = splitKey k
  u1 = rand k1
  u2 = rand k2
  sqrt ((-2.0) * log u1) * cos (2.0 * pi * u2)

def randIdx (n:Type) ?-> (k:Key) : n =
  unif = rand k
  fromOrdinal n $ floor $ unif * i2r (size n)

'min / max etc  (TODO: implement with a monoid-parameterized writer)

def minBy (f:a->Real) (x:a) (y:a) : a = select ((f x) < (f y)) x y
def maxBy (f:a->Real) : a -> a -> a = minBy (neg `compose` f)

min : Real -> Real -> Real = minBy id
max : Real -> Real -> Real = maxBy id

def minimumBy (f:a->Real) (xs:n=>a) : a = fold xs.(fromOrdinal _ 0) (\i. minBy f xs.i)
def maximumBy (f:a->Real) (xs:n=>a) : a = minimumBy (neg `compose` f) xs

def minimum (xs:n=>Real) : Real = minimumBy id xs
def maximum (xs:n=>Real) : Real = maximumBy id xs

def argmin (xs:n=>Real) : n =
  fst $ fold (fromOrdinal _ 0, xs.(fromOrdinal _ 0)) \i (bestIx, bestDist).
    select (xs.i < bestDist) (i, xs.i) (bestIx, bestDist)

'Automatic differentiation

-- TODO: add vector space constraints
def linearize (f:a->b) (x:a) : (b & a --o b) = %linearize f x
def jvp (f:a->b) (x:a) (t:a) --o : b = snd (linearize f x) t
def transposeLinear (f:a --o b) : b --o a = %linearTranspose f

def vjp (f:a->b) (x:a) : (b & b --o a) =
  (y, df) = linearize f x
  (y, transposeLinear df)

def grad (f:a->Real) (x:a) : a = snd (vjp f x) 1.0

def deriv (f:Real->Real) (x:Real) : Real = jvp f x 1.0

def derivRev (f:Real->Real) (x:Real) : Real = snd (vjp f x) 1.0

def checkDerivBase (f:Real->Real) (x:Real) : Bool =
  -- TODO: parse 1e-5
  eps = 0.00005
  ansFwd  = deriv    f x
  ansRev  = derivRev f x
  ansNumeric = (f (x + eps) - f (x - eps)) / (2. * eps)
  isClose = \a b. abs (a - b) < 0.001
  isClose ansFwd ansNumeric && isClose ansRev ansNumeric

def checkDeriv (f:Real->Real) (x:Real) : Bool =
  checkDerivBase f x && checkDerivBase (deriv f) x

def while (cond: Unit -> {|eff} Bool) (body: Unit -> {|eff} Unit) : {|eff} Unit =
  %while cond body

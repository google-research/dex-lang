'## Dex prelude

'Runs before every Dex program unless an alternative is provided with `--prelude`.

'Curried wrappers around built-in functions

iadd :: Int -> Int -> Int
iadd x y = %iadd(x, y)

isub :: Int -> Int -> Int
isub x y = %isub(x, y)

imul :: Int -> Int -> Int
imul x y = %imul(x, y)

rem :: Int -> Int -> Int
rem x y = %rem(x, y)

mod :: Int -> Int -> Int
mod x y = rem (iadd y (rem x y)) y

neg :: Real --o Real
neg x = %fneg(x)

fadd :: Real -> Real -> Real
fadd x y = %fadd(x, y)

fsub :: Real -> Real -> Real
fsub x y = %fsub(x, y)

fmul :: Real --o Real --o Real
fmul x y = %fmul(x, y)

fdiv :: Real --o Real -> Real
fdiv x y = %fdiv(x, y)

ipow :: Int -> Int -> Int
ipow x y = %pow(x, y)

pow :: Real -> Real -> Real
pow x y = %%pow(x, y)

asint :: A i::Ix. i -> Int
asint i = %asint(i)

asidx :: A i::Ix. Int -> i
asidx i = %asidx(i)

real :: Int -> Real
real x = %inttoreal(x)

b2i :: Bool -> Int
b2i x = %booltoint(x)

filter :: (a -> Bool) -> n=>a -> E m. m=>a
filter f x = %filter(f, x)

not :: Bool -> Bool
not x = %not(x)

and :: Bool -> Bool -> Bool
and x y = %and(x, y)

or :: Bool -> Bool -> Bool
or x y = %not(x, y)

-- `todo` is like `undefined` in Haskell
todo :: a
todo = %todo()

'Wrappers around C library functions

@primitive
exp :: Real -> Real
exp x = %%exp(x)

@primitive
log :: Real -> Real
log x = %%log(x)

@primitive
sqrt :: Real -> Real
sqrt x = %%sqrt(x)

@primitive
sin :: Real -> Real
sin x = %%sin(x)

@primitive
cos :: Real -> Real
cos x = %%cos(x)

tan :: Real -> Real
tan x = %%tan(x)

floor :: Real -> Int
floor x = %%floorDex(x)

'Misc functions

fst :: (a, b) --o a
fst (x, y) = x

snd :: (a, b) --o b
snd (x, y) = y

-- Hope to need this less with linearity polymoprhism
asNonLin :: (a --o b) -> a -> b
asNonLin f x = f x

b2r :: Bool -> Real
b2r x = real $ b2i x

pi :: Real
pi = 3.141592653589793

ixadd :: A i::Ix. i -> Int -> i
ixadd i n = asidx $ iadd (asint i) n

ixsub :: A i::Ix. i -> Int -> i
ixsub i n = asidx $ isub (asint i) n

iota :: n=>Int
iota = for i. asint i

id :: a -> a
id x = x

dup :: a -> (a, a)
dup x = (x, x)

map :: (a -> b) -> n=>a -> n=>b
map f xs = for i. f xs.i

map2 :: (a -> b) -> n=>m=>a -> n=>m=>b
map2 f xs = for i j. f xs.i.j

zip :: n=>a -> n=>b -> n=>(a,b)
zip xs ys = for i. (xs.i, ys.i)

unzip :: n=>(a, b) -> (n=>a, n=>b)
unzip xys = (map (asNonLin fst) xys, map (asNonLin snd) xys)

fanout :: A n a. a -> n=>a
fanout x = for i. x

sq :: Real -> Real
sq x = x * x

select :: A a::Data. Bool -> a -> a -> a
select p x y = %select(p, x, y)

abs :: Real -> Real
abs x = select (x > 0.0) x (0.0 - x)


'State-carrying loop constructs

scan :: A n::Ix a::Data b .  a -> n=>(a->(a, b)) -> (a, n=>b)
scan x0 fs = %scan(x0, for i. lam x. fs.i x)

fold :: A n::Ix a::Data . a -> n=>(a->a) -> a
fold x0 fs = fst $ scan x0 for i. lam x. (fs.i x, ())

-- TODO: call this `scan` and call the current `scan` something else
scan' :: A n::Ix a::Data . a -> n=>(a->a) -> n=>a
scan' x0 fs = snd $ scan x0 for i. lam x. dup (fs.i x)

scanlin :: A n::Ix c::Data a b . ((c,a) --o (c,b)) -> (c, n=>a) --o (c, n=>b)
scanlin f (c0, xs) = %scan(c0, for i. lam c. f (c, xs.i) )

foldlin :: A n::Ix c::Data a . ((c, a) --o c) -> (c, n=>a) --o c
foldlin f (c0, xs) = fst $ scanlin (llam (c,x). (f (c, x), ())) (c0, xs)

'More misc functions

sum :: n=>Real --o Real
sum xs = foldlin (llam (c,x). c + x) (0.0, xs)

isum :: n=>Int -> Int
isum xs = fold 0 for i. x = xs.i; lam c. iadd c x

-- TODO: make this a builtin for efficiency
size :: A n::Ix. Int
size = isum for i::n. 1

range :: Int -> E i. ()
range n = %range(n)

mean :: A n. n=>Real --o Real
mean xs = sum xs / real (size @n)

std :: A n. n=>Real -> Real
std xs = sqrt $ mean (map sq xs) - sq (mean xs)

linspace :: A n. Real -> Real -> n=>Real
linspace low high = dx = (high - low) / real (size @n)
                    for i::n. low + real (asint i) * dx

'Functions for working with the pseudorandom number generator

newtype Key = Int

hash :: Key -> Int -> Key
hash x y = %%threefry2x32(x, y)

newKey :: Int -> Key
newKey x = hash %newtypecast(0) x

splitKey :: Key -> (Key, Key)
splitKey key = (hash key 0, hash key 1)

splitKey3 :: Key -> (Key, Key, Key)
splitKey3 key =
  (k1, key') = splitKey key
  (k2, k3) = splitKey key'
  (k1, k2, k3)

many :: A n a. (Key -> a) -> Key -> n=>a
many f key = for i. f (hash key (asint i))

ixkey :: A n::Ix. Key -> n -> Key
ixkey x i = hash x (asint i)

rand :: Key -> Real
rand x = %%randunif(x)

randn :: Key -> Real
randn k =
  (k1, k2) = splitKey k
  u1 = rand k1
  u2 = rand k2
  sqrt (-2.0 * log u1) * cos (2.0 * pi * u2)

randIdx :: A n::Ix. Key -> n
randIdx key =
  unif = rand key
  asidx $ floor $ unif * real (size @n)

'min / max etc

minby :: A a::Data. (a->Real)->a->a->a
minby f x y = select ((f x) < (f y)) x y

min :: Real -> Real -> Real
min = minby id

minimumby:: A p q::Data. (q->Real)->(p=>q)->q
minimumby f xs = fold xs.(asidx 0) (for i. minby f xs.i)

minimum:: A p. (p=>Real)->Real
minimum = minimumby id

negf :: (a->Real) -> (a->Real)
negf f x = -1.0 * (f x)

maxby :: A a::Data. (a->Real)->a->a->a
maxby f = minby (negf f)

max :: Real -> Real -> Real
max x y = maxby id x y

maximumby:: A p q::Data. (q->Real)->(p=>q)->q
maximumby f = minimumby (negf f)

maximum:: A p. (p=>Real)->Real
maximum xs = maximumby id xs

'Vector spaces and automatic differentiation.

vzero :: A a::VS. a
vzero = %vzero()

vadd :: A a::VS. a -> a -> a
vadd x y = %vadd(x, y)

vsingle :: A a::VS n. n -> a -> n=>a
vsingle i x = %vsingle(i, x)

vsum :: A a::VS n. n=>a -> a
vsum xs = %vsum(for i. xs.i)

linearize :: A a::VS b::VS. (a -> b) -> a -> (b, a --o b)
linearize f x0 = %linearize(lam x. f x, x0)

jvp :: A a::VS b::VS. (a -> b) -> a -> a --o b
jvp f x = llam t. snd (linearize f x) t

transposeLinear :: A a::VS b::VS. (a --o b) --o b --o a
transposeLinear = llam f ct. %linearTranspose(llam t. f t) ct

vjp :: A a::VS b::VS. (a -> b) -> a -> (b, b --o a)
vjp f x = (y, df) = linearize f x
          (y, transposeLinear df)

grad :: A a::VS. (a -> Real) -> a -> a
grad f x = (_, pullback) = vjp f x
           pullback 1.0

deriv :: (Real -> Real) -> Real -> Real
deriv f x = jvp f x 1.0

derivRev :: (Real -> Real) -> Real -> Real
derivRev f x = snd (vjp f x) 1.0

checkDerivBase :: (Real -> Real) -> Real -> Bool
checkDerivBase f x =
  eps = 1e-5
  ansFwd  = deriv    f x
  ansRev  = derivRev f x
  ansNumeric = (f (x + eps) - f (x - eps)) / (2. * eps)
  isClose a b = abs (a - b) < 1e-3
  isClose ansFwd ansNumeric && isClose ansRev ansNumeric

checkDeriv :: (Real -> Real) -> Real -> Bool
checkDeriv f x = checkDerivBase f x && checkDerivBase (deriv f) x

forUnzip :: n=>(b, a -> b) -> (n=>b, a -> n=>b)
forUnzip xfs = (xs, fs) = unzip xfs
               (xs, lam t. for i. fs.i t)

sin#lin :: Real -> (Real, Real --o Real)
sin#lin x = (sin x, llam t. t * cos x)

cos#lin :: Real -> (Real, Real --o Real)
cos#lin x = (cos x, llam t. t * (neg (sin x)))

exp#lin :: Real -> (Real, Real --o Real)
exp#lin x =
  ans = exp x
  (ans, llam t. t * ans)

log#lin :: Real -> (Real, Real --o Real)
log#lin x = (log x, llam t. t / x)

sqrt#lin :: Real -> (Real, Real --o Real)
sqrt#lin x =
  ans = sqrt x
  (ans, llam t. 0.5 * t / ans)

{"orderedNodesUpdate":{"numDropped":0,"newTail":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77]},"nodeMapUpdate":[[0,{"contents":[{"rsbBlockId":0,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\"></span></div>","rsbLexemeList":[],"rsbNumLines":0,"rsbLine":0,"rsbText":""},"Complete",[{"contents":[[0,0]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[0,0],"tnHighlights":[[0,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"}]],"tag":"Create"}],[1,{"contents":[{"rsbBlockId":1,"rsbHtml":"<div class=\"prose-block\"><h1>Functions and function types</h1>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":1,"rsbText":"'# Functions and function types\n\n"},"Inert",[]],"tag":"Create"}],[2,{"contents":[{"rsbBlockId":2,"rsbHtml":"<div class=\"prose-block\"><p>Generally Dex functions are defined with the <code>def</code> keyword, for example</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":3,"rsbText":"'Generally Dex functions are defined with the `def` keyword, for example\n\n"},"Inert",[]],"tag":"Create"}],[3,{"contents":[{"rsbBlockId":3,"rsbHtml":"<div class=\"code-block\"><span class=\"keyword\" id=\"span_3_2\">def</span><span> </span><span id=\"span_3_3\">square</span><span class=\"symbol\" id=\"span_3_5\">(</span><span id=\"span_3_6\">x</span><span class=\"symbol\" id=\"span_3_7\">:</span><span> </span><span id=\"span_3_9\">Float</span><span class=\"symbol\" id=\"span_3_10\">)</span><span> </span><span class=\"symbol\" id=\"span_3_11\">-&gt;</span><span> </span><span id=\"span_3_12\">Float</span><span> </span><span class=\"symbol\" id=\"span_3_13\">=</span><span class=\"comment\">\n  </span><span id=\"span_3_16\">x</span><span> </span><span class=\"symbol\" id=\"span_3_17\">*</span><span> </span><span id=\"span_3_19\">x</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[2,3,5,6,7,9,10,11,12,13,16,17,19],"rsbNumLines":2,"rsbLine":5,"rsbText":"def square(x: Float) -> Float =\n  x * x\n"},"Complete",[{"contents":[[2,1],[3,3],[5,4],[6,6],[7,8],[9,9],[10,4],[11,1],[12,12],[13,1],[16,16],[17,17],[19,19]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[2,19],"tnHighlights":[[1,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[1,{"contents":{"tnSpan":[2,19],"tnHighlights":[[2,"HighlightLeaf"],[11,"HighlightLeaf"],[13,"HighlightLeaf"],[3,"HighlightGroup"],[4,"HighlightGroup"],[12,"HighlightGroup"],[14,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[2,{"contents":{"tnSpan":[2,2],"tnHighlights":[[2,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[3,{"contents":{"tnSpan":[3,3],"tnHighlights":[[3,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[4,{"contents":{"tnSpan":[5,10],"tnHighlights":[[5,"HighlightLeaf"],[10,"HighlightLeaf"],[8,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[5,{"contents":{"tnSpan":[5,5],"tnHighlights":[[5,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[6,{"contents":{"tnSpan":[6,6],"tnHighlights":[[6,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[7,{"contents":{"tnSpan":[7,7],"tnHighlights":[[7,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[8,{"contents":{"tnSpan":[6,9],"tnHighlights":[[7,"HighlightLeaf"],[6,"HighlightGroup"],[9,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[9,{"contents":{"tnSpan":[9,9],"tnHighlights":[[9,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[10,{"contents":{"tnSpan":[10,10],"tnHighlights":[[10,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[11,{"contents":{"tnSpan":[11,11],"tnHighlights":[[11,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[12,{"contents":{"tnSpan":[12,12],"tnHighlights":[[12,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[13,{"contents":{"tnSpan":[13,13],"tnHighlights":[[13,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[14,{"contents":{"tnSpan":[16,19],"tnHighlights":[[15,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[15,{"contents":{"tnSpan":[16,19],"tnHighlights":[[18,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[16,{"contents":{"tnSpan":[16,16],"tnHighlights":[[16,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[17,{"contents":{"tnSpan":[17,17],"tnHighlights":[[17,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[18,{"contents":{"tnSpan":[16,19],"tnHighlights":[[16,"HighlightGroup"],[17,"HighlightGroup"],[19,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[19,{"contents":{"tnSpan":[19,19],"tnHighlights":[[19,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[3,{"contents":{"tnuHighlights":[[3,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[6,{"contents":{"tnuHighlights":[[6,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[9,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nFloat = Float32\n"]},"tag":"Update"}],[12,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nFloat = Float32\n"]},"tag":"Update"}],[16,{"contents":{"tnuHighlights":[[6,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[6,{"contents":{"tnuHighlights":[[16,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[17,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ninterface Mul(a|Data)\n  (*) : (a, a) -> a\n  one : a\n"]},"tag":"Update"}],[19,{"contents":{"tnuHighlights":[[6,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[6,{"contents":{"tnuHighlights":[[19,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[1,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((x:Float32) -> Float32)"]},"tag":"Update"}],[6,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[9,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[12,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[16,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[17,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}[v#0:(Mul a)](v#1:a,v#2:a) -> a)"]},"tag":"Update"}],[18,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[19,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["TypePass",null],"tag":"RenderedPassResult"},{"contents":["SimpPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["OptPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"}]],"tag":"Create"}],[4,{"contents":[{"rsbBlockId":4,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":7,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[5,{"contents":[{"rsbBlockId":5,"rsbHtml":"<div class=\"code-block\"><span id=\"span_5_21\">square</span><span> </span><span class=\"literal\" id=\"span_5_23\">5.0</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[21,23],"rsbNumLines":1,"rsbLine":8,"rsbText":"square 5.0\n"},"Complete",[{"contents":[[21,21],[23,23]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[21,23],"tnHighlights":[[22,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[21,{"contents":{"tnSpan":[21,21],"tnHighlights":[[21,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[22,{"contents":{"tnSpan":[21,23],"tnHighlights":[[21,"HighlightGroup"],[23,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[23,{"contents":{"tnSpan":[23,23],"tnHighlights":[[23,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[21,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in main:\ndef square(x: Float) -> Float =\n  x * x\n"]},"tag":"Update"}],[22,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef show_any(x:a) -> String given (a:Type) = unsafe_coerce(to=String, %showAny(x))\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[21,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((x:Float32) -> Float32)"]},"tag":"Update"}],[22,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}(x:a) -> (List Word8))"]},"tag":"Update"}],[23,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["TypePass",null],"tag":"RenderedPassResult"},{"contents":["SimpPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["OptPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"},{"contents":"25.","tag":"RenderedTextOut"}]],"tag":"Create"}],[6,{"contents":[{"rsbBlockId":6,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":10,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[7,{"contents":[{"rsbBlockId":7,"rsbHtml":"<div class=\"prose-block\"><p>The anatomy of a function definition is</p>\n<pre><code>def &lt;name&gt;(&lt;explicit params&gt;) -&gt; [&lt;effect&gt;] &lt;return type&gt;\n    [given (&lt;implicit params&gt;) [(&lt;constraints&gt;)]] =\n  &lt;body&gt;\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":7,"rsbLine":11,"rsbText":"'The anatomy of a function definition is\n```\ndef <name>(<explicit params>) -> [<effect>] <return type>\n    [given (<implicit params>) [(<constraints>)]] =\n  <body>\n```\n\n"},"Inert",[]],"tag":"Create"}],[8,{"contents":[{"rsbBlockId":8,"rsbHtml":"<div class=\"prose-block\"><p>The <code>name</code> can be any Dex identifier, though it is an error to\nredefine a name already in the same scope (nested definitions\nshadowing outer definitions is allowed).</p>\n</div>","rsbLexemeList":[],"rsbNumLines":4,"rsbLine":18,"rsbText":"'The `name` can be any Dex identifier, though it is an error to\nredefine a name already in the same scope (nested definitions\nshadowing outer definitions is allowed).\n\n"},"Inert",[]],"tag":"Create"}],[9,{"contents":[{"rsbBlockId":9,"rsbHtml":"<div class=\"prose-block\"><h2>Parameters</h2>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":22,"rsbText":"'## Parameters\n\n"},"Inert",[]],"tag":"Create"}],[10,{"contents":[{"rsbBlockId":10,"rsbHtml":"<div class=\"prose-block\"><p>Dex functions can have three kinds of parameters:</p>\n<ol>\n<li>Explicit parameters, which are the normal kind of parameters the caller passes explicitly;</li>\n<li>Implicit parameters, which the compiler fills in from context (like implicit parameters in Agda or Idris); and</li>\n<li>Interface constraints, which the compiler synthesizes based on the\ndefined instances (like typeclasses in Haskell).</li>\n</ol>\n</div>","rsbLexemeList":[],"rsbNumLines":6,"rsbLine":24,"rsbText":"'Dex functions can have three kinds of parameters:\n1. Explicit parameters, which are the normal kind of parameters the caller passes explicitly;\n2. Implicit parameters, which the compiler fills in from context (like implicit parameters in Agda or Idris); and\n3. Interface constraints, which the compiler synthesizes based on the\n   defined instances (like typeclasses in Haskell).\n\n"},"Inert",[]],"tag":"Create"}],[11,{"contents":[{"rsbBlockId":11,"rsbHtml":"<div class=\"prose-block\"><p>The interface constraints are also implicit in that the caller does\nnot explicitly supply them, but we distinguish them because they are\nfilled in by a different mechanism from the implicit parameters in\nitem (2).</p>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":30,"rsbText":"'The interface constraints are also implicit in that the caller does\nnot explicitly supply them, but we distinguish them because they are\nfilled in by a different mechanism from the implicit parameters in\nitem (2).\n\n"},"Inert",[]],"tag":"Create"}],[12,{"contents":[{"rsbBlockId":12,"rsbHtml":"<div class=\"prose-block\"><p>Here's an example of a definition that uses all three:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":35,"rsbText":"'Here's an example of a definition that uses all three:\n\n"},"Inert",[]],"tag":"Create"}],[13,{"contents":[{"rsbBlockId":13,"rsbHtml":"<div class=\"code-block\"><span class=\"keyword\" id=\"span_13_25\">def</span><span> </span><span id=\"span_13_26\">average</span><span class=\"symbol\" id=\"span_13_28\">(</span><span id=\"span_13_29\">xs</span><span class=\"symbol\" id=\"span_13_30\">:</span><span> </span><span id=\"span_13_32\">n</span><span class=\"symbol\" id=\"span_13_33\">=&gt;</span><span id=\"span_13_35\">Float</span><span class=\"symbol\" id=\"span_13_36\">)</span><span> </span><span class=\"symbol\" id=\"span_13_37\">-&gt;</span><span> </span><span id=\"span_13_38\">Float</span><span> </span><span class=\"keyword\" id=\"span_13_39\">given</span><span> </span><span class=\"symbol\" id=\"span_13_41\">(</span><span id=\"span_13_42\">n</span><span class=\"symbol\" id=\"span_13_43\">:</span><span id=\"span_13_45\">Type</span><span class=\"symbol\" id=\"span_13_46\">)</span><span> </span><span class=\"symbol\" id=\"span_13_48\">(</span><span class=\"symbol\" id=\"span_13_50\">_</span><span class=\"symbol\" id=\"span_13_51\">:</span><span id=\"span_13_53\">Ix</span><span> </span><span id=\"span_13_55\">n</span><span class=\"symbol\" id=\"span_13_56\">)</span><span> </span><span class=\"symbol\" id=\"span_13_57\">=</span><span class=\"comment\">\n  </span><span id=\"span_13_60\">total</span><span> </span><span class=\"symbol\" id=\"span_13_61\">=</span><span> </span><span id=\"span_13_62\">sum</span><span> </span><span id=\"span_13_64\">xs</span><span class=\"comment\">\n  </span><span id=\"span_13_66\">total</span><span> </span><span class=\"symbol\" id=\"span_13_67\">/</span><span> </span><span class=\"symbol\" id=\"span_13_70\">(</span><span id=\"span_13_71\">n_to_f</span><span> </span><span class=\"symbol\" id=\"span_13_72\">$</span><span> </span><span id=\"span_13_74\">size</span><span> </span><span id=\"span_13_76\">n</span><span class=\"symbol\" id=\"span_13_77\">)</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[25,26,28,29,30,32,33,35,36,37,38,39,41,42,43,45,46,48,50,51,53,55,56,57,60,61,62,64,66,67,70,71,72,74,76,77],"rsbNumLines":3,"rsbLine":37,"rsbText":"def average(xs: n=>Float) -> Float given (n:Type) (_:Ix n) =\n  total = sum xs\n  total / (n_to_f $ size n)\n"},"Complete",[{"contents":[[25,24],[26,26],[28,27],[29,29],[30,31],[32,32],[33,34],[35,35],[36,27],[37,24],[38,38],[39,24],[41,40],[42,42],[43,44],[45,45],[46,40],[48,47],[50,49],[51,52],[53,53],[55,55],[56,47],[57,24],[60,60],[61,59],[62,62],[64,64],[66,66],[67,67],[70,69],[71,71],[72,73],[74,74],[76,76],[77,69]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[25,77],"tnHighlights":[[24,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[24,{"contents":{"tnSpan":[25,77],"tnHighlights":[[25,"HighlightLeaf"],[37,"HighlightLeaf"],[39,"HighlightLeaf"],[57,"HighlightLeaf"],[26,"HighlightGroup"],[27,"HighlightGroup"],[38,"HighlightGroup"],[40,"HighlightGroup"],[47,"HighlightGroup"],[58,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[25,{"contents":{"tnSpan":[25,25],"tnHighlights":[[25,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[26,{"contents":{"tnSpan":[26,26],"tnHighlights":[[26,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[27,{"contents":{"tnSpan":[28,36],"tnHighlights":[[28,"HighlightLeaf"],[36,"HighlightLeaf"],[31,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[28,{"contents":{"tnSpan":[28,28],"tnHighlights":[[28,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[29,{"contents":{"tnSpan":[29,29],"tnHighlights":[[29,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[30,{"contents":{"tnSpan":[30,30],"tnHighlights":[[30,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[31,{"contents":{"tnSpan":[29,35],"tnHighlights":[[30,"HighlightLeaf"],[29,"HighlightGroup"],[34,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[32,{"contents":{"tnSpan":[32,32],"tnHighlights":[[32,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[33,{"contents":{"tnSpan":[33,33],"tnHighlights":[[33,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[34,{"contents":{"tnSpan":[32,35],"tnHighlights":[[33,"HighlightLeaf"],[32,"HighlightGroup"],[35,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[35,{"contents":{"tnSpan":[35,35],"tnHighlights":[[35,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[36,{"contents":{"tnSpan":[36,36],"tnHighlights":[[36,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[37,{"contents":{"tnSpan":[37,37],"tnHighlights":[[37,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[38,{"contents":{"tnSpan":[38,38],"tnHighlights":[[38,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[39,{"contents":{"tnSpan":[39,39],"tnHighlights":[[39,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[40,{"contents":{"tnSpan":[41,46],"tnHighlights":[[41,"HighlightLeaf"],[46,"HighlightLeaf"],[44,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[41,{"contents":{"tnSpan":[41,41],"tnHighlights":[[41,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[42,{"contents":{"tnSpan":[42,42],"tnHighlights":[[42,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[43,{"contents":{"tnSpan":[43,43],"tnHighlights":[[43,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[44,{"contents":{"tnSpan":[42,45],"tnHighlights":[[43,"HighlightLeaf"],[42,"HighlightGroup"],[45,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[45,{"contents":{"tnSpan":[45,45],"tnHighlights":[[45,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[46,{"contents":{"tnSpan":[46,46],"tnHighlights":[[46,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[47,{"contents":{"tnSpan":[48,56],"tnHighlights":[[48,"HighlightLeaf"],[56,"HighlightLeaf"],[52,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[48,{"contents":{"tnSpan":[48,48],"tnHighlights":[[48,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[49,{"contents":{"tnSpan":[50,50],"tnHighlights":[[50,"HighlightLeaf"]],"tnText":""},"tag":"Create"}],[50,{"contents":{"tnSpan":[50,50],"tnHighlights":[[50,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[51,{"contents":{"tnSpan":[51,51],"tnHighlights":[[51,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[52,{"contents":{"tnSpan":[50,55],"tnHighlights":[[51,"HighlightLeaf"],[49,"HighlightGroup"],[54,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[53,{"contents":{"tnSpan":[53,53],"tnHighlights":[[53,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[54,{"contents":{"tnSpan":[53,55],"tnHighlights":[[53,"HighlightGroup"],[55,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[55,{"contents":{"tnSpan":[55,55],"tnHighlights":[[55,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[56,{"contents":{"tnSpan":[56,56],"tnHighlights":[[56,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[57,{"contents":{"tnSpan":[57,57],"tnHighlights":[[57,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[58,{"contents":{"tnSpan":[60,77],"tnHighlights":[[59,"HighlightGroup"],[65,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[59,{"contents":{"tnSpan":[60,64],"tnHighlights":[[61,"HighlightLeaf"],[60,"HighlightGroup"],[63,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[60,{"contents":{"tnSpan":[60,60],"tnHighlights":[[60,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[61,{"contents":{"tnSpan":[61,61],"tnHighlights":[[61,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[62,{"contents":{"tnSpan":[62,62],"tnHighlights":[[62,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[63,{"contents":{"tnSpan":[62,64],"tnHighlights":[[62,"HighlightGroup"],[64,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[64,{"contents":{"tnSpan":[64,64],"tnHighlights":[[64,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[65,{"contents":{"tnSpan":[66,77],"tnHighlights":[[68,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[66,{"contents":{"tnSpan":[66,66],"tnHighlights":[[66,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[67,{"contents":{"tnSpan":[67,67],"tnHighlights":[[67,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[68,{"contents":{"tnSpan":[66,77],"tnHighlights":[[66,"HighlightGroup"],[67,"HighlightGroup"],[69,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[69,{"contents":{"tnSpan":[70,77],"tnHighlights":[[70,"HighlightLeaf"],[77,"HighlightLeaf"],[73,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[70,{"contents":{"tnSpan":[70,70],"tnHighlights":[[70,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[71,{"contents":{"tnSpan":[71,71],"tnHighlights":[[71,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[72,{"contents":{"tnSpan":[72,72],"tnHighlights":[[72,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[73,{"contents":{"tnSpan":[71,76],"tnHighlights":[[72,"HighlightLeaf"],[71,"HighlightGroup"],[75,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[74,{"contents":{"tnSpan":[74,74],"tnHighlights":[[74,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[75,{"contents":{"tnSpan":[74,76],"tnHighlights":[[74,"HighlightGroup"],[76,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[76,{"contents":{"tnSpan":[76,76],"tnHighlights":[[76,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[77,{"contents":{"tnSpan":[77,77],"tnHighlights":[[77,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[26,{"contents":{"tnuHighlights":[[26,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[29,{"contents":{"tnuHighlights":[[29,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[32,{"contents":{"tnuHighlights":[[42,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[42,{"contents":{"tnuHighlights":[[32,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[35,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nFloat = Float32\n"]},"tag":"Update"}],[38,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nFloat = Float32\n"]},"tag":"Update"}],[42,{"contents":{"tnuHighlights":[[42,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[45,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nType = %TyKind()\n"]},"tag":"Update"}],[53,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ninterface Ix(n|Data)\n  size' : () -> Nat\n  ordinal : (n) -> Nat\n  unsafe_from_ordinal : (Nat) -> n\n"]},"tag":"Update"}],[55,{"contents":{"tnuHighlights":[[42,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[42,{"contents":{"tnuHighlights":[[55,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[60,{"contents":{"tnuHighlights":[[60,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[62,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef sum(xs:n=>v) -> v given (n|Ix, v|Add) = reduce(xs, zero, (+))\n"]},"tag":"Update"}],[64,{"contents":{"tnuHighlights":[[29,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[29,{"contents":{"tnuHighlights":[[64,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[66,{"contents":{"tnuHighlights":[[60,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[60,{"contents":{"tnuHighlights":[[66,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[67,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (/)( v:a, s:Float) -> a given (a|VSpace) = divide(1.0, s) .* v\n"]},"tag":"Update"}],[71,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef n_to_f(x: Nat) -> Float   = nat_to_rep x | internal_cast\n"]},"tag":"Update"}],[74,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef size(n:Type|Ix) -> Nat = size'(n=n)\n"]},"tag":"Update"}],[76,{"contents":{"tnuHighlights":[[42,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[42,{"contents":{"tnuHighlights":[[76,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[24,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({n:Type}[v#0:(Ix n)](xs:(n => Float32)) -> Float32)"]},"tag":"Update"}],[29,{"contents":{"tnuHighlights":[],"tnuText":["Type:   (n => Float32)"]},"tag":"Update"}],[32,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[34,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[35,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[38,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[42,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[45,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[49,{"contents":{"tnuHighlights":[],"tnuText":["Type:   (Ix n)"]},"tag":"Update"}],[53,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((n:Type) -> Type)"]},"tag":"Update"}],[54,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[55,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[60,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[62,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({n:Type}[v#0:(Ix n)]{v:Type}[v#1:(Add v)](xs:(n => v)) -> v)"]},"tag":"Update"}],[63,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[64,{"contents":{"tnuHighlights":[],"tnuText":["Type:   (n => Float32)"]},"tag":"Update"}],[66,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[67,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}[v#0:(VSpace a)](v:a,s:Float32) -> a)"]},"tag":"Update"}],[68,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[69,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[71,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((x:Nat) -> Float32)"]},"tag":"Update"}],[74,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((n:Type)[v#0:(Ix n)] -> Nat)"]},"tag":"Update"}],[75,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Nat"]},"tag":"Update"}],[76,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["TypePass",null],"tag":"RenderedPassResult"},{"contents":["SimpPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["OptPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"}]],"tag":"Create"}],[14,{"contents":[{"rsbBlockId":14,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":40,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[15,{"contents":[{"rsbBlockId":15,"rsbHtml":"<div class=\"prose-block\"><p>This function depends on an implicitly-supplied type <code>n</code>, requires\nthe constraint <code>Ix n</code> (which it does not bind to a name), and accepts an explicit parameter\nnamed <code>xs</code> of type <code>n=&gt;Float</code> to produce a <code>Float</code> result.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":4,"rsbLine":41,"rsbText":"'This function depends on an implicitly-supplied type `n`, requires\nthe constraint `Ix n` (which it does not bind to a name), and accepts an explicit parameter\nnamed `xs` of type `n=>Float` to produce a `Float` result.\n\n"},"Inert",[]],"tag":"Create"}],[16,{"contents":[{"rsbBlockId":16,"rsbHtml":"<div class=\"prose-block\"><p>Every parameter is in scope for all the subsequent parameters' type\nannotations, as well as the return type and the body.  (For purposes\nof scoping, the <code>given</code> clause comes before the main declaration, but\nit's syntactically later because it's usually less interesting.)  If\nyou're not familiar with other dependently-typed programming languages\nthis may seem strange, but it gives Dex a lot of its power.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":7,"rsbLine":45,"rsbText":"'Every parameter is in scope for all the subsequent parameters' type\nannotations, as well as the return type and the body.  (For purposes\nof scoping, the `given` clause comes before the main declaration, but\nit's syntactically later because it's usually less interesting.)  If\nyou're not familiar with other dependently-typed programming languages\nthis may seem strange, but it gives Dex a lot of its power.\n\n"},"Inert",[]],"tag":"Create"}],[17,{"contents":[{"rsbBlockId":17,"rsbHtml":"<div class=\"prose-block\"><p>The set of each kind of parameter can be specified as a parenthesized\ncomma-separated list of <code>&lt;name&gt;:&lt;type&gt;</code> clauses.  Explicit parameters\ngo first, between the name and the arrow, since they are the most\nimportant.  If there are implicit parameters, they go after the\n<code>given</code> keyword.  If there are interface constraints too, they go in a\nsecond parenthesized comma-separated list after the implicit\nparameters.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":8,"rsbLine":52,"rsbText":"'The set of each kind of parameter can be specified as a parenthesized\ncomma-separated list of `<name>:<type>` clauses.  Explicit parameters\ngo first, between the name and the arrow, since they are the most\nimportant.  If there are implicit parameters, they go after the\n`given` keyword.  If there are interface constraints too, they go in a\nsecond parenthesized comma-separated list after the implicit\nparameters.\n\n"},"Inert",[]],"tag":"Create"}],[18,{"contents":[{"rsbBlockId":18,"rsbHtml":"<div class=\"prose-block\"><p>In addition, Dex has three short-hands for the common cases:</p>\n<ul>\n<li>The <code>:&lt;type&gt;</code> section for an explicit or implicit parameter can be\nomitted, in which case the type will be inferred.  This is most\nuseful for implicit parameters, because they are often easily\ninferred to be of type <code>Type</code>.</li>\n<li>The <code>&lt;name&gt;:</code> for a constraint can be omitted, since they usually\ndon't need to be referred to.</li>\n<li>An anonymous unary constraint applied to a parameter can be written by\npostfixing <code>|&lt;Class name&gt;</code> after the parameter (recursively).  For example,\n<code>given (n|Eq|Ord)</code> desugars to <code>given (n:_) (_:Eq n, _:Ord n)</code></li>\n<li>The constraints section of a <code>given</code> clause can be omitted if it's\nempty, as can the whole <code>given</code> clause.  If you need a constraints\nsection for <code>given</code>, you must include a section for implicit\nparameters, even if it's empty.</li>\n</ul>\n</div>","rsbLexemeList":[],"rsbNumLines":15,"rsbLine":60,"rsbText":"'In addition, Dex has three short-hands for the common cases:\n- The `:<type>` section for an explicit or implicit parameter can be\n  omitted, in which case the type will be inferred.  This is most\n  useful for implicit parameters, because they are often easily\n  inferred to be of type `Type`.\n- The `<name>:` for a constraint can be omitted, since they usually\n  don't need to be referred to.\n- An anonymous unary constraint applied to a parameter can be written by\n  postfixing `|<Class name>` after the parameter (recursively).  For example,\n  `given (n|Eq|Ord)` desugars to `given (n:_) (_:Eq n, _:Ord n)`\n- The constraints section of a `given` clause can be omitted if it's\n  empty, as can the whole `given` clause.  If you need a constraints\n  section for `given`, you must include a section for implicit\n  parameters, even if it's empty.\n\n"},"Inert",[]],"tag":"Create"}],[19,{"contents":[{"rsbBlockId":19,"rsbHtml":"<div class=\"prose-block\"><p>An underscore <code>_</code> in place of a name means &quot;accept this parameter but\ndo not name it&quot;.  An underscore <code>_</code> in place of a type means &quot;infer\nthis type (if possible)&quot;.  We recommend always spelling out the types\nof top-level definitions explicitly, but <code>_</code> is especially handy in\nlocal contexts where the types are obvious and would only make the\nprogram unnecessarily verbose.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":7,"rsbLine":75,"rsbText":"'An underscore `_` in place of a name means \"accept this parameter but\ndo not name it\".  An underscore `_` in place of a type means \"infer\nthis type (if possible)\".  We recommend always spelling out the types\nof top-level definitions explicitly, but `_` is especially handy in\nlocal contexts where the types are obvious and would only make the\nprogram unnecessarily verbose.\n\n"},"Inert",[]],"tag":"Create"}],[20,{"contents":[{"rsbBlockId":20,"rsbHtml":"<div class=\"prose-block\"><p>While it's certainly common for implicit parameters to be types\n(i.e., have type <code>Type</code>), that's by no means required.  For example,\nhere is the same <code>average</code> function explicitly specialized to a <code>Fin</code>\nindex set of indeterminate size:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":82,"rsbText":"'While it's certainly common for implicit parameters to be types\n(i.e., have type `Type`), that's by no means required.  For example,\nhere is the same `average` function explicitly specialized to a `Fin`\nindex set of indeterminate size:\n\n"},"Inert",[]],"tag":"Create"}],[21,{"contents":[{"rsbBlockId":21,"rsbHtml":"<div class=\"code-block\"><span class=\"keyword\" id=\"span_21_79\">def</span><span> </span><span id=\"span_21_80\">fin_average</span><span class=\"symbol\" id=\"span_21_82\">(</span><span id=\"span_21_83\">xs</span><span class=\"symbol\" id=\"span_21_84\">:</span><span> </span><span class=\"symbol\" id=\"span_21_87\">(</span><span id=\"span_21_88\">Fin</span><span> </span><span id=\"span_21_90\">n</span><span class=\"symbol\" id=\"span_21_91\">)</span><span class=\"symbol\" id=\"span_21_92\">=&gt;</span><span id=\"span_21_94\">Float</span><span class=\"symbol\" id=\"span_21_95\">)</span><span> </span><span class=\"symbol\" id=\"span_21_96\">-&gt;</span><span> </span><span id=\"span_21_97\">Float</span><span> </span><span class=\"keyword\" id=\"span_21_98\">given</span><span> </span><span class=\"symbol\" id=\"span_21_100\">(</span><span id=\"span_21_101\">n</span><span class=\"symbol\" id=\"span_21_102\">:</span><span id=\"span_21_104\">Nat</span><span class=\"symbol\" id=\"span_21_105\">)</span><span>  </span><span class=\"symbol\" id=\"span_21_106\">=</span><span class=\"comment\">\n  </span><span id=\"span_21_109\">average</span><span> </span><span id=\"span_21_111\">xs</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[79,80,82,83,84,87,88,90,91,92,94,95,96,97,98,100,101,102,104,105,106,109,111],"rsbNumLines":2,"rsbLine":87,"rsbText":"def fin_average(xs: (Fin n)=>Float) -> Float given (n:Nat)  =\n  average xs\n"},"Complete",[{"contents":[[79,78],[80,80],[82,81],[83,83],[84,85],[87,86],[88,88],[90,90],[91,86],[92,93],[94,94],[95,81],[96,78],[97,97],[98,78],[100,99],[101,101],[102,103],[104,104],[105,99],[106,78],[109,109],[111,111]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[79,111],"tnHighlights":[[78,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[78,{"contents":{"tnSpan":[79,111],"tnHighlights":[[79,"HighlightLeaf"],[96,"HighlightLeaf"],[98,"HighlightLeaf"],[106,"HighlightLeaf"],[80,"HighlightGroup"],[81,"HighlightGroup"],[97,"HighlightGroup"],[99,"HighlightGroup"],[107,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[79,{"contents":{"tnSpan":[79,79],"tnHighlights":[[79,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[80,{"contents":{"tnSpan":[80,80],"tnHighlights":[[80,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[81,{"contents":{"tnSpan":[82,95],"tnHighlights":[[82,"HighlightLeaf"],[95,"HighlightLeaf"],[85,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[82,{"contents":{"tnSpan":[82,82],"tnHighlights":[[82,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[83,{"contents":{"tnSpan":[83,83],"tnHighlights":[[83,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[84,{"contents":{"tnSpan":[84,84],"tnHighlights":[[84,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[85,{"contents":{"tnSpan":[83,94],"tnHighlights":[[84,"HighlightLeaf"],[83,"HighlightGroup"],[93,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[86,{"contents":{"tnSpan":[87,91],"tnHighlights":[[87,"HighlightLeaf"],[91,"HighlightLeaf"],[89,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[87,{"contents":{"tnSpan":[87,87],"tnHighlights":[[87,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[88,{"contents":{"tnSpan":[88,88],"tnHighlights":[[88,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[89,{"contents":{"tnSpan":[88,90],"tnHighlights":[[88,"HighlightGroup"],[90,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[90,{"contents":{"tnSpan":[90,90],"tnHighlights":[[90,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[91,{"contents":{"tnSpan":[91,91],"tnHighlights":[[91,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[92,{"contents":{"tnSpan":[92,92],"tnHighlights":[[92,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[93,{"contents":{"tnSpan":[87,94],"tnHighlights":[[92,"HighlightLeaf"],[86,"HighlightGroup"],[94,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[94,{"contents":{"tnSpan":[94,94],"tnHighlights":[[94,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[95,{"contents":{"tnSpan":[95,95],"tnHighlights":[[95,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[96,{"contents":{"tnSpan":[96,96],"tnHighlights":[[96,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[97,{"contents":{"tnSpan":[97,97],"tnHighlights":[[97,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[98,{"contents":{"tnSpan":[98,98],"tnHighlights":[[98,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[99,{"contents":{"tnSpan":[100,105],"tnHighlights":[[100,"HighlightLeaf"],[105,"HighlightLeaf"],[103,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[100,{"contents":{"tnSpan":[100,100],"tnHighlights":[[100,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[101,{"contents":{"tnSpan":[101,101],"tnHighlights":[[101,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[102,{"contents":{"tnSpan":[102,102],"tnHighlights":[[102,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[103,{"contents":{"tnSpan":[101,104],"tnHighlights":[[102,"HighlightLeaf"],[101,"HighlightGroup"],[104,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[104,{"contents":{"tnSpan":[104,104],"tnHighlights":[[104,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[105,{"contents":{"tnSpan":[105,105],"tnHighlights":[[105,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[106,{"contents":{"tnSpan":[106,106],"tnHighlights":[[106,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[107,{"contents":{"tnSpan":[109,111],"tnHighlights":[[108,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[108,{"contents":{"tnSpan":[109,111],"tnHighlights":[[110,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[109,{"contents":{"tnSpan":[109,109],"tnHighlights":[[109,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[110,{"contents":{"tnSpan":[109,111],"tnHighlights":[[109,"HighlightGroup"],[111,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[111,{"contents":{"tnSpan":[111,111],"tnHighlights":[[111,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[80,{"contents":{"tnuHighlights":[[80,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[83,{"contents":{"tnuHighlights":[[83,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[88,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef Fin(n:Nat) -> Type = %Fin(n)\n"]},"tag":"Update"}],[90,{"contents":{"tnuHighlights":[[101,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[101,{"contents":{"tnuHighlights":[[90,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[94,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nFloat = Float32\n"]},"tag":"Update"}],[97,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nFloat = Float32\n"]},"tag":"Update"}],[101,{"contents":{"tnuHighlights":[[101,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[104,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nNat = %Nat()\n"]},"tag":"Update"}],[109,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in main:\ndef average(xs: n=>Float) -> Float given (n:Type) (_:Ix n) =\n  total = sum xs\n  total / (n_to_f $ size n)\n"]},"tag":"Update"}],[111,{"contents":{"tnuHighlights":[[83,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[83,{"contents":{"tnuHighlights":[[111,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[78,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({n:Nat}(xs:((Fin n) => Float32)) -> Float32)"]},"tag":"Update"}],[83,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((Fin n) => Float32)"]},"tag":"Update"}],[88,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((n:Nat) -> Type)"]},"tag":"Update"}],[89,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[90,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Nat"]},"tag":"Update"}],[93,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[94,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[97,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[101,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Nat"]},"tag":"Update"}],[104,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[109,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({n:Type}[v#0:(Ix n)](xs:(n => Float32)) -> Float32)"]},"tag":"Update"}],[110,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[111,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((Fin n) => Float32)"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["TypePass",null],"tag":"RenderedPassResult"},{"contents":["SimpPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["OptPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"}]],"tag":"Create"}],[22,{"contents":[{"rsbBlockId":22,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":89,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[23,{"contents":[{"rsbBlockId":23,"rsbHtml":"<div class=\"prose-block\"><p>The size <code>n</code> of the input <code>xs</code> can be inferred from the latter's full\ntype, so it doesn't need to be provided to the function explicitly.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":3,"rsbLine":90,"rsbText":"'The size `n` of the input `xs` can be inferred from the latter's full\ntype, so it doesn't need to be provided to the function explicitly.\n\n"},"Inert",[]],"tag":"Create"}],[24,{"contents":[{"rsbBlockId":24,"rsbHtml":"<div class=\"prose-block\"><h2>Effects</h2>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":93,"rsbText":"'## Effects\n\n"},"Inert",[]],"tag":"Create"}],[25,{"contents":[{"rsbBlockId":25,"rsbHtml":"<div class=\"prose-block\"><p>Dex has an effect system to keep track of what side-effects functions\nmay have.  This is key to automatic parallelization: a pure loop can\nbe parallelized with no communication, whereas one with unrestricted\nside-effects must be run in series.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":95,"rsbText":"'Dex has an effect system to keep track of what side-effects functions\nmay have.  This is key to automatic parallelization: a pure loop can\nbe parallelized with no communication, whereas one with unrestricted\nside-effects must be run in series.\n\n"},"Inert",[]],"tag":"Create"}],[26,{"contents":[{"rsbBlockId":26,"rsbHtml":"<div class=\"prose-block\"><p>A function's effects are specified in a special curly-braced block\nprefixing the return type.  For example, here is an in-place integer\nincrement function using the assignment operator <code>:=</code> from the\nPrelude:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":100,"rsbText":"'A function's effects are specified in a special curly-braced block\nprefixing the return type.  For example, here is an in-place integer\nincrement function using the assignment operator `:=` from the\nPrelude:\n\n"},"Inert",[]],"tag":"Create"}],[27,{"contents":[{"rsbBlockId":27,"rsbHtml":"<div class=\"code-block\"><span class=\"keyword\" id=\"span_27_113\">def</span><span> </span><span id=\"span_27_114\">inc</span><span class=\"symbol\" id=\"span_27_116\">(</span><span id=\"span_27_117\">ref</span><span class=\"symbol\" id=\"span_27_118\">:</span><span id=\"span_27_120\">Ref</span><span> </span><span id=\"span_27_122\">h</span><span> </span><span id=\"span_27_124\">Int</span><span class=\"symbol\" id=\"span_27_125\">)</span><span> </span><span class=\"symbol\" id=\"span_27_126\">-&gt;</span><span> </span><span class=\"symbol\" id=\"span_27_128\">{</span><span id=\"span_27_129\">State</span><span> </span><span id=\"span_27_131\">h</span><span class=\"symbol\" id=\"span_27_132\">}</span><span> </span><span class=\"symbol\" id=\"span_27_134\">(</span><span class=\"symbol\" id=\"span_27_135\">)</span><span> </span><span class=\"keyword\" id=\"span_27_136\">given</span><span> </span><span class=\"symbol\" id=\"span_27_138\">(</span><span id=\"span_27_139\">h</span><span class=\"symbol\" id=\"span_27_140\">)</span><span>  </span><span class=\"symbol\" id=\"span_27_141\">=</span><span class=\"comment\">\n  </span><span id=\"span_27_144\">current</span><span> </span><span class=\"symbol\" id=\"span_27_145\">=</span><span> </span><span id=\"span_27_146\">get</span><span> </span><span id=\"span_27_148\">ref</span><span class=\"comment\">\n  </span><span id=\"span_27_150\">ref</span><span> </span><span class=\"symbol\" id=\"span_27_151\">:=</span><span> </span><span id=\"span_27_153\">current</span><span> </span><span class=\"symbol\" id=\"span_27_154\">+</span><span> </span><span class=\"literal\" id=\"span_27_156\">1</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[113,114,116,117,118,120,122,124,125,126,128,129,131,132,134,135,136,138,139,140,141,144,145,146,148,150,151,153,154,156],"rsbNumLines":3,"rsbLine":105,"rsbText":"def inc(ref:Ref h Int) -> {State h} () given (h)  =\n  current = get ref\n  ref := current + 1\n"},"CompleteWithErrors",[{"contents":[[113,112],[114,114],[116,115],[117,117],[118,119],[120,120],[122,122],[124,124],[125,115],[126,112],[128,127],[129,129],[131,131],[132,127],[134,133],[135,133],[136,112],[138,137],[139,139],[140,137],[141,112],[144,144],[145,143],[146,146],[148,148],[150,150],[151,151],[153,153],[154,154],[156,156]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[113,156],"tnHighlights":[[112,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[112,{"contents":{"tnSpan":[113,156],"tnHighlights":[[113,"HighlightLeaf"],[126,"HighlightLeaf"],[136,"HighlightLeaf"],[141,"HighlightLeaf"],[114,"HighlightGroup"],[115,"HighlightGroup"],[127,"HighlightGroup"],[133,"HighlightGroup"],[137,"HighlightGroup"],[142,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[113,{"contents":{"tnSpan":[113,113],"tnHighlights":[[113,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[114,{"contents":{"tnSpan":[114,114],"tnHighlights":[[114,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[115,{"contents":{"tnSpan":[116,125],"tnHighlights":[[116,"HighlightLeaf"],[125,"HighlightLeaf"],[119,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[116,{"contents":{"tnSpan":[116,116],"tnHighlights":[[116,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[117,{"contents":{"tnSpan":[117,117],"tnHighlights":[[117,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[118,{"contents":{"tnSpan":[118,118],"tnHighlights":[[118,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[119,{"contents":{"tnSpan":[117,124],"tnHighlights":[[118,"HighlightLeaf"],[117,"HighlightGroup"],[123,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[120,{"contents":{"tnSpan":[120,120],"tnHighlights":[[120,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[121,{"contents":{"tnSpan":[120,122],"tnHighlights":[[120,"HighlightGroup"],[122,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[122,{"contents":{"tnSpan":[122,122],"tnHighlights":[[122,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[123,{"contents":{"tnSpan":[120,124],"tnHighlights":[[121,"HighlightGroup"],[124,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[124,{"contents":{"tnSpan":[124,124],"tnHighlights":[[124,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[125,{"contents":{"tnSpan":[125,125],"tnHighlights":[[125,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[126,{"contents":{"tnSpan":[126,126],"tnHighlights":[[126,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[127,{"contents":{"tnSpan":[128,132],"tnHighlights":[[128,"HighlightLeaf"],[132,"HighlightLeaf"],[130,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[128,{"contents":{"tnSpan":[128,128],"tnHighlights":[[128,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[129,{"contents":{"tnSpan":[129,129],"tnHighlights":[[129,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[130,{"contents":{"tnSpan":[129,131],"tnHighlights":[[129,"HighlightGroup"],[131,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[131,{"contents":{"tnSpan":[131,131],"tnHighlights":[[131,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[132,{"contents":{"tnSpan":[132,132],"tnHighlights":[[132,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[133,{"contents":{"tnSpan":[134,135],"tnHighlights":[[134,"HighlightLeaf"],[135,"HighlightLeaf"]],"tnText":""},"tag":"Create"}],[134,{"contents":{"tnSpan":[134,134],"tnHighlights":[[134,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[135,{"contents":{"tnSpan":[135,135],"tnHighlights":[[135,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[136,{"contents":{"tnSpan":[136,136],"tnHighlights":[[136,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[137,{"contents":{"tnSpan":[138,140],"tnHighlights":[[138,"HighlightLeaf"],[140,"HighlightLeaf"],[139,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[138,{"contents":{"tnSpan":[138,138],"tnHighlights":[[138,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[139,{"contents":{"tnSpan":[139,139],"tnHighlights":[[139,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[140,{"contents":{"tnSpan":[140,140],"tnHighlights":[[140,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[141,{"contents":{"tnSpan":[141,141],"tnHighlights":[[141,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[142,{"contents":{"tnSpan":[144,156],"tnHighlights":[[143,"HighlightGroup"],[149,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[143,{"contents":{"tnSpan":[144,148],"tnHighlights":[[145,"HighlightLeaf"],[144,"HighlightGroup"],[147,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[144,{"contents":{"tnSpan":[144,144],"tnHighlights":[[144,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[145,{"contents":{"tnSpan":[145,145],"tnHighlights":[[145,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[146,{"contents":{"tnSpan":[146,146],"tnHighlights":[[146,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[147,{"contents":{"tnSpan":[146,148],"tnHighlights":[[146,"HighlightGroup"],[148,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[148,{"contents":{"tnSpan":[148,148],"tnHighlights":[[148,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[149,{"contents":{"tnSpan":[150,156],"tnHighlights":[[152,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[150,{"contents":{"tnSpan":[150,150],"tnHighlights":[[150,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[151,{"contents":{"tnSpan":[151,151],"tnHighlights":[[151,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[152,{"contents":{"tnSpan":[150,156],"tnHighlights":[[150,"HighlightGroup"],[151,"HighlightGroup"],[155,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[153,{"contents":{"tnSpan":[153,153],"tnHighlights":[[153,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[154,{"contents":{"tnSpan":[154,154],"tnHighlights":[[154,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[155,{"contents":{"tnSpan":[153,156],"tnHighlights":[[153,"HighlightGroup"],[154,"HighlightGroup"],[156,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[156,{"contents":{"tnSpan":[156,156],"tnHighlights":[[156,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[114,{"contents":{"tnuHighlights":[[114,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[117,{"contents":{"tnuHighlights":[[117,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[120,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef Ref(r:Heap, a:Type|Data) -> Type = %Ref(r, a)\n"]},"tag":"Update"}],[122,{"contents":{"tnuHighlights":[[139,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[139,{"contents":{"tnuHighlights":[[122,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[124,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nInt = Int32\n"]},"tag":"Update"}],[131,{"contents":{"tnuHighlights":[[139,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[139,{"contents":{"tnuHighlights":[[131,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[139,{"contents":{"tnuHighlights":[[139,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[144,{"contents":{"tnuHighlights":[[144,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[146,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef get(ref:Ref h s)       -> {State h} s  given (h:Heap, s|Data) = %get(ref)\n"]},"tag":"Update"}],[148,{"contents":{"tnuHighlights":[[117,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[117,{"contents":{"tnuHighlights":[[148,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[150,{"contents":{"tnuHighlights":[[117,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[117,{"contents":{"tnuHighlights":[[150,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[151,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (:=)(ref:Ref h s, x:s) -> {State h} () given (h:Heap, s|Data) = %put(ref, x)\n"]},"tag":"Update"}],[153,{"contents":{"tnuHighlights":[[144,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[144,{"contents":{"tnuHighlights":[[153,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[154,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ninterface Add(a|Data)\n  (+) : (a, a) -> a\n  zero : a\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[],"tag":"RenderedTreeNodeUpdate"},{"contents":[139,"Type error: type annotation or constraint required"],"tag":"RenderedError"}]],"tag":"Create"}],[28,{"contents":[{"rsbBlockId":28,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":108,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[29,{"contents":[{"rsbBlockId":29,"rsbHtml":"<div class=\"prose-block\"><p>The effect-annotated return type, <code>{State h} ()</code>, tells Dex that\n<code>inc</code> is not a pure function, but may have a side-effect before\nreturning a value of type <code>()</code>.  Specifically, the side effect is\n<code>State h</code>, namely destructively updating references tagged with the\nheap type <code>h</code>.  TODO(<a href=\"https://github.com/google-research/dex-lang/issues/949\">Issue\n949</a>):\nReference full explanation of effects.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":8,"rsbLine":109,"rsbText":"'The effect-annotated return type, `{State h} ()`, tells Dex that\n`inc` is not a pure function, but may have a side-effect before\nreturning a value of type `()`.  Specifically, the side effect is\n`State h`, namely destructively updating references tagged with the\nheap type `h`.  TODO([Issue\n949](https://github.com/google-research/dex-lang/issues/949)):\nReference full explanation of effects.\n\n"},"Inert",[]],"tag":"Create"}],[30,{"contents":[{"rsbBlockId":30,"rsbHtml":"<div class=\"prose-block\"><p>The full syntax of the effect specifier is</p>\n<pre><code>{&lt;eff1&gt;, &lt;eff2&gt;, ... | &lt;name&gt;}\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":117,"rsbText":"'The full syntax of the effect specifier is\n```\n{<eff1>, <eff2>, ... | <name>}\n```\n\n"},"Inert",[]],"tag":"Create"}],[31,{"contents":[{"rsbBlockId":31,"rsbHtml":"<div class=\"prose-block\"><p>Each optional <code>&lt;eff&gt;</code> specifies one effect, which must be one of</p>\n<ul>\n<li><code>State &lt;name&gt;</code></li>\n<li><code>Accum &lt;name&gt;</code></li>\n<li><code>Read &lt;name&gt;</code></li>\n<li><code>Except</code></li>\n<li><code>IO</code></li>\n</ul>\n</div>","rsbLexemeList":[],"rsbNumLines":7,"rsbLine":122,"rsbText":"'Each optional `<eff>` specifies one effect, which must be one of\n- `State <name>`\n- `Accum <name>`\n- `Read <name>`\n- `Except`\n- `IO`\n\n"},"Inert",[]],"tag":"Create"}],[32,{"contents":[{"rsbBlockId":32,"rsbHtml":"<div class=\"prose-block\"><p>The optional <code>| &lt;name&gt;</code> clause names all the remaining effects.  This\nis useful for writing a higher-order function that accepts an\neffectful function as an argument.  For example, we can write an\neffect-polymorphic <code>map</code> function like this:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":129,"rsbText":"'The optional `| <name>` clause names all the remaining effects.  This\nis useful for writing a higher-order function that accepts an\neffectful function as an argument.  For example, we can write an\neffect-polymorphic `map` function like this:\n\n"},"Inert",[]],"tag":"Create"}],[33,{"contents":[{"rsbBlockId":33,"rsbHtml":"<div class=\"code-block\"><span class=\"keyword\" id=\"span_33_158\">def</span><span> </span><span id=\"span_33_159\">my_map</span><span class=\"symbol\" id=\"span_33_161\">(</span><span id=\"span_33_162\">f</span><span class=\"symbol\" id=\"span_33_163\">:</span><span> </span><span class=\"symbol\" id=\"span_33_166\">(</span><span id=\"span_33_167\">a</span><span class=\"symbol\" id=\"span_33_168\">)</span><span> </span><span class=\"symbol\" id=\"span_33_169\">-&gt;</span><span> </span><span class=\"symbol\" id=\"span_33_171\">{</span><span class=\"symbol\" id=\"span_33_172\">|</span><span id=\"span_33_173\">eff</span><span class=\"symbol\" id=\"span_33_174\">}</span><span> </span><span id=\"span_33_176\">b</span><span class=\"symbol\" id=\"span_33_177\">,</span><span> </span><span id=\"span_33_178\">xs</span><span class=\"symbol\" id=\"span_33_179\">:</span><span id=\"span_33_181\">n</span><span class=\"symbol\" id=\"span_33_182\">=&gt;</span><span id=\"span_33_184\">a</span><span class=\"symbol\" id=\"span_33_185\">)</span><span> </span><span class=\"symbol\" id=\"span_33_186\">-&gt;</span><span> </span><span class=\"symbol\" id=\"span_33_188\">{</span><span class=\"symbol\" id=\"span_33_189\">|</span><span id=\"span_33_190\">eff</span><span class=\"symbol\" id=\"span_33_191\">}</span><span> </span><span id=\"span_33_192\">n</span><span class=\"symbol\" id=\"span_33_193\">=&gt;</span><span id=\"span_33_195\">b</span><span> </span><span class=\"keyword\" id=\"span_33_196\">given</span><span> </span><span class=\"symbol\" id=\"span_33_198\">(</span><span id=\"span_33_199\">n</span><span class=\"symbol\" id=\"span_33_200\">|</span><span id=\"span_33_202\">Ix</span><span class=\"symbol\" id=\"span_33_203\">,</span><span> </span><span id=\"span_33_204\">a</span><span class=\"symbol\" id=\"span_33_205\">,</span><span> </span><span id=\"span_33_206\">b</span><span class=\"symbol\" id=\"span_33_207\">,</span><span> </span><span id=\"span_33_208\">eff</span><span class=\"symbol\" id=\"span_33_209\">)</span><span> </span><span class=\"symbol\" id=\"span_33_210\">=</span><span class=\"comment\">\n  </span><span class=\"keyword\" id=\"span_33_214\">for</span><span> </span><span id=\"span_33_215\">i</span><span class=\"symbol\" id=\"span_33_216\">.</span><span> </span><span id=\"span_33_217\">f</span><span> </span><span id=\"span_33_219\">xs</span><span class=\"symbol\" id=\"span_33_222\">[</span><span id=\"span_33_223\">i</span><span class=\"symbol\" id=\"span_33_224\">]</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[158,159,161,162,163,166,167,168,169,171,172,173,174,176,177,178,179,181,182,184,185,186,188,189,190,191,192,193,195,196,198,199,200,202,203,204,205,206,207,208,209,210,214,215,216,217,219,222,223,224],"rsbNumLines":2,"rsbLine":134,"rsbText":"def my_map(f: (a) -> {|eff} b, xs:n=>a) -> {|eff} n=>b given (n|Ix, a, b, eff) =\n  for i. f xs[i]\n"},"CompleteWithErrors",[{"contents":[[158,157],[159,159],[161,160],[162,162],[163,164],[166,165],[167,167],[168,165],[169,175],[171,170],[172,170],[173,173],[174,170],[176,176],[177,160],[178,178],[179,180],[181,181],[182,183],[184,184],[185,160],[186,157],[188,187],[189,187],[190,190],[191,187],[192,192],[193,194],[195,195],[196,157],[198,197],[199,199],[200,201],[202,202],[203,197],[204,204],[205,197],[206,206],[207,197],[208,208],[209,197],[210,157],[214,213],[215,215],[216,213],[217,217],[219,219],[222,221],[223,223],[224,221]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[158,224],"tnHighlights":[[157,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[157,{"contents":{"tnSpan":[158,224],"tnHighlights":[[158,"HighlightLeaf"],[186,"HighlightLeaf"],[196,"HighlightLeaf"],[210,"HighlightLeaf"],[159,"HighlightGroup"],[160,"HighlightGroup"],[187,"HighlightGroup"],[194,"HighlightGroup"],[197,"HighlightGroup"],[211,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[158,{"contents":{"tnSpan":[158,158],"tnHighlights":[[158,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[159,{"contents":{"tnSpan":[159,159],"tnHighlights":[[159,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[160,{"contents":{"tnSpan":[161,185],"tnHighlights":[[161,"HighlightLeaf"],[177,"HighlightLeaf"],[185,"HighlightLeaf"],[164,"HighlightGroup"],[180,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[161,{"contents":{"tnSpan":[161,161],"tnHighlights":[[161,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[162,{"contents":{"tnSpan":[162,162],"tnHighlights":[[162,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[163,{"contents":{"tnSpan":[163,163],"tnHighlights":[[163,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[164,{"contents":{"tnSpan":[162,176],"tnHighlights":[[163,"HighlightLeaf"],[162,"HighlightGroup"],[175,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[165,{"contents":{"tnSpan":[166,168],"tnHighlights":[[166,"HighlightLeaf"],[168,"HighlightLeaf"],[167,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[166,{"contents":{"tnSpan":[166,166],"tnHighlights":[[166,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[167,{"contents":{"tnSpan":[167,167],"tnHighlights":[[167,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[168,{"contents":{"tnSpan":[168,168],"tnHighlights":[[168,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[169,{"contents":{"tnSpan":[169,169],"tnHighlights":[[169,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[170,{"contents":{"tnSpan":[171,174],"tnHighlights":[[171,"HighlightLeaf"],[172,"HighlightLeaf"],[174,"HighlightLeaf"],[173,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[171,{"contents":{"tnSpan":[171,171],"tnHighlights":[[171,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[172,{"contents":{"tnSpan":[172,172],"tnHighlights":[[172,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[173,{"contents":{"tnSpan":[173,173],"tnHighlights":[[173,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[174,{"contents":{"tnSpan":[174,174],"tnHighlights":[[174,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[175,{"contents":{"tnSpan":[166,176],"tnHighlights":[[169,"HighlightLeaf"],[165,"HighlightGroup"],[170,"HighlightGroup"],[176,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[176,{"contents":{"tnSpan":[176,176],"tnHighlights":[[176,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[177,{"contents":{"tnSpan":[177,177],"tnHighlights":[[177,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[178,{"contents":{"tnSpan":[178,178],"tnHighlights":[[178,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[179,{"contents":{"tnSpan":[179,179],"tnHighlights":[[179,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[180,{"contents":{"tnSpan":[178,184],"tnHighlights":[[179,"HighlightLeaf"],[178,"HighlightGroup"],[183,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[181,{"contents":{"tnSpan":[181,181],"tnHighlights":[[181,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[182,{"contents":{"tnSpan":[182,182],"tnHighlights":[[182,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[183,{"contents":{"tnSpan":[181,184],"tnHighlights":[[182,"HighlightLeaf"],[181,"HighlightGroup"],[184,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[184,{"contents":{"tnSpan":[184,184],"tnHighlights":[[184,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[185,{"contents":{"tnSpan":[185,185],"tnHighlights":[[185,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[186,{"contents":{"tnSpan":[186,186],"tnHighlights":[[186,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[187,{"contents":{"tnSpan":[188,191],"tnHighlights":[[188,"HighlightLeaf"],[189,"HighlightLeaf"],[191,"HighlightLeaf"],[190,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[188,{"contents":{"tnSpan":[188,188],"tnHighlights":[[188,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[189,{"contents":{"tnSpan":[189,189],"tnHighlights":[[189,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[190,{"contents":{"tnSpan":[190,190],"tnHighlights":[[190,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[191,{"contents":{"tnSpan":[191,191],"tnHighlights":[[191,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[192,{"contents":{"tnSpan":[192,192],"tnHighlights":[[192,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[193,{"contents":{"tnSpan":[193,193],"tnHighlights":[[193,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[194,{"contents":{"tnSpan":[192,195],"tnHighlights":[[193,"HighlightLeaf"],[192,"HighlightGroup"],[195,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[195,{"contents":{"tnSpan":[195,195],"tnHighlights":[[195,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[196,{"contents":{"tnSpan":[196,196],"tnHighlights":[[196,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[197,{"contents":{"tnSpan":[198,209],"tnHighlights":[[198,"HighlightLeaf"],[203,"HighlightLeaf"],[205,"HighlightLeaf"],[207,"HighlightLeaf"],[209,"HighlightLeaf"],[201,"HighlightGroup"],[204,"HighlightGroup"],[206,"HighlightGroup"],[208,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[198,{"contents":{"tnSpan":[198,198],"tnHighlights":[[198,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[199,{"contents":{"tnSpan":[199,199],"tnHighlights":[[199,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[200,{"contents":{"tnSpan":[200,200],"tnHighlights":[[200,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[201,{"contents":{"tnSpan":[199,202],"tnHighlights":[[200,"HighlightLeaf"],[199,"HighlightGroup"],[202,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[202,{"contents":{"tnSpan":[202,202],"tnHighlights":[[202,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[203,{"contents":{"tnSpan":[203,203],"tnHighlights":[[203,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[204,{"contents":{"tnSpan":[204,204],"tnHighlights":[[204,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[205,{"contents":{"tnSpan":[205,205],"tnHighlights":[[205,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[206,{"contents":{"tnSpan":[206,206],"tnHighlights":[[206,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[207,{"contents":{"tnSpan":[207,207],"tnHighlights":[[207,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[208,{"contents":{"tnSpan":[208,208],"tnHighlights":[[208,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[209,{"contents":{"tnSpan":[209,209],"tnHighlights":[[209,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[210,{"contents":{"tnSpan":[210,210],"tnHighlights":[[210,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[211,{"contents":{"tnSpan":[214,224],"tnHighlights":[[212,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[212,{"contents":{"tnSpan":[214,224],"tnHighlights":[[213,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[213,{"contents":{"tnSpan":[214,224],"tnHighlights":[[214,"HighlightLeaf"],[216,"HighlightLeaf"],[215,"HighlightGroup"],[218,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[214,{"contents":{"tnSpan":[214,214],"tnHighlights":[[214,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[215,{"contents":{"tnSpan":[215,215],"tnHighlights":[[215,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[216,{"contents":{"tnSpan":[216,216],"tnHighlights":[[216,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[217,{"contents":{"tnSpan":[217,217],"tnHighlights":[[217,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[218,{"contents":{"tnSpan":[217,224],"tnHighlights":[[217,"HighlightGroup"],[220,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[219,{"contents":{"tnSpan":[219,219],"tnHighlights":[[219,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[220,{"contents":{"tnSpan":[219,224],"tnHighlights":[[219,"HighlightGroup"],[221,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[221,{"contents":{"tnSpan":[222,224],"tnHighlights":[[222,"HighlightLeaf"],[224,"HighlightLeaf"],[223,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[222,{"contents":{"tnSpan":[222,222],"tnHighlights":[[222,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[223,{"contents":{"tnSpan":[223,223],"tnHighlights":[[223,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[224,{"contents":{"tnSpan":[224,224],"tnHighlights":[[224,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[159,{"contents":{"tnuHighlights":[[159,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[162,{"contents":{"tnuHighlights":[[162,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[167,{"contents":{"tnuHighlights":[[204,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[204,{"contents":{"tnuHighlights":[[167,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[173,{"contents":{"tnuHighlights":[[208,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[208,{"contents":{"tnuHighlights":[[173,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[176,{"contents":{"tnuHighlights":[[206,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[206,{"contents":{"tnuHighlights":[[176,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[178,{"contents":{"tnuHighlights":[[178,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[181,{"contents":{"tnuHighlights":[[199,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[199,{"contents":{"tnuHighlights":[[181,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[184,{"contents":{"tnuHighlights":[[204,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[204,{"contents":{"tnuHighlights":[[184,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[190,{"contents":{"tnuHighlights":[[208,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[208,{"contents":{"tnuHighlights":[[190,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[192,{"contents":{"tnuHighlights":[[199,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[199,{"contents":{"tnuHighlights":[[192,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[195,{"contents":{"tnuHighlights":[[206,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[206,{"contents":{"tnuHighlights":[[195,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[199,{"contents":{"tnuHighlights":[[199,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[199,{"contents":{"tnuHighlights":[[199,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[202,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ninterface Ix(n|Data)\n  size' : () -> Nat\n  ordinal : (n) -> Nat\n  unsafe_from_ordinal : (Nat) -> n\n"]},"tag":"Update"}],[204,{"contents":{"tnuHighlights":[[204,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[206,{"contents":{"tnuHighlights":[[206,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[208,{"contents":{"tnuHighlights":[[208,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[215,{"contents":{"tnuHighlights":[[215,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[217,{"contents":{"tnuHighlights":[[162,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[162,{"contents":{"tnuHighlights":[[217,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[219,{"contents":{"tnuHighlights":[[178,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[178,{"contents":{"tnuHighlights":[[219,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[223,{"contents":{"tnuHighlights":[[215,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[215,{"contents":{"tnuHighlights":[[223,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[199,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[202,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":[204,"Type error: type annotation or constraint required"],"tag":"RenderedError"}]],"tag":"Create"}],[34,{"contents":[{"rsbBlockId":34,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":136,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[35,{"contents":[{"rsbBlockId":35,"rsbHtml":"<div class=\"prose-block\"><p>If we had left off the <code>{|eff}</code> bit, our <code>map</code> function would only\nwork on pure functions.  As another example, <code>catch</code> from the\nPrelude has this type:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":4,"rsbLine":137,"rsbText":"'If we had left off the `{|eff}` bit, our `map` function would only\nwork on pure functions.  As another example, `catch` from the\nPrelude has this type:\n\n"},"Inert",[]],"tag":"Create"}],[36,{"contents":[{"rsbBlockId":36,"rsbHtml":"<div class=\"code-block\"><span class=\"keyword\" id=\"span_36_226\">def</span><span> </span><span id=\"span_36_227\">my_catch</span><span class=\"symbol\" id=\"span_36_229\">(</span><span id=\"span_36_230\">f</span><span class=\"symbol\" id=\"span_36_231\">:</span><span class=\"symbol\" id=\"span_36_234\">(</span><span class=\"symbol\" id=\"span_36_235\">)</span><span> </span><span class=\"symbol\" id=\"span_36_236\">-&gt;</span><span> </span><span class=\"symbol\" id=\"span_36_238\">{</span><span id=\"span_36_239\">Except</span><span class=\"symbol\" id=\"span_36_240\">|</span><span id=\"span_36_241\">eff</span><span class=\"symbol\" id=\"span_36_242\">}</span><span> </span><span id=\"span_36_244\">a</span><span class=\"symbol\" id=\"span_36_245\">)</span><span> </span><span class=\"symbol\" id=\"span_36_246\">-&gt;</span><span> </span><span class=\"symbol\" id=\"span_36_248\">{</span><span class=\"symbol\" id=\"span_36_249\">|</span><span id=\"span_36_250\">eff</span><span class=\"symbol\" id=\"span_36_251\">}</span><span> </span><span id=\"span_36_252\">Maybe</span><span> </span><span id=\"span_36_254\">a</span><span> </span><span class=\"keyword\" id=\"span_36_255\">given</span><span> </span><span class=\"symbol\" id=\"span_36_257\">(</span><span id=\"span_36_258\">a</span><span class=\"symbol\" id=\"span_36_259\">,</span><span> </span><span id=\"span_36_260\">eff</span><span class=\"symbol\" id=\"span_36_261\">)</span><span> </span><span class=\"symbol\" id=\"span_36_262\">=</span><span class=\"comment\">\n  </span><span id=\"span_36_265\">catch</span><span> </span><span id=\"span_36_267\">f</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[226,227,229,230,231,234,235,236,238,239,240,241,242,244,245,246,248,249,250,251,252,254,255,257,258,259,260,261,262,265,267],"rsbNumLines":2,"rsbLine":141,"rsbText":"def my_catch(f:() -> {Except|eff} a) -> {|eff} Maybe a given (a, eff) =\n  catch f\n"},"CompleteWithErrors",[{"contents":[[226,225],[227,227],[229,228],[230,230],[231,232],[234,233],[235,233],[236,243],[238,237],[239,239],[240,237],[241,241],[242,237],[244,244],[245,228],[246,225],[248,247],[249,247],[250,250],[251,247],[252,252],[254,254],[255,225],[257,256],[258,258],[259,256],[260,260],[261,256],[262,225],[265,265],[267,267]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[226,267],"tnHighlights":[[225,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[225,{"contents":{"tnSpan":[226,267],"tnHighlights":[[226,"HighlightLeaf"],[246,"HighlightLeaf"],[255,"HighlightLeaf"],[262,"HighlightLeaf"],[227,"HighlightGroup"],[228,"HighlightGroup"],[247,"HighlightGroup"],[253,"HighlightGroup"],[256,"HighlightGroup"],[263,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[226,{"contents":{"tnSpan":[226,226],"tnHighlights":[[226,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[227,{"contents":{"tnSpan":[227,227],"tnHighlights":[[227,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[228,{"contents":{"tnSpan":[229,245],"tnHighlights":[[229,"HighlightLeaf"],[245,"HighlightLeaf"],[232,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[229,{"contents":{"tnSpan":[229,229],"tnHighlights":[[229,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[230,{"contents":{"tnSpan":[230,230],"tnHighlights":[[230,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[231,{"contents":{"tnSpan":[231,231],"tnHighlights":[[231,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[232,{"contents":{"tnSpan":[230,244],"tnHighlights":[[231,"HighlightLeaf"],[230,"HighlightGroup"],[243,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[233,{"contents":{"tnSpan":[234,235],"tnHighlights":[[234,"HighlightLeaf"],[235,"HighlightLeaf"]],"tnText":""},"tag":"Create"}],[234,{"contents":{"tnSpan":[234,234],"tnHighlights":[[234,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[235,{"contents":{"tnSpan":[235,235],"tnHighlights":[[235,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[236,{"contents":{"tnSpan":[236,236],"tnHighlights":[[236,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[237,{"contents":{"tnSpan":[238,242],"tnHighlights":[[238,"HighlightLeaf"],[240,"HighlightLeaf"],[242,"HighlightLeaf"],[239,"HighlightGroup"],[241,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[238,{"contents":{"tnSpan":[238,238],"tnHighlights":[[238,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[239,{"contents":{"tnSpan":[239,239],"tnHighlights":[[239,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[240,{"contents":{"tnSpan":[240,240],"tnHighlights":[[240,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[241,{"contents":{"tnSpan":[241,241],"tnHighlights":[[241,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[242,{"contents":{"tnSpan":[242,242],"tnHighlights":[[242,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[243,{"contents":{"tnSpan":[234,244],"tnHighlights":[[236,"HighlightLeaf"],[233,"HighlightGroup"],[237,"HighlightGroup"],[244,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[244,{"contents":{"tnSpan":[244,244],"tnHighlights":[[244,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[245,{"contents":{"tnSpan":[245,245],"tnHighlights":[[245,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[246,{"contents":{"tnSpan":[246,246],"tnHighlights":[[246,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[247,{"contents":{"tnSpan":[248,251],"tnHighlights":[[248,"HighlightLeaf"],[249,"HighlightLeaf"],[251,"HighlightLeaf"],[250,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[248,{"contents":{"tnSpan":[248,248],"tnHighlights":[[248,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[249,{"contents":{"tnSpan":[249,249],"tnHighlights":[[249,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[250,{"contents":{"tnSpan":[250,250],"tnHighlights":[[250,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[251,{"contents":{"tnSpan":[251,251],"tnHighlights":[[251,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[252,{"contents":{"tnSpan":[252,252],"tnHighlights":[[252,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[253,{"contents":{"tnSpan":[252,254],"tnHighlights":[[252,"HighlightGroup"],[254,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[254,{"contents":{"tnSpan":[254,254],"tnHighlights":[[254,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[255,{"contents":{"tnSpan":[255,255],"tnHighlights":[[255,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[256,{"contents":{"tnSpan":[257,261],"tnHighlights":[[257,"HighlightLeaf"],[259,"HighlightLeaf"],[261,"HighlightLeaf"],[258,"HighlightGroup"],[260,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[257,{"contents":{"tnSpan":[257,257],"tnHighlights":[[257,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[258,{"contents":{"tnSpan":[258,258],"tnHighlights":[[258,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[259,{"contents":{"tnSpan":[259,259],"tnHighlights":[[259,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[260,{"contents":{"tnSpan":[260,260],"tnHighlights":[[260,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[261,{"contents":{"tnSpan":[261,261],"tnHighlights":[[261,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[262,{"contents":{"tnSpan":[262,262],"tnHighlights":[[262,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[263,{"contents":{"tnSpan":[265,267],"tnHighlights":[[264,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[264,{"contents":{"tnSpan":[265,267],"tnHighlights":[[266,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[265,{"contents":{"tnSpan":[265,265],"tnHighlights":[[265,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[266,{"contents":{"tnSpan":[265,267],"tnHighlights":[[265,"HighlightGroup"],[267,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[267,{"contents":{"tnSpan":[267,267],"tnHighlights":[[267,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[227,{"contents":{"tnuHighlights":[[227,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[230,{"contents":{"tnuHighlights":[[230,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[241,{"contents":{"tnuHighlights":[[260,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[260,{"contents":{"tnuHighlights":[[241,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[244,{"contents":{"tnuHighlights":[[258,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[258,{"contents":{"tnuHighlights":[[244,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[250,{"contents":{"tnuHighlights":[[260,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[260,{"contents":{"tnuHighlights":[[250,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[252,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\nenum Maybe(a:Type) =\n  Nothing\n  Just(a)\n"]},"tag":"Update"}],[254,{"contents":{"tnuHighlights":[[258,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[258,{"contents":{"tnuHighlights":[[254,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}],[258,{"contents":{"tnuHighlights":[[258,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[260,{"contents":{"tnuHighlights":[[260,"HighlightBinder"]],"tnuText":[]},"tag":"Update"}],[265,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef catch(f:() -> {Except|eff} a) -> {|eff} Maybe a given (a:Type, eff:Effects)=\n  f' : (() -> {Except|eff} a) = \\. f()\n  %catchException(f')\n"]},"tag":"Update"}],[267,{"contents":{"tnuHighlights":[[230,"HighlightBinder"]],"tnuText":["Local name"]},"tag":"Update"}],[230,{"contents":{"tnuHighlights":[[267,"HighlightOcc"]],"tnuText":[]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[],"tag":"RenderedTreeNodeUpdate"},{"contents":[258,"Type error: type annotation or constraint required"],"tag":"RenderedError"}]],"tag":"Create"}],[37,{"contents":[{"rsbBlockId":37,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":143,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[38,{"contents":[{"rsbBlockId":38,"rsbHtml":"<div class=\"prose-block\"><p>It accepts a function <code>f</code> that is permitted to have an\n<code>Except</code> effect and an arbitrary set of other effects, and computes\nits result, turning a thrown exception into a <code>Nothing</code> return value.\nAny effects except <code>Except</code> remain to be discharged by the caller of\n<code>catch</code>.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":6,"rsbLine":144,"rsbText":"'It accepts a function `f` that is permitted to have an\n`Except` effect and an arbitrary set of other effects, and computes\nits result, turning a thrown exception into a `Nothing` return value.\nAny effects except `Except` remain to be discharged by the caller of\n`catch`.\n\n"},"Inert",[]],"tag":"Create"}],[39,{"contents":[{"rsbBlockId":39,"rsbHtml":"<div class=\"prose-block\"><p>The whole effect specifier can also be omitted, in which case the\nfunction must be pure.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":3,"rsbLine":150,"rsbText":"'The whole effect specifier can also be omitted, in which case the\nfunction must be pure.\n\n"},"Inert",[]],"tag":"Create"}],[40,{"contents":[{"rsbBlockId":40,"rsbHtml":"<div class=\"prose-block\"><h2>Calling functions</h2>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":153,"rsbText":"'## Calling functions\n\n"},"Inert",[]],"tag":"Create"}],[41,{"contents":[{"rsbBlockId":41,"rsbHtml":"<div class=\"prose-block\"><p>Calling a function in\nDex is just writing its argument(s) after it in parentheses, so:</p>\n<pre><code>f(x, y)\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":6,"rsbLine":155,"rsbText":"'Calling a function in\nDex is just writing its argument(s) after it in parentheses, so:\n```\nf(x, y)\n```\n\n"},"Inert",[]],"tag":"Create"}],[42,{"contents":[{"rsbBlockId":42,"rsbHtml":"<div class=\"prose-block\"><p>When calling a function, it is only necessary to supply the explicit\narguments, because both the implicit and constraint arguments are\nfilled in.  (Incidentally, the difference is in <em>how</em> they are filled\nin.  Implicit arguments are filled in by type unification, whereas\nconstraint arguments are filled in by locating or synthesizing the\nappropriate instance.)  For example,</p>\n</div>","rsbLexemeList":[],"rsbNumLines":7,"rsbLine":161,"rsbText":"'When calling a function, it is only necessary to supply the explicit\narguments, because both the implicit and constraint arguments are\nfilled in.  (Incidentally, the difference is in _how_ they are filled\nin.  Implicit arguments are filled in by type unification, whereas\nconstraint arguments are filled in by locating or synthesizing the\nappropriate instance.)  For example,\n\n"},"Inert",[]],"tag":"Create"}],[43,{"contents":[{"rsbBlockId":43,"rsbHtml":"<div class=\"code-block\"><span id=\"span_43_269\">average</span><span class=\"symbol\" id=\"span_43_272\">(</span><span class=\"symbol\" id=\"span_43_274\">[</span><span class=\"literal\" id=\"span_43_275\">1.</span><span class=\"symbol\" id=\"span_43_276\">,</span><span> </span><span class=\"literal\" id=\"span_43_277\">2.</span><span class=\"symbol\" id=\"span_43_278\">,</span><span> </span><span class=\"literal\" id=\"span_43_279\">3.</span><span class=\"symbol\" id=\"span_43_280\">]</span><span class=\"symbol\" id=\"span_43_281\">)</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[269,272,274,275,276,277,278,279,280,281],"rsbNumLines":1,"rsbLine":168,"rsbText":"average([1., 2., 3.])\n"},"Complete",[{"contents":[[269,269],[272,271],[274,273],[275,275],[276,273],[277,277],[278,273],[279,279],[280,273],[281,271]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[269,281],"tnHighlights":[[270,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[269,{"contents":{"tnSpan":[269,269],"tnHighlights":[[269,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[270,{"contents":{"tnSpan":[269,281],"tnHighlights":[[269,"HighlightGroup"],[271,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[271,{"contents":{"tnSpan":[272,281],"tnHighlights":[[272,"HighlightLeaf"],[281,"HighlightLeaf"],[273,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[272,{"contents":{"tnSpan":[272,272],"tnHighlights":[[272,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[273,{"contents":{"tnSpan":[274,280],"tnHighlights":[[274,"HighlightLeaf"],[276,"HighlightLeaf"],[278,"HighlightLeaf"],[280,"HighlightLeaf"],[275,"HighlightGroup"],[277,"HighlightGroup"],[279,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[274,{"contents":{"tnSpan":[274,274],"tnHighlights":[[274,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[275,{"contents":{"tnSpan":[275,275],"tnHighlights":[[275,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[276,{"contents":{"tnSpan":[276,276],"tnHighlights":[[276,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[277,{"contents":{"tnSpan":[277,277],"tnHighlights":[[277,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[278,{"contents":{"tnSpan":[278,278],"tnHighlights":[[278,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[279,{"contents":{"tnSpan":[279,279],"tnHighlights":[[279,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[280,{"contents":{"tnSpan":[280,280],"tnHighlights":[[280,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[281,{"contents":{"tnSpan":[281,281],"tnHighlights":[[281,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[269,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in main:\ndef average(xs: n=>Float) -> Float given (n:Type) (_:Ix n) =\n  total = sum xs\n  total / (n_to_f $ size n)\n"]},"tag":"Update"}],[270,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef show_any(x:a) -> String given (a:Type) = unsafe_coerce(to=String, %showAny(x))\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[269,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({n:Type}[v#0:(Ix n)](xs:(n => Float32)) -> Float32)"]},"tag":"Update"}],[270,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}(x:a) -> (List Word8))"]},"tag":"Update"}],[273,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((Fin 3) => Float32)"]},"tag":"Update"}],[275,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[277,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}],[279,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Float32"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["TypePass",null],"tag":"RenderedPassResult"},{"contents":["SimpPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["OptPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"},{"contents":"2.","tag":"RenderedTextOut"}]],"tag":"Create"}],[44,{"contents":[{"rsbBlockId":44,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":170,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[45,{"contents":[{"rsbBlockId":45,"rsbHtml":"<div class=\"prose-block\"><p>Here, the index set type <code>n</code> is inferred to be <code>Fin 3</code> from the type\nof the argument, and then the <code>Ix</code> constraint is satisfied by the\ninstance for <code>Ix (Fin n)</code> instantiated at <code>n = 3</code>.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":4,"rsbLine":171,"rsbText":"'Here, the index set type `n` is inferred to be `Fin 3` from the type\nof the argument, and then the `Ix` constraint is satisfied by the\ninstance for `Ix (Fin n)` instantiated at `n = 3`.\n\n"},"Inert",[]],"tag":"Create"}],[46,{"contents":[{"rsbBlockId":46,"rsbHtml":"<div class=\"prose-block\"><p>Because programmers apply function to arguments all day, Dex offers a\nfew shortcuts.  First, borrowing from functional languages, you can\nalso call a function just by writing its argument expression next to\nit:</p>\n<pre><code>f x y  is  f(x, y)\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":8,"rsbLine":175,"rsbText":"'Because programmers apply function to arguments all day, Dex offers a\nfew shortcuts.  First, borrowing from functional languages, you can\nalso call a function just by writing its argument expression next to\nit:\n```\nf x y  is  f(x, y)\n```\n\n"},"Inert",[]],"tag":"Create"}],[47,{"contents":[{"rsbBlockId":47,"rsbHtml":"<div class=\"prose-block\"><p>Juxtaposition is the tightest-binding operator, so <code>f x + 1</code> parses\nas <code>f(x) + 1</code>, not <code>f(x + 1)</code>.  A juxtaposition that occurs after any\nfunction call syntax adds its argument at the end of the existing\nargument list.  It also associates to the left, so all of these parse\nthe same:</p>\n<pre><code>f x y z  is  f(x) y z  is  f(x, y) z  is  f(x, y, z)\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":9,"rsbLine":183,"rsbText":"'Juxtaposition is the tightest-binding operator, so `f x + 1` parses\nas `f(x) + 1`, not `f(x + 1)`.  A juxtaposition that occurs after any\nfunction call syntax adds its argument at the end of the existing\nargument list.  It also associates to the left, so all of these parse\nthe same:\n```\nf x y z  is  f(x) y z  is  f(x, y) z  is  f(x, y, z)\n```\n\n"},"Inert",[]],"tag":"Create"}],[48,{"contents":[{"rsbBlockId":48,"rsbHtml":"<div class=\"prose-block\"><p>This is particularly nice when the last argument is a long\nexpression, such as an inline function definition:</p>\n<pre><code>each(xs) \\x.\n  &lt;do something&gt;\n  &lt;do something else&gt;\n</code></pre>\n<p>is the same as</p>\n<pre><code>each(xs, \\x.\n  &lt;do something&gt;\n  &lt;do something else&gt;)\n</code></pre>\n<p>but you don't have to worry about the long-range close-paren.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":15,"rsbLine":192,"rsbText":"'This is particularly nice when the last argument is a long\nexpression, such as an inline function definition:\n```\neach(xs) \\x.\n  <do something>\n  <do something else>\n```\nis the same as\n```\neach(xs, \\x.\n  <do something>\n  <do something else>)\n```\nbut you don't have to worry about the long-range close-paren.\n\n"},"Inert",[]],"tag":"Create"}],[49,{"contents":[{"rsbBlockId":49,"rsbHtml":"<div class=\"prose-block\"><p>The tight binding of juxtaposition is not always convenient, so Dex\nalso borrows the <code>$</code> operator from Haskell.  This acts the same, but\nhas the loosest binding precedence and associates to the right.  Thus,\n<code>f $ x + 1</code> is <code>f(x + 1)</code> and <code>f $ g $ h x</code> is <code>f(g(h x))</code>.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":5,"rsbLine":207,"rsbText":"'The tight binding of juxtaposition is not always convenient, so Dex\nalso borrows the `$` operator from Haskell.  This acts the same, but\nhas the loosest binding precedence and associates to the right.  Thus,\n`f $ x + 1` is `f(x + 1)` and `f $ g $ h x` is `f(g(h x))`.\n\n"},"Inert",[]],"tag":"Create"}],[50,{"contents":[{"rsbBlockId":50,"rsbHtml":"<div class=\"prose-block\"><p>Finally, to make it more convenient to write pipelines where the data\nflows from left to right, Dex borrows the pipe <code>|</code> operator from Unix\nshells.  Pipe makes the item on its left be the first argument of the\nfunction application on its right.  So,</p>\n<pre><code>x | f            is  f(x)\nx | f(y)         is  f(x, y)\nx | f(y) | g(z)  is  g(f(x, y), z)\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":10,"rsbLine":212,"rsbText":"'Finally, to make it more convenient to write pipelines where the data\nflows from left to right, Dex borrows the pipe `|` operator from Unix\nshells.  Pipe makes the item on its left be the first argument of the\nfunction application on its right.  So,\n```\nx | f            is  f(x)\nx | f(y)         is  f(x, y)\nx | f(y) | g(z)  is  g(f(x, y), z)\n```\n\n"},"Inert",[]],"tag":"Create"}],[51,{"contents":[{"rsbBlockId":51,"rsbHtml":"<div class=\"prose-block\"><p>As you can see, the <code>|</code> operator associates to chain applying functions, like <code>$</code>.\nThe <code>|</code> and <code>$</code> operators also stack:</p>\n<pre><code>x | f(y) $ z     is  f(x, y, z)\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":6,"rsbLine":222,"rsbText":"'As you can see, the `|` operator associates to chain applying functions, like `$`.\nThe `|` and `$` operators also stack:\n```\nx | f(y) $ z     is  f(x, y, z)\n```\n\n"},"Inert",[]],"tag":"Create"}],[52,{"contents":[{"rsbBlockId":52,"rsbHtml":"<div class=\"prose-block\"><h3>Underscore: Infer an explicit argument implicitly</h3>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":228,"rsbText":"'### Underscore: Infer an explicit argument implicitly\n\n"},"Inert",[]],"tag":"Create"}],[53,{"contents":[{"rsbBlockId":53,"rsbHtml":"<div class=\"prose-block\"><p>Sometimes, a required function argument can be successfully inferred.\nIn these cases one can write <code>_</code>, which means &quot;fill this in by\nunification&quot; (the same as implicit parameters).  For example, the <code>@</code>\noperator casts a number to an index set, and accepts the type to cast\nto as an explicit argument.  However, when the index set of an array is\nobvious, there is no need to spell it:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":7,"rsbLine":230,"rsbText":"'Sometimes, a required function argument can be successfully inferred.\nIn these cases one can write `_`, which means \"fill this in by\nunification\" (the same as implicit parameters).  For example, the `@`\noperator casts a number to an index set, and accepts the type to cast\nto as an explicit argument.  However, when the index set of an array is\nobvious, there is no need to spell it:\n\n"},"Inert",[]],"tag":"Create"}],[54,{"contents":[{"rsbBlockId":54,"rsbHtml":"<div class=\"code-block\"><span class=\"symbol\" id=\"span_54_284\">[</span><span id=\"span_54_285\">&quot;foo&quot;</span><span class=\"symbol\" id=\"span_54_286\">,</span><span> </span><span id=\"span_54_287\">&quot;bar&quot;</span><span class=\"symbol\" id=\"span_54_288\">]</span><span class=\"symbol\" id=\"span_54_291\">[</span><span class=\"symbol\" id=\"span_54_293\">(</span><span class=\"literal\" id=\"span_54_294\">0</span><span class=\"symbol\" id=\"span_54_295\">@</span><span class=\"symbol\" id=\"span_54_298\">_</span><span class=\"symbol\" id=\"span_54_299\">)</span><span class=\"symbol\" id=\"span_54_300\">]</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[284,285,286,287,288,291,293,294,295,298,299,300],"rsbNumLines":1,"rsbLine":237,"rsbText":"[\"foo\", \"bar\"][(0@_)]\n"},"Complete",[{"contents":[[284,283],[285,285],[286,283],[287,287],[288,283],[291,290],[293,292],[294,294],[295,295],[298,297],[299,292],[300,290]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[284,300],"tnHighlights":[[289,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[283,{"contents":{"tnSpan":[284,288],"tnHighlights":[[284,"HighlightLeaf"],[286,"HighlightLeaf"],[288,"HighlightLeaf"],[285,"HighlightGroup"],[287,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[284,{"contents":{"tnSpan":[284,284],"tnHighlights":[[284,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[285,{"contents":{"tnSpan":[285,285],"tnHighlights":[[285,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[286,{"contents":{"tnSpan":[286,286],"tnHighlights":[[286,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[287,{"contents":{"tnSpan":[287,287],"tnHighlights":[[287,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[288,{"contents":{"tnSpan":[288,288],"tnHighlights":[[288,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[289,{"contents":{"tnSpan":[284,300],"tnHighlights":[[283,"HighlightGroup"],[290,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[290,{"contents":{"tnSpan":[291,300],"tnHighlights":[[291,"HighlightLeaf"],[300,"HighlightLeaf"],[292,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[291,{"contents":{"tnSpan":[291,291],"tnHighlights":[[291,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[292,{"contents":{"tnSpan":[293,299],"tnHighlights":[[293,"HighlightLeaf"],[299,"HighlightLeaf"],[296,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[293,{"contents":{"tnSpan":[293,293],"tnHighlights":[[293,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[294,{"contents":{"tnSpan":[294,294],"tnHighlights":[[294,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[295,{"contents":{"tnSpan":[295,295],"tnHighlights":[[295,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[296,{"contents":{"tnSpan":[294,298],"tnHighlights":[[294,"HighlightGroup"],[295,"HighlightGroup"],[297,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[297,{"contents":{"tnSpan":[298,298],"tnHighlights":[[298,"HighlightLeaf"]],"tnText":""},"tag":"Create"}],[298,{"contents":{"tnSpan":[298,298],"tnHighlights":[[298,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[299,{"contents":{"tnSpan":[299,299],"tnHighlights":[[299,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[300,{"contents":{"tnSpan":[300,300],"tnHighlights":[[300,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[285,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef to_list(xs:n=>a) -> List a given (n|Ix, a:Type) =\n  n' = size n\n  AsList(n', unsafe_cast_table(to=Fin n', xs))\n"]},"tag":"Update"}],[287,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef to_list(xs:n=>a) -> List a given (n|Ix, a:Type) =\n  n' = size n\n  AsList(n', unsafe_cast_table(to=Fin n', xs))\n"]},"tag":"Update"}],[289,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef show_any(x:a) -> String given (a:Type) = unsafe_coerce(to=String, %showAny(x))\n"]},"tag":"Update"}],[295,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef (@)(i:Nat, n|Ix) -> n = from_ordinal i\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[283,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((Fin 2) => List Word8)"]},"tag":"Update"}],[285,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({n:Type}[v#0:(Ix n)]{a:Type}(xs:(n => a)) -> (List a))"]},"tag":"Update"}],[287,{"contents":{"tnuHighlights":[],"tnuText":["Type:   (List Word8)"]},"tag":"Update"}],[289,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}(x:a) -> (List Word8))"]},"tag":"Update"}],[292,{"contents":{"tnuHighlights":[],"tnuText":["Type:   (Fin 2)"]},"tag":"Update"}],[294,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Nat"]},"tag":"Update"}],[295,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((i:Nat,n:Type)[v#0:(Ix n)] -> n)"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["TypePass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"},{"contents":["SimpPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["OptPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"},{"contents":"\"foo\"","tag":"RenderedTextOut"}]],"tag":"Create"}],[55,{"contents":[{"rsbBlockId":55,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":239,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[56,{"contents":[{"rsbBlockId":56,"rsbHtml":"<div class=\"prose-block\"><h3>Supplying an implicit argument explicitly</h3>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":240,"rsbText":"'### Supplying an implicit argument explicitly\n\n"},"Inert",[]],"tag":"Create"}],[57,{"contents":[{"rsbBlockId":57,"rsbHtml":"<div class=\"prose-block\"><p>We can also supply an implicit argument explicitly, by writing <code>&lt;parameter name&gt;=</code>\nin the application syntax:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":3,"rsbLine":242,"rsbText":"'We can also supply an implicit argument explicitly, by writing `<parameter name>=`\nin the application syntax:\n\n"},"Inert",[]],"tag":"Create"}],[58,{"contents":[{"rsbBlockId":58,"rsbHtml":"<div class=\"code-block\"><span id=\"span_58_302\">from_ordinal</span><span class=\"symbol\" id=\"span_58_305\">(</span><span class=\"literal\" id=\"span_58_306\">0</span><span class=\"symbol\" id=\"span_58_307\">,</span><span> </span><span id=\"span_58_308\">n</span><span class=\"symbol\" id=\"span_58_309\">=</span><span class=\"symbol\" id=\"span_58_312\">(</span><span id=\"span_58_313\">Fin</span><span> </span><span class=\"literal\" id=\"span_58_315\">2</span><span class=\"symbol\" id=\"span_58_316\">)</span><span class=\"symbol\" id=\"span_58_317\">)</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[302,305,306,307,308,309,312,313,315,316,317],"rsbNumLines":1,"rsbLine":245,"rsbText":"from_ordinal(0, n=(Fin 2))\n"},"Complete",[{"contents":[[302,302],[305,304],[306,306],[307,304],[308,308],[309,310],[312,311],[313,313],[315,315],[316,311],[317,304]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[302,317],"tnHighlights":[[303,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[302,{"contents":{"tnSpan":[302,302],"tnHighlights":[[302,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[303,{"contents":{"tnSpan":[302,317],"tnHighlights":[[302,"HighlightGroup"],[304,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[304,{"contents":{"tnSpan":[305,317],"tnHighlights":[[305,"HighlightLeaf"],[307,"HighlightLeaf"],[317,"HighlightLeaf"],[306,"HighlightGroup"],[310,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[305,{"contents":{"tnSpan":[305,305],"tnHighlights":[[305,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[306,{"contents":{"tnSpan":[306,306],"tnHighlights":[[306,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[307,{"contents":{"tnSpan":[307,307],"tnHighlights":[[307,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[308,{"contents":{"tnSpan":[308,308],"tnHighlights":[[308,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[309,{"contents":{"tnSpan":[309,309],"tnHighlights":[[309,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[310,{"contents":{"tnSpan":[308,316],"tnHighlights":[[309,"HighlightLeaf"],[308,"HighlightGroup"],[311,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[311,{"contents":{"tnSpan":[312,316],"tnHighlights":[[312,"HighlightLeaf"],[316,"HighlightLeaf"],[314,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[312,{"contents":{"tnSpan":[312,312],"tnHighlights":[[312,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[313,{"contents":{"tnSpan":[313,313],"tnHighlights":[[313,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[314,{"contents":{"tnSpan":[313,315],"tnHighlights":[[313,"HighlightGroup"],[315,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[315,{"contents":{"tnSpan":[315,315],"tnHighlights":[[315,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[316,{"contents":{"tnSpan":[316,316],"tnHighlights":[[316,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[317,{"contents":{"tnSpan":[317,317],"tnHighlights":[[317,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[302,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef from_ordinal(i:Nat) -> n given (n|Ix) =\n  case i < size n of\n    True  -> unsafe_from_ordinal i\n    False -> error $ from_ordinal_error(i, size n)\n"]},"tag":"Update"}],[303,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef show_any(x:a) -> String given (a:Type) = unsafe_coerce(to=String, %showAny(x))\n"]},"tag":"Update"}],[313,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef Fin(n:Nat) -> Type = %Fin(n)\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["RenamePass",null],"tag":"RenderedPassResult"},{"contents":[[302,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({n:Type}[v#0:(Ix n)](i:Nat) -> n)"]},"tag":"Update"}],[303,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ({a:Type}(x:a) -> (List Word8))"]},"tag":"Update"}],[306,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Nat"]},"tag":"Update"}],[311,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Type"]},"tag":"Update"}],[313,{"contents":{"tnuHighlights":[],"tnuText":["Type:   ((n:Nat) -> Type)"]},"tag":"Update"}],[315,{"contents":{"tnuHighlights":[],"tnuText":["Type:   Nat"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["TypePass",null],"tag":"RenderedPassResult"},{"contents":["SimpPass",null],"tag":"RenderedPassResult"},{"contents":["LowerPass",null],"tag":"RenderedPassResult"},{"contents":["OptPass",null],"tag":"RenderedPassResult"},{"contents":["ImpPass",null],"tag":"RenderedPassResult"},{"contents":["JitPass",null],"tag":"RenderedPassResult"},{"contents":["LLVMOpt",null],"tag":"RenderedPassResult"},{"contents":["AsmPass",null],"tag":"RenderedPassResult"},{"contents":"0","tag":"RenderedTextOut"}]],"tag":"Create"}],[59,{"contents":[{"rsbBlockId":59,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":247,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[60,{"contents":[{"rsbBlockId":60,"rsbHtml":"<div class=\"prose-block\"><p>Since the implicit arguments are passed by name, the order in which\nthey appear in the application syntax doesn't matter.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":3,"rsbLine":248,"rsbText":"'Since the implicit arguments are passed by name, the order in which\nthey appear in the application syntax doesn't matter.\n\n"},"Inert",[]],"tag":"Create"}],[61,{"contents":[{"rsbBlockId":61,"rsbHtml":"<div class=\"prose-block\"><h2>Standalone function types</h2>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":251,"rsbText":"'## Standalone function types\n\n"},"Inert",[]],"tag":"Create"}],[62,{"contents":[{"rsbBlockId":62,"rsbHtml":"<div class=\"prose-block\"><p>If you need to write the type of a function outside its definition,\njust use the same arrow syntax:</p>\n<pre><code>(Float, Float) -&gt; Float\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":6,"rsbLine":253,"rsbText":"'If you need to write the type of a function outside its definition,\njust use the same arrow syntax:\n```\n(Float, Float) -> Float\n```\n\n"},"Inert",[]],"tag":"Create"}],[63,{"contents":[{"rsbBlockId":63,"rsbHtml":"<div class=\"prose-block\"><p>Naming the parameters in a type is not necessary unless the type\nitself refers to the names, in which case you can use colons as usual.\nFor instance, the type of a function that accepts a size and an array\nof that size looks like this:</p>\n<pre><code>(n:Nat, (Fin n) =&gt; Float) -&gt; Float\n</code></pre>\n</div>","rsbLexemeList":[],"rsbNumLines":8,"rsbLine":259,"rsbText":"'Naming the parameters in a type is not necessary unless the type\nitself refers to the names, in which case you can use colons as usual.\nFor instance, the type of a function that accepts a size and an array\nof that size looks like this:\n```\n(n:Nat, (Fin n) => Float) -> Float\n```\n\n"},"Inert",[]],"tag":"Create"}],[64,{"contents":[{"rsbBlockId":64,"rsbHtml":"<div class=\"prose-block\"><p>You can write implcit and class parameters in types by writing the\n<code>given</code> clause inside the argument list:</p>\n<pre><code>(given (n:Nat), (Fin n) =&gt; Float) -&gt; Float\n</code></pre>\n<p>Note that unlike with <code>def</code>, the <code>given</code> is not automatically floated\nto the front, so scope usually makes one write it first.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":8,"rsbLine":267,"rsbText":"'You can write implcit and class parameters in types by writing the\n`given` clause inside the argument list:\n```\n(given (n:Nat), (Fin n) => Float) -> Float\n```\nNote that unlike with `def`, the `given` is not automatically floated\nto the front, so scope usually makes one write it first.\n\n"},"Inert",[]],"tag":"Create"}],[65,{"contents":[{"rsbBlockId":65,"rsbHtml":"<div class=\"prose-block\"><p>The effect specifier, as usual, is written in curly braces preceding the result type.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":275,"rsbText":"'The effect specifier, as usual, is written in curly braces preceding the result type.\n\n"},"Inert",[]],"tag":"Create"}],[66,{"contents":[{"rsbBlockId":66,"rsbHtml":"<div class=\"prose-block\"><p>TODO The printing of function types is a historical artifact.\nInstead of generating a <code>given</code> clause, the printer writes implicit\narguments in curly braces, constraint arguments in square brackets,\nand explicit arguments in parens, in their scope order.</p>\n<p>'For instance, the type of our <code>average</code> function above prints like this:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":7,"rsbLine":277,"rsbText":"'TODO The printing of function types is a historical artifact.\nInstead of generating a `given` clause, the printer writes implicit\narguments in curly braces, constraint arguments in square brackets,\nand explicit arguments in parens, in their scope order.\n \n'For instance, the type of our `average` function above prints like this:\n\n"},"Inert",[]],"tag":"Create"}],[67,{"contents":[{"rsbBlockId":67,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">:</span><span id=\"span_67_318\">t</span><span> </span><span id=\"span_67_319\">average</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[318,319],"rsbNumLines":1,"rsbLine":284,"rsbText":":t average\n"},"Complete",[{"contents":[[0,0]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[0,0],"tnHighlights":[[0,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":"({n:Type}[v#0:(Ix n)](xs:(n => Float32)) -> Float32)","tag":"RenderedTextOut"}]],"tag":"Create"}],[68,{"contents":[{"rsbBlockId":68,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":286,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[69,{"contents":[{"rsbBlockId":69,"rsbHtml":"<div class=\"prose-block\"><h2>Anonymous functions (lambda)</h2>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":287,"rsbText":"'## Anonymous functions (lambda)\n\n"},"Inert",[]],"tag":"Create"}],[70,{"contents":[{"rsbBlockId":70,"rsbHtml":"<div class=\"prose-block\"><p>The syntax for anonymous functions is</p>\n<pre><code>\\ &lt;parameters&gt; . &lt;body&gt;\n</code></pre>\n<p>The <code>body</code> can but need not be a block.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":6,"rsbLine":289,"rsbText":"'The syntax for anonymous functions is\n```\n\\ <parameters> . <body>\n```\nThe `body` can but need not be a block.\n\n"},"Inert",[]],"tag":"Create"}],[71,{"contents":[{"rsbBlockId":71,"rsbHtml":"<div class=\"prose-block\"><p>For example, <code>\\a. a + 1</code> means &quot;the add 1 function&quot;:</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":295,"rsbText":"'For example, `\\a. a + 1` means \"the add 1 function\":\n\n"},"Inert",[]],"tag":"Create"}],[72,{"contents":[{"rsbBlockId":72,"rsbHtml":"<div class=\"code-block\"><span id=\"span_72_321\">map</span><span> </span><span class=\"symbol\" id=\"span_72_324\">(</span><span class=\"symbol\" id=\"span_72_326\">\\</span><span id=\"span_72_327\">a</span><span class=\"symbol\" id=\"span_72_328\">.</span><span> </span><span id=\"span_72_329\">a</span><span> </span><span class=\"symbol\" id=\"span_72_330\">+</span><span> </span><span class=\"literal\" id=\"span_72_332\">1</span><span class=\"symbol\" id=\"span_72_333\">)</span><span> </span><span class=\"symbol\" id=\"span_72_336\">[</span><span class=\"literal\" id=\"span_72_337\">1.</span><span class=\"symbol\" id=\"span_72_338\">,</span><span> </span><span class=\"literal\" id=\"span_72_339\">2.</span><span class=\"symbol\" id=\"span_72_340\">,</span><span> </span><span class=\"literal\" id=\"span_72_341\">3.</span><span class=\"symbol\" id=\"span_72_342\">]</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[321,324,326,327,328,329,330,332,333,336,337,338,339,340,341,342],"rsbNumLines":1,"rsbLine":297,"rsbText":"map (\\a. a + 1) [1., 2., 3.]\n"},"CompleteWithErrors",[{"contents":[[321,321],[324,323],[326,325],[327,327],[328,325],[329,329],[330,330],[332,332],[333,323],[336,335],[337,337],[338,335],[339,339],[340,335],[341,341],[342,335]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[321,342],"tnHighlights":[[334,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[321,{"contents":{"tnSpan":[321,321],"tnHighlights":[[321,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[322,{"contents":{"tnSpan":[321,333],"tnHighlights":[[321,"HighlightGroup"],[323,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[323,{"contents":{"tnSpan":[324,333],"tnHighlights":[[324,"HighlightLeaf"],[333,"HighlightLeaf"],[325,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[324,{"contents":{"tnSpan":[324,324],"tnHighlights":[[324,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[325,{"contents":{"tnSpan":[326,332],"tnHighlights":[[326,"HighlightLeaf"],[328,"HighlightLeaf"],[327,"HighlightGroup"],[331,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[326,{"contents":{"tnSpan":[326,326],"tnHighlights":[[326,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[327,{"contents":{"tnSpan":[327,327],"tnHighlights":[[327,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[328,{"contents":{"tnSpan":[328,328],"tnHighlights":[[328,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[329,{"contents":{"tnSpan":[329,329],"tnHighlights":[[329,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[330,{"contents":{"tnSpan":[330,330],"tnHighlights":[[330,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[331,{"contents":{"tnSpan":[329,332],"tnHighlights":[[329,"HighlightGroup"],[330,"HighlightGroup"],[332,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[332,{"contents":{"tnSpan":[332,332],"tnHighlights":[[332,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[333,{"contents":{"tnSpan":[333,333],"tnHighlights":[[333,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[334,{"contents":{"tnSpan":[321,342],"tnHighlights":[[322,"HighlightGroup"],[335,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[335,{"contents":{"tnSpan":[336,342],"tnHighlights":[[336,"HighlightLeaf"],[338,"HighlightLeaf"],[340,"HighlightLeaf"],[342,"HighlightLeaf"],[337,"HighlightGroup"],[339,"HighlightGroup"],[341,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[336,{"contents":{"tnSpan":[336,336],"tnHighlights":[[336,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[337,{"contents":{"tnSpan":[337,337],"tnHighlights":[[337,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[338,{"contents":{"tnSpan":[338,338],"tnHighlights":[[338,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[339,{"contents":{"tnSpan":[339,339],"tnHighlights":[[339,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[340,{"contents":{"tnSpan":[340,340],"tnHighlights":[[340,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[341,{"contents":{"tnSpan":[341,341],"tnHighlights":[[341,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[342,{"contents":{"tnSpan":[342,342],"tnHighlights":[[342,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[334,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef show_any(x:a) -> String given (a:Type) = unsafe_coerce(to=String, %showAny(x))\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":[321,"Name error: variable not in scope: map"],"tag":"RenderedError"}]],"tag":"Create"}],[73,{"contents":[{"rsbBlockId":73,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":299,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[74,{"contents":[{"rsbBlockId":74,"rsbHtml":"<div class=\"prose-block\"><p>We can also explicitly type-annotate the arguments if we want.</p>\n</div>","rsbLexemeList":[],"rsbNumLines":2,"rsbLine":300,"rsbText":"'We can also explicitly type-annotate the arguments if we want.\n\n"},"Inert",[]],"tag":"Create"}],[75,{"contents":[{"rsbBlockId":75,"rsbHtml":"<div class=\"code-block\"><span id=\"span_75_344\">map</span><span> </span><span class=\"symbol\" id=\"span_75_347\">(</span><span class=\"symbol\" id=\"span_75_349\">\\</span><span id=\"span_75_350\">a</span><span class=\"symbol\" id=\"span_75_351\">:</span><span id=\"span_75_353\">Float</span><span class=\"symbol\" id=\"span_75_354\">.</span><span> </span><span id=\"span_75_355\">a</span><span> </span><span class=\"symbol\" id=\"span_75_356\">+</span><span> </span><span class=\"literal\" id=\"span_75_358\">1</span><span class=\"symbol\" id=\"span_75_359\">)</span><span> </span><span class=\"symbol\" id=\"span_75_362\">[</span><span class=\"literal\" id=\"span_75_363\">1.</span><span class=\"symbol\" id=\"span_75_364\">,</span><span> </span><span class=\"literal\" id=\"span_75_365\">2.</span><span class=\"symbol\" id=\"span_75_366\">,</span><span> </span><span class=\"literal\" id=\"span_75_367\">3.</span><span class=\"symbol\" id=\"span_75_368\">]</span><span class=\"comment\">\n</span></div>","rsbLexemeList":[344,347,349,350,351,353,354,355,356,358,359,362,363,364,365,366,367,368],"rsbNumLines":1,"rsbLine":302,"rsbText":"map (\\a:Float. a + 1) [1., 2., 3.]\n"},"CompleteWithErrors",[{"contents":[[344,344],[347,346],[349,348],[350,350],[351,352],[353,353],[354,348],[355,355],[356,356],[358,358],[359,346],[362,361],[363,363],[364,361],[365,365],[366,361],[367,367],[368,361]],"tag":"RenderedFocusUpdate"},{"contents":[[0,{"contents":{"tnSpan":[344,368],"tnHighlights":[[360,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[344,{"contents":{"tnSpan":[344,344],"tnHighlights":[[344,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[345,{"contents":{"tnSpan":[344,359],"tnHighlights":[[344,"HighlightGroup"],[346,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[346,{"contents":{"tnSpan":[347,359],"tnHighlights":[[347,"HighlightLeaf"],[359,"HighlightLeaf"],[348,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[347,{"contents":{"tnSpan":[347,347],"tnHighlights":[[347,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[348,{"contents":{"tnSpan":[349,358],"tnHighlights":[[349,"HighlightLeaf"],[354,"HighlightLeaf"],[352,"HighlightGroup"],[357,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[349,{"contents":{"tnSpan":[349,349],"tnHighlights":[[349,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[350,{"contents":{"tnSpan":[350,350],"tnHighlights":[[350,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[351,{"contents":{"tnSpan":[351,351],"tnHighlights":[[351,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[352,{"contents":{"tnSpan":[350,353],"tnHighlights":[[351,"HighlightLeaf"],[350,"HighlightGroup"],[353,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[353,{"contents":{"tnSpan":[353,353],"tnHighlights":[[353,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[354,{"contents":{"tnSpan":[354,354],"tnHighlights":[[354,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[355,{"contents":{"tnSpan":[355,355],"tnHighlights":[[355,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[356,{"contents":{"tnSpan":[356,356],"tnHighlights":[[356,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[357,{"contents":{"tnSpan":[355,358],"tnHighlights":[[355,"HighlightGroup"],[356,"HighlightGroup"],[358,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[358,{"contents":{"tnSpan":[358,358],"tnHighlights":[[358,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[359,{"contents":{"tnSpan":[359,359],"tnHighlights":[[359,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[360,{"contents":{"tnSpan":[344,368],"tnHighlights":[[345,"HighlightGroup"],[361,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[361,{"contents":{"tnSpan":[362,368],"tnHighlights":[[362,"HighlightLeaf"],[364,"HighlightLeaf"],[366,"HighlightLeaf"],[368,"HighlightLeaf"],[363,"HighlightGroup"],[365,"HighlightGroup"],[367,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[362,{"contents":{"tnSpan":[362,362],"tnHighlights":[[362,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[363,{"contents":{"tnSpan":[363,363],"tnHighlights":[[363,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[364,{"contents":{"tnSpan":[364,364],"tnHighlights":[[364,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[365,{"contents":{"tnSpan":[365,365],"tnHighlights":[[365,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[366,{"contents":{"tnSpan":[366,366],"tnHighlights":[[366,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[367,{"contents":{"tnSpan":[367,367],"tnHighlights":[[367,"HighlightGroup"]],"tnText":""},"tag":"Create"}],[368,{"contents":{"tnSpan":[368,368],"tnHighlights":[[368,"HighlightGroup"]],"tnText":""},"tag":"Create"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":["Parse",null],"tag":"RenderedPassResult"},{"contents":[[360,{"contents":{"tnuHighlights":[],"tnuText":["Top-level name defined in prelude:\ndef show_any(x:a) -> String given (a:Type) = unsafe_coerce(to=String, %showAny(x))\n"]},"tag":"Update"}]],"tag":"RenderedTreeNodeUpdate"},{"contents":[344,"Name error: variable not in scope: map"],"tag":"RenderedError"}]],"tag":"Create"}],[76,{"contents":[{"rsbBlockId":76,"rsbHtml":"<div class=\"code-block\"><span class=\"comment\">\n</span></div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":304,"rsbText":"\n"},"Inert",[]],"tag":"Create"}],[77,{"contents":[{"rsbBlockId":77,"rsbHtml":"<div class=\"prose-block\"><p>TODO How to specify implicit and constraint parameters?</p>\n</div>","rsbLexemeList":[],"rsbNumLines":1,"rsbLine":305,"rsbText":"'TODO How to specify implicit and constraint parameters?\n"},"Inert",[]],"tag":"Create"}]]}